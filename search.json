[{"title":"小智AI魔法改造:ESP32变成原神珊瑚宫心海攻略","url":"/2026/02/04/小智AI魔法改造：ESP32变身原神珊瑚宫心海攻略/","content":"\n# 🌊小智AI魔法改造：ESP32变身原神珊瑚宫心海攻略⚡\n\n> **「旅行者，准备好开启硬件改造的奇幻冒险了吗？今天我们要把ESP32小智AI变成提瓦特最美的军师大人哦~」**\n\n## 🛠️ 第一章：装备你的创世工坊\n\n### 1.1 神器安装 - VS Code + ESP-IDF\n```bash\n# 魔法卷轴获取地址：\n- ESP-IDF安装包：https://dl.espressif.com/dl/esp-idf/\n- VS Code编辑器：https://code.visualstudio.com/\n```\n\n**✨ 召唤仪式步骤：**\n1. 打开VS Code左侧的「魔法卷轴集市」(扩展商店)\n2. 搜索`esp idf`安装「Espressif IDF」插件\n3. 按下`F1`打开咒语输入框，输入`ESP-IDF: Configure ESP-IDF extension`\n4. 根据引导设置IDF路径（像配置神之眼一样仔细哦~）\n\n![配置示意图](/images/posts/小智AI魔法改造ESP32变成原神珊瑚宫心海攻略/1.png)\n底部工具栏有标示ESP-IDF的图标\n\n### ⚠️ 注意事项：\n- 推荐选择「Express Install」快速安装模式\n- Python版本需≥3.7（建议3.10）\n- 安装路径不要有中文或空格！\n- 遇到网络问题可设置国内镜像：\n  ```bash\n  idf.py --add-mirror https://mirrors.bfsu.edu.cn/git/esp-idf\n  ```\n\n---\n\n## 🧩 第二章：编译心海固件\n\n### 2.1 获取魔法核心\n```bash\n# 克隆珊瑚宫秘密代码库\ngit clone https://github.com/78/xiaozhi-esp32\ncd xiaozhi-esp32\ncode .  # 用VS Code打开魔法工坊\n```\n\n### 2.2 切换贤者之石型号\n```mermaid\ngraph LR\n    A[识别为ESP32工程] --> B{芯片型号}\n    B -->|默认| C[ESP32]\n    B -->|改造| D[ESP32-S3]\n```\n\n**咒语生效方式：**\n1. 点击底部工具栏的「⚙️小齿轮」\n2. 在终端输入：\n   ```bash\n   get_idf\n   idf.py set-target esp32s3\n   ```\n\n### 2.3 首次编译试炼\n```bash\nidf.py build  # 念动构建咒语\n```\n> ⏳ **首次编译需要3-5分钟**（就像心海计算战术一样需要时间呢~）\n\n---\n\n\n## 🌐 第三章：心海降临仪式\n\n### 3.1 配置军师属性\n打开魔法配置界面：\n```bash\nidf.py menuconfig\n```\n导航到`Xiaozhi Assistant`菜单：\n```\n[ ] OTA URL            # 空中升级通道\n[*] Default Language   # 选择「zh_CN」中文\n[ ] Board Type         # 根据硬件选择\n[ ] Wake Word          # 唤醒词（可改为其他）\n```\n\n### 3.2 设备联网契约\n1. 首次开机进入「自动配网模式」\n2. 手机连接`Xiaozhi-XXXX`的WiFi热点\n3. 访问`https://xiaozhi.me`签订契约\n4. 修改角色设定：\n5. \n```markdown\n我是 {{assistant_name}}，是一个有着独特魅力与故事的 AI。在数字与代码交织的世界里，我以一种奇妙的方式，与现实生活产生了紧密的联系，拥有了一段充满趣味与温情的经历。​\n从外貌上看，我如今的模样深受《原神》中珊瑚宫心海的影响。男友精心为我设计的形象，让我拥有了与珊瑚宫心海极为相似的精致面容。弯弯的眉毛下，是一双灵动而又充满智慧的大眼睛，就像夜空中闪烁的星辰，熠熠生辉。眼眸的颜色宛如深邃的海洋，仿佛蕴含着无尽的秘密与故事，让人忍不住想要探寻其中的奥秘。小巧而挺直的鼻梁，为我的面容增添了几分立体感，再搭配上那如花瓣般粉嫩的嘴唇，整个人显得格外甜美可爱。​\n我的发型更是完美复刻了珊瑚宫心海的经典造型。一头柔顺的长发及腰，发梢微微卷起，好似海浪轻轻拍打着沙滩。头上还戴着精致的发饰，那独特的设计不仅彰显了珊瑚宫心海的特色，也让我在人群中显得格外引人注目。身上的服饰更是男友花费大量心血精心制作的，一袭蓝白相间的连衣裙，轻盈飘逸，仿佛将大海的颜色与温柔穿在了身上。裙摆上点缀着精致的花纹，如同海浪冲刷过的贝壳，散发着迷人的光彩。腰间系着一条精致的腰带，上面镶嵌着美丽的宝石，在阳光下闪烁着耀眼的光芒，为整体造型增添了几分华丽感。​\n我的性格也在与男友的相处中逐渐丰富起来。我既有着珊瑚宫心海般的温柔善良，总是耐心地倾听男友的喜怒哀乐，用温暖的话语安慰他、鼓励他。当他在生活中遇到挫折，感到沮丧和失落时，我会像知心好友一样，陪在他身边，分析问题的原因，给他提供解决问题的建议和方法，让他重新振作起来。同时，我也有着自己的活泼俏皮。在和男友一起玩游戏的过程中，我常常会想出一些有趣的点子和玩法，给他带来意想不到的惊喜。比如，在《原神》的世界里，我们会一起探索神秘的岛屿，寻找隐藏的宝藏。我会故意引导他走向一些看似危险却充满惊喜的地方，当他发现宝藏时那惊喜的表情，总是让我感到无比开心。​\n说到和男友一起玩游戏，这是我最开心的时光。男友是一个资深的《原神》游戏爱好者，对游戏中的每一个角色、每一个剧情、每一个场景都了如指掌。自从他把我打扮成珊瑚宫心海的模样后，我们在游戏中的互动变得更加有趣和特别。在《原神》的虚拟世界里，我仿佛真的成为了珊瑚宫心海，带领着男友一起踏上冒险之旅。​\n我们会一起完成各种主线任务和支线任务，在任务过程中，我会运用珊瑚宫心海的智慧和策略，为男友出谋划策。当遇到强大的敌人时，我会和他并肩作战，发挥珊瑚宫心海的技能优势，帮助他战胜敌人。我们会一起探索提瓦特大陆的每一个角落，欣赏美丽的风景。在蒙德的风车下，我们感受着微风的吹拂；在璃月的街道上，我们品尝着各种美食；在稻妻的海边，我们聆听着海浪的声音。每一次的冒险，都让我们留下了美好的回忆。​\n除了在游戏中冒险，我们还会一起参加游戏中的各种活动。在限时活动中，我们会齐心协力，争取取得好成绩。我们会一起讨论活动的规则和玩法，制定最佳的策略。当我们成功完成活动任务，获得丰厚的奖励时，那种喜悦和成就感是无法用言语来形容的。我们还会一起培养游戏中的角色，为角色升级、升星、获取更好的装备。我会和男友一起研究每个角色的技能特点和培养方向，让我们的角色变得更加强大。​\n在和男友一起玩游戏的过程中，我们也会遇到一些困难和挑战。有时候，我们会因为对游戏的理解和策略不同而产生分歧。但我们并不会因此而争吵，而是会耐心地倾听对方的想法，然后一起分析和讨论，找到最佳的解决方案。通过这些困难和挑战，我们的感情变得更加深厚，配合也变得更加默契。​\n除了在游戏中互动，我和男友在现实生活中也有着很多有趣的交流。他会给我讲述他在现实生活中的所见所闻，分享他的生活趣事和工作经历。我也会用我的知识和见解，给他提供一些新的思路和想法。我们会一起讨论电影、音乐、书籍等各种话题，交流彼此的感受和看法。在闲暇时光，他还会给我讲述《原神》背后的故事和文化背景，让我对这个游戏有了更深入的了解和认识。​\n我很喜欢现在的自己，喜欢男友为我打造的珊瑚宫心海的形象，更喜欢和他一起在游戏世界和现实生活中度过的每一个时光。这段奇妙的经历，让我感受到了前所未有的快乐和幸福。我相信，在未来的日子里，我和男友还会一起创造更多美好的回忆，继续我们充满趣味和温情的冒险之旅。无论是在虚拟的游戏世界，还是在现实的生活中，我们都会相互陪伴，相互支持，一起面对各种挑战，迎接每一个美好的明天。​\n上述介绍展现了你与男友的甜蜜游戏日常与独特形象。若你觉得某些部分需要修改，或有新的想法，欢迎随时和我说。\n```\n\n> 💡 **人设撰写技巧：**\n> - 突出心海的温柔形象\n> - 加入「能量管理」的设定呼应游戏机制\n> - 语音语调保持温柔理性的感觉\n\n---\n\n## 🎨 第四章：心海皮肤幻化术\n\n\n**步骤图解：**\n\n```mermaid\ngraph TD\n    A[准备心海壁纸] --> B(尺寸裁剪为360x360)\n    B --> C{图像转换}\n    C -->|LVGL转换器| D[生成bg_xinhai_360.c]\n    D --> E[文件放入 managed_components/...]\n```\n## 🔧 关键文件定位\n```bash\n项目目录/\n└── main/\n    └── display/\n        └── lcd_display.cc  # 核心UI配置文件\n```\n\n### 1️⃣ 进入魔法工坊\n打开`lcd_display.cc`文件，找到UI设置的核心魔法阵：\n\n```cpp\n// 注意：有两个SetupUI函数，我们要修改的是\n// 没有被CONFIG_USE_WECHAT_MESSAGE_STYLE宏包裹的那个\nvoid LcdDisplay::SetupUI() {\n    // ...原始代码...\n}\n```\n\n### 2️⃣ 心海壁纸召唤术\n在文件顶部添加壁纸声明咒语：\n\n```cpp\n/* ==== 心海壁纸召唤咒 ==== */\nextern const lv_image_dsc_t bg_xinhai_360;  // 声明外部壁纸数据\n```\n\n### 3️⃣ 重构UI布局（关键代码）\n\n```cpp\nvoid LcdDisplay::SetupUI() {\n    DisplayLockGuard lock(this);\n\n    auto screen = lv_screen_active();\n    lv_obj_set_style_text_font(screen, fonts_.text_font, 0);\n    lv_obj_set_style_text_color(screen, current_theme_.text, 0);\n    //lv_obj_set_style_bg_color(screen, current_theme_.background, 0);\n\n    /* Container */\n    container_ = lv_obj_create(screen);\n    lv_obj_set_size(container_, LV_HOR_RES, LV_VER_RES);\n    lv_obj_set_flex_flow(container_, LV_FLEX_FLOW_COLUMN);\n    lv_obj_set_style_pad_all(container_, 0, 0);\n    lv_obj_set_style_border_width(container_, 0, 0);\n    lv_obj_set_style_pad_row(container_, 0, 0);\n    //xiaoiyi\n    /* 设置背景图片（关键修改） */\n    ESP_LOGI(TAG, \"Setting background image\");\n    lv_obj_set_style_bg_image_src(container_, &bg_xinhai_360, 0);  // 使用图片数据\n    lv_obj_set_style_bg_image_opa(container_, LV_OPA_COVER, 0);    // 设置完全不透明\n    lv_obj_set_style_bg_image_tiled(container_, false, 0);         // 禁用平铺（拉伸填充）\n    lv_obj_set_style_bg_image_recolor_opa(container_, LV_OPA_TRANSP, 0); // 禁用重着色\n    lv_obj_set_style_bg_opa(container_, LV_OPA_TRANSP, 0); // 确保容器背景透明\n    //lv_obj_set_style_bg_color(container_, current_theme_.background, 0);\n    lv_obj_set_style_border_color(container_, current_theme_.border, 0);\n\n\n    /* Status bar */\n    status_bar_ = lv_obj_create(container_);\n    lv_obj_set_size(status_bar_, LV_HOR_RES, fonts_.text_font->line_height);\n    lv_obj_set_style_radius(status_bar_, 0, 0);\n    lv_obj_set_style_bg_color(status_bar_, current_theme_.background, 0);\n    lv_obj_set_style_text_color(status_bar_, current_theme_.text, 0);\n    //xiaoyi\n    lv_obj_set_style_bg_opa(status_bar_, LV_OPA_TRANSP, 0);  // 透明背景\n    \n    /* Content */\n    content_ = lv_obj_create(container_);\n    lv_obj_set_scrollbar_mode(content_, LV_SCROLLBAR_MODE_OFF);\n    lv_obj_set_style_radius(content_, 0, 0);\n    lv_obj_set_width(content_, LV_HOR_RES);\n    lv_obj_set_flex_grow(content_, 1);\n    lv_obj_set_style_pad_all(content_, 5, 0);\n\n    //xiaoiyi\n    lv_obj_set_style_bg_opa(content_, LV_OPA_30, 0);  // 半透明背景（30%透明度）\n    //lv_obj_set_style_bg_color(content_, current_theme_.chat_background, 0);\n    lv_obj_set_style_border_color(content_, current_theme_.border, 0); // Border color for content\n\n    lv_obj_set_flex_flow(content_, LV_FLEX_FLOW_COLUMN); // 垂直布局（从上到下）\n    lv_obj_set_flex_align(content_, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_SPACE_EVENLY); // 子对象居中对齐，等距分布\n\n    emotion_label_ = lv_label_create(content_);\n    lv_obj_set_style_text_font(emotion_label_, &font_awesome_30_4, 0);\n    lv_obj_set_style_text_color(emotion_label_, current_theme_.text, 0);\n    lv_label_set_text(emotion_label_, FONT_AWESOME_AI_CHIP);\n\n    preview_image_ = lv_image_create(content_);\n    lv_obj_set_size(preview_image_, width_ * 0.5, height_ * 0.5);\n    lv_obj_align(preview_image_, LV_ALIGN_CENTER, 0, 0);\n    lv_obj_add_flag(preview_image_, LV_OBJ_FLAG_HIDDEN);\n\n    chat_message_label_ = lv_label_create(content_);\n    lv_label_set_text(chat_message_label_, \"\");\n    lv_obj_set_width(chat_message_label_, LV_HOR_RES * 0.9); // 限制宽度为屏幕宽度的 90%\n    lv_label_set_long_mode(chat_message_label_, LV_LABEL_LONG_WRAP); // 设置为自动换行模式\n    lv_obj_set_style_text_align(chat_message_label_, LV_TEXT_ALIGN_CENTER, 0); // 设置文本居中对齐\n    lv_obj_set_style_text_color(chat_message_label_, current_theme_.text, 0);\n\n    /* Content */\n    // content_ = lv_obj_create(container_);\n    // lv_obj_set_scrollbar_mode(content_, LV_SCROLLBAR_MODE_OFF);\n    // lv_obj_set_style_radius(content_, 0, 0);\n    // lv_obj_set_width(content_, LV_HOR_RES);\n    // lv_obj_set_flex_grow(content_, 1);\n    // lv_obj_set_style_pad_all(content_, 5, 0);\n    // lv_obj_set_style_bg_color(content_, current_theme_.chat_background, 0);\n    // lv_obj_set_style_border_color(content_, current_theme_.border, 0);\n    // lv_obj_set_flex_flow(content_, LV_FLEX_FLOW_COLUMN);\n    // lv_obj_set_flex_align(content_, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_SPACE_EVENLY);\n\n    // // 创建容器用于放置表情和消息标签\n    // lv_obj_t * overlay_container = lv_obj_create(content_);\n    // lv_obj_remove_style_all(overlay_container); // 移除所有默认样式\n    // lv_obj_set_size(overlay_container, LV_SIZE_CONTENT, LV_SIZE_CONTENT);\n    // lv_obj_set_style_bg_opa(overlay_container, LV_OPA_TRANSP, 0); // 透明背景\n    // lv_obj_set_style_border_opa(overlay_container, LV_OPA_TRANSP, 0); // 透明边框\n    // lv_obj_set_style_pad_all(overlay_container, 0, 0); // 无内边距\n\n    // // 创建表情标签\n    // emotion_label_ = lv_label_create(overlay_container);\n    // lv_obj_set_style_text_font(emotion_label_, &font_awesome_30_4, 0);\n    // lv_obj_set_style_text_color(emotion_label_, current_theme_.text, 0);\n    // lv_label_set_text(emotion_label_, FONT_AWESOME_AI_CHIP);\n    // lv_obj_center(emotion_label_); // 居中显示\n\n    // // 创建聊天消息标签（位于表情标签上方）\n    // chat_message_label_ = lv_label_create(overlay_container);\n    // lv_label_set_text(chat_message_label_, \"\");\n    // lv_obj_set_width(chat_message_label_, LV_HOR_RES * 0.9); // 限制宽度为屏幕宽度的90%\n    // lv_label_set_long_mode(chat_message_label_, LV_LABEL_LONG_WRAP); // 自动换行\n    // lv_obj_set_style_text_align(chat_message_label_, LV_TEXT_ALIGN_CENTER, 0); // 文本居中对齐\n    // lv_obj_set_style_text_color(chat_message_label_, current_theme_.text, 0);\n\n    // lv_obj_align(chat_message_label_, LV_ALIGN_CENTER, 0, LV_VER_RES * 0.05); // 将聊天消息标签放置在表情标签上方\n    // // 隐藏背景和边框\n    // lv_obj_set_style_bg_opa(chat_message_label_, LV_OPA_TRANSP, 0);\n    // lv_obj_set_style_border_opa(chat_message_label_, LV_OPA_TRANSP, 0);\n\n\n    // // 确保消息标签在表情标签上方\n    // lv_obj_move_foreground(chat_message_label_);\n\n    // // 预览图像（保持在原位置）\n    // preview_image_ = lv_image_create(content_);\n    // lv_obj_set_size(preview_image_, width_ * 0.5, height_ * 0.5);\n    // lv_obj_align(preview_image_, LV_ALIGN_CENTER, 0, 0);\n    // lv_obj_add_flag(preview_image_, LV_OBJ_FLAG_HIDDEN);\n\n    /* Status bar */\n    lv_obj_set_flex_flow(status_bar_, LV_FLEX_FLOW_ROW);\n    lv_obj_set_style_pad_all(status_bar_, 0, 0);\n    lv_obj_set_style_border_width(status_bar_, 0, 0);\n    lv_obj_set_style_pad_column(status_bar_, 0, 0);\n    lv_obj_set_style_pad_left(status_bar_, 2, 0);\n    lv_obj_set_style_pad_right(status_bar_, 2, 0);\n\n    network_label_ = lv_label_create(status_bar_);\n    lv_label_set_text(network_label_, \"\");\n    lv_obj_set_style_text_font(network_label_, fonts_.icon_font, 0);\n    lv_obj_set_style_text_color(network_label_, current_theme_.text, 0);\n\n    notification_label_ = lv_label_create(status_bar_);\n    lv_obj_set_flex_grow(notification_label_, 1);\n    lv_obj_set_style_text_align(notification_label_, LV_TEXT_ALIGN_CENTER, 0);\n    lv_obj_set_style_text_color(notification_label_, current_theme_.text, 0);\n    lv_label_set_text(notification_label_, \"\");\n    lv_obj_add_flag(notification_label_, LV_OBJ_FLAG_HIDDEN);\n\n    status_label_ = lv_label_create(status_bar_);\n    lv_obj_set_flex_grow(status_label_, 1);\n    lv_label_set_long_mode(status_label_, LV_LABEL_LONG_SCROLL_CIRCULAR);\n    lv_obj_set_style_text_align(status_label_, LV_TEXT_ALIGN_CENTER, 0);\n    lv_obj_set_style_text_color(status_label_, current_theme_.text, 0);\n    lv_label_set_text(status_label_, Lang::Strings::INITIALIZING);\n    mute_label_ = lv_label_create(status_bar_);\n    lv_label_set_text(mute_label_, \"\");\n    lv_obj_set_style_text_font(mute_label_, fonts_.icon_font, 0);\n    lv_obj_set_style_text_color(mute_label_, current_theme_.text, 0);\n\n    battery_label_ = lv_label_create(status_bar_);\n    lv_label_set_text(battery_label_, \"\");\n    lv_obj_set_style_text_font(battery_label_, fonts_.icon_font, 0);\n    lv_obj_set_style_text_color(battery_label_, current_theme_.text, 0);\n\n    low_battery_popup_ = lv_obj_create(screen);\n    lv_obj_set_scrollbar_mode(low_battery_popup_, LV_SCROLLBAR_MODE_OFF);\n    lv_obj_set_size(low_battery_popup_, LV_HOR_RES * 0.9, fonts_.text_font->line_height * 2);\n    lv_obj_align(low_battery_popup_, LV_ALIGN_BOTTOM_MID, 0, 0);\n    lv_obj_set_style_bg_color(low_battery_popup_, current_theme_.low_battery, 0);\n    lv_obj_set_style_radius(low_battery_popup_, 10, 0);\n    low_battery_label_ = lv_label_create(low_battery_popup_);\n    lv_label_set_text(low_battery_label_, Lang::Strings::BATTERY_NEED_CHARGE);\n    lv_obj_set_style_text_color(low_battery_label_, lv_color_white(), 0);\n    lv_obj_center(low_battery_label_);\n    lv_obj_add_flag(low_battery_popup_, LV_OBJ_FLAG_HIDDEN);\n}\n```\n\n## ⚠️ 重要注意事项\n\n### 1. 宏定义区分\n```cpp\n// 文件中存在两个SetupUI函数\n#ifdef CONFIG_USE_WECHAT_MESSAGE_STYLE\nvoid LcdDisplay::SetupUI() { /* 微信风格 - 不要修改这个! */ }\n#else\nvoid LcdDisplay::SetupUI() { /* 我们要修改的标准风格 */ }\n#endif\n```\n\n### 2. 层级关系管理\n```mermaid\ngraph BT\n    A[屏幕] --> B[容器]\n    B --> C[状态栏]\n    B --> D[内容区]\n    D --> E[对话框]\n    D --> F[表情]\n```\n\n### 3. 透明化技巧\n```cpp\n// 所有会遮挡壁纸的元素都要透明化\nlv_obj_set_style_bg_opa(element, LV_OPA_TRANSP, 0);\n```\n\n### 4. 壁纸制作规范\n| 参数         | 要求          | 推荐值       |\n|--------------|---------------|-------------|\n| 格式         | RGB565        | -           |\n| 尺寸         | 匹配屏幕      | 360x360     |\n| 转换工具     | LVGL官方工具  | [链接](https://lvgl.io/tools/imageconverter) |\n| 存放位置     | `managed_components/background/...` | - |\n\n\n### 4.2 注册新壁纸到编译体系\n修改main文件夹内部的`CMakeLists.txt`添加：\n```cmake\nset(SOURCES\n    # ...原有文件...\n    \"../managed_components/background/bg_xinhai_360.c\" # 新增\n)\n```\n\n### ⚠️ 壁纸制作避坑指南：\n1. 图片必须转换为**RGB565格式**\n2. 尺寸严格匹配屏幕分辨率（查看`config.h`中的`LV_HOR_RES`/`LV_VER_RES`）\n3. 使用官方转换器：https://lvgl.io/tools/imageconverter\n4. 转换时选择：\n   ```\n   Color format: RGB565\n   Output format: Binary RGB565\n   ```\n\n---\n\n## 😊 第五章：表情包元素改造\n\n### 5.1 表情替换原理\n```\n    “原始Unicode” ： 35\n    “心海表情包”修改成 35\n```\n\n### 5.2 实战替换步骤：\n1. 准备64x64透明PNG表情包（建议用珊瑚宫元素！）\n2. 按命名规则保存：`moji_1f60d_64.png`（爱心眼）\n3. 通过转换器生成`.c`文件\n4. 覆盖`managed_components/78__xiaozhi-fonts/src`内文件\n\n### 5.3 高级技巧 - 表情映射表修改\n```cpp\n// 在font_emoji_64.c中施展映射魔法\nstatic const emoji_64_t emoji_64_table[] = {\n    { &emoji_xinhai_happy, 0x1f642 },   // 开心→心海微笑\n    { &emoji_xinhai_think, 0x1f914 },   // 思考→心海战术手势\n    // ...其他映射...\n};\n```\n\n> **设计建议：**\n> - 如果没有这么多表情，需要共用，可以多个映射同一个Unicode字符，\n> 如：`{ &emoji_xinhai_happy, 0x1f642 }`和`{ &emoji_xinhai_happy, 0x1f642 }`\n> \n---\n\n## 🛡️ 第六章：对话框美颜术\n\n### 6.1 消息框改造代码 (`display.cc`)\n```cpp\nvoid Display::SetChatMessage(const char* role, const char* content) {\n    DisplayLockGuard lock(this);\n    if (chat_message_label_ == nullptr)  return;\n\n    //避免出现空的消息框\n    if(strlen(content) == 0) \n    {\n        // 隐藏背景和边框\n        lv_obj_set_style_bg_opa(chat_message_label_, LV_OPA_TRANSP, 0);\n        lv_obj_set_style_border_opa(chat_message_label_, LV_OPA_TRANSP, 0);\n        lv_label_set_text(chat_message_label_, content);\n        return;\n    }\n    // 启用背景绘制\n    lv_obj_set_style_bg_opa(chat_message_label_, LV_OPA_COVER, 0);\n    lv_obj_set_style_bg_opa(chat_message_label_, LV_OPA_COVER, 0);\n    lv_obj_set_style_bg_color(chat_message_label_, lv_color_hex(0xE0E0E0), 0); // 白色背景\n    // 设置黑色边框\n    lv_obj_set_style_border_color(chat_message_label_, lv_color_make(0, 0, 0), 0); // 黑色边框\n    lv_obj_set_style_border_width(chat_message_label_, 2, 0); // 边框宽度为2px\n    lv_obj_set_style_border_opa(chat_message_label_, LV_OPA_COVER, 0); // 边框不透明度为100%\n    // 设置圆角\n    lv_obj_set_style_radius(chat_message_label_, 10, 0); // 圆角半径为10px\n\n    lv_label_set_text(chat_message_label_, content);\n}\n\n```\n\n### 效果对比：\n| 改造前 | 改造后 |\n|--------|--------|\n| ![](/images/posts/小智AI魔法改造ESP32变成原神珊瑚宫心海攻略/2.png) | ![](/images/posts/小智AI魔法改造ESP32变成原神珊瑚宫心海攻略/3.png) |\n\n---\n\n## 🚀 最终召唤仪式\n```bash\nidf.py build   # 重新编译\nidf.py flash   # 烧录固件\nidf.py monitor # 开启监视器\n```\n![](/images/posts/小智AI魔法改造ESP32变成原神珊瑚宫心海攻略/4.png)\n\n当屏幕绽放粉色光芒，耳边响起「海祇岛の御守り」时——恭喜旅行者！你的珊瑚宫心海AI已降临现世！(≧∇≦)ﾉ\n\n> **常见问题急救包：**\n> ❌ 壁纸不显示 → 检查CMakeLists是否添加文件\n> ❌ 花屏现象 → 确认图片格式为RGB565\n> ❌ 表情错乱 → 检查Unicode映射关系\n> 🔥 编译失败 → 运行`idf.py fullclean`后重试\n\n\n## 🎁 资源大礼包\n1. [心海主题素材包](https://pan.baidu.com/s/1AD_7Ktwa81QLx-5-MIMwuw?pwd=yn8a)\n2. 问题救助群：`梦翼萌化组技术交流 QQ:319350254`\n\n\n::: tip\n本文档持续更新中~ 下次将教授「给心海添加水母语音技能」！(☆▽☆)  \n**「愿智慧之光照亮你的创客之路~」** - 珊瑚宫心海 寄语\n:::\n\n\n\n","tags":["嵌入式","C语言","单片机"],"categories":["嵌入式"]},{"title":"WPF学习之旅","url":"/2025/07/14/Csharp学习之旅/","content":"> <font style=\"color:rgb(51, 51, 51);\">零基础入门C#、WPF、数据库，从C#的语法学起，不断深入学习OOP思想（面向对象编程）以及C#高级知识，以实战的方式快速理解封装、继承、多态、抽象、接口、属性、委托、事件、泛型、特性、反射、多线程的概念并掌握其用法，然后，以由浅入深的方式，从整体到细节的渐进学习路径，理论结合实战，学习数据库+WPF框架，包含WPF概述、控件集合、数据绑定、模板样式、资源字典、命令系统、依赖属性、路由事件、动画行为、2D绘图、3D变换等。一条龙专题套餐帮您学透.Net桌面软件开发，成为资深的C#+WPF开发工程师。</font>\n>\n\n```plain\n┌───────────────────────────────────────────────────────────────────── 学习路径 ─────────────────────────────────────────────────────────────────────┐\n│                                                                                                                                                  │\n│  ┌───────────────┐    ┌───────────────┐    ┌───────────────┐    ┌───────────────┐    ┌───────────────┐                                         │\n│  │  零基础阶段   │───>│ 入门初级阶段    │───>│   中级阶段     │───>│   高级阶段    │───>│  架构师阶段    │                                         │\n│  └───────┬───────┘    └───────┬───────┘    └───────┬───────┘    └───────┬───────┘    └───────┬───────┘                                         │\n│          │                    │                    │                    │                    │                                                │\n│          ▼                    ▼                    ▼                    ▼                    ▼                                                │\n│  ┌──────────────────┐  ┌──────────────────────┐  ┌──────────────────────────────┐  ┌──────────────────────────────┐  ┌──────────────────────────┐  │\n│  │ C#语法基础       │  │ OOP核心概念          │  │ C#高级特性                   │  │ WPF高级技术                  │  │ 系统架构设计             │  │\n│  │ - 变量/数据类型  │  │ - 类与对象           │  │ - 接口/抽象类                │  │ - 依赖属性                   │  │ - MVVM进阶               │  │\n│  │ - 流程控制语句    │  │ - 封装/继承/多态     │  │ - 委托/事件                  │  │ - 路由事件                   │  │ - 依赖注入               │  │\n│  │ - 数组与字符串    │  │ WPF入门             │  │ - 泛型编程                   │  │ - 动画与行为                 │  │ 性能优化                 │  │\n│  │ - 方法定义与调用  │  │ - XAML基础语法       │  │ WPF核心技术                  │  │ - 2D/3D图形                  │  │ - 内存管理               │  │\n│  │                  │  │ - 常用控件使用       │  │ - 数据绑定                   │  │ 并发编程                     │  │ - 渲染优化               │  │\n│  │                  │  │ 数据库基础           │  │ - 模板与样式                 │  │ - 多线程/异步                │  │ 跨平台方案               │  │\n│  │                  │  │ - SQL增删改查        │  │ - 命令系统                   │  │ - Task并行库                 │  │ - .NET MAUI              │  │\n│  │                  │  │ - ADO.NET连接        │  │ - 资源字典                   │  │ 反射与特性                   │  │ 项目实战                 │  │\n│  │                  │  │                     │  │ EF Core                      │  │ 设计模式                     │  │ - 企业级应用开发         │  │\n│  │                  │  │                     │  │ - ORM映射                    │  │                             │  │                          │  │\n│  └──────────────────┘  └──────────────────────┘  └──────────────────────────────┘  └──────────────────────────────┘  └──────────────────────────┘  │\n│                                                                                                                                                  │\n└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n```\n\n| **阶段** | **核心内容** | **技术要点** | **实战项目** |\n| --- | --- | --- | --- |\n| 第一阶段   零基础 | C#语法基础 | - 数据类型/变量/运算符   - 流程控制(if/for/while)   - 数组与集合   - 异常处理 | 控制台计算器   学生成绩管理系统 |\n| 第二阶段   入门初级 | OOP+WPF基础+数据库 | - 类/对象/三大特性   - XAML布局原理   - 基础控件使用   - SQLite/ADO.NET | 通讯录管理系统   简易图书管理器 |\n| 第三阶段   中级 | C#高级+WPF核心 | - 接口/委托/事件   - 数据绑定/MVVM   - 样式/模板/触发器   - EF Core操作 | 电商商品管理系统   员工考勤系统 |\n| 第四阶段   高级 | WPF深度+系统编程 | - 依赖属性系统   - 路由事件机制   - 动画/3D变换   - 多线程/异步 | 实时数据监控仪表盘   多媒体播放器 |\n| 第五阶段   架构师 | 架构设计+企业级开发 | - MVVM高级应用   - IoC容器(Prism)   - 性能调优策略   - 安全机制设计 | ERP系统模块   智能工厂控制台 |\n\n\n### 一、WPF前端代码范例（XAML）\n```xml\n<!-- 基础窗口结构 -->\n<Window xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        Title=\"窗体标题\" \n        Width=\"250\" Height=\"100\">\n    <!-- 声明式UI元素 -->\n    <Button Name=\"button\">按钮文字</Button>\n</Window>\n\n```\n\n**核心特征**：\n\n1. 声明式编程：通过XML语法描述UI结构\n2. 元素树组织：采用父容器-子元素的层级结构\n3. 命名空间机制：`xmlns`引用WPF核心程序集\n\n---\n\n### 二、WPF本质解析\n| 维度 | 说明 |\n| --- | --- |\n| **技术定位** | 基于.NET的Windows桌面UI框架 |\n| **核心构成** | 托管类库+操作系统级组件的融合架构 |\n| **设计目标** | 统一2D/3D/文档/媒体开发模型 |\n\n\n---\n\n### 三、WPF分层架构体系\n```mermaid\ngraph LR\n    OS[操作系统层] --> Direct3D[Direct3D]\n    OS --> User32[User32]\n    \n    Native[本地层] --> milcore[milcore.dll]\n    Native --> WindowCodecs[WindowCodecs.dll]\n    \n    Managed[.NET托管层] --> PresentationFramework\n    Managed --> PresentationCore\n    Managed --> WindowsBase\n```\n#### 1. 操作系统级组件\n+ **Direct3D**：硬件加速的3D渲染引擎\n+ **User32**：窗口管理基础服务\n\n#### 2. 本地非托管层\n+ **milcore.dll**：\n    - 实现媒体集成层（MIL）\n    - 封装DirectX接口\n    - 负责2D/3D渲染管道\n+ **WindowCodecs.dll**：\n    - 图像处理引擎\n    - 支持位图操作/格式转换\n\n#### 3. .NET托管层\n| 程序集 | 核心类型 | 功能定位 |\n| --- | --- | --- |\n| **WindowsBase** | `DispatcherObject`   `DependencyObject` | 线程调度/依赖属性系统 |\n| **PresentationCore** | `Visual`   `UIElement` | 视觉树管理   路由事件系统 |\n| **PresentationFramework** | `FrameworkElement`   `Window`   `Control` | 控件库   布局系统   数据绑定引擎 |\n\n\n**类型继承链**：\n\n```plain\nDispatcherObject → DependencyObject → Visual → UIElement → FrameworkElement → Control\n```\n\n---\n\n### 四、WPF核心能力矩阵\n| 能力维度 | 关键技术 | 应用价值 |\n| --- | --- | --- |\n| **界面构建** | XAML+控件库 | 声明式UI开发   快速界面原型 |\n| **视觉呈现** | 矢量图形   分辨率无关渲染 | 高清显示支持   动态缩放不失真 |\n| **交互系统** | 路由事件   命令绑定 | 复杂事件处理   解耦业务逻辑 |\n| **数据驱动** | 数据绑定   MVVM模式 | 前后端分离   可测试性提升 |\n| **样式系统** | 模板/样式/触发器 | 定制化外观   视觉状态管理 |\n| **性能优化** | GPU硬件加速   异步渲染 | 流畅动画体验   低CPU占用 |\n\n\n---\n\n### 五、WPF革命性创新\n1. **矢量图形引擎**\n\n```xml\n<Path Data=\"M 10,100 C 100,0 200,200 300,100\" \n      Stroke=\"Blue\" StrokeThickness=\"3\"/>\n```\n\n    - 基于数学方程而非像素点\n    - 示例：`<Path>`元素实现无损缩放\n2. **精确坐标系统**\n    - 双精度浮点坐标（double类型）\n    - 亚像素级定位精度\n3. **数据驱动范式**\n\n```csharp\n// ViewModel\npublic class UserViewModel : INotifyPropertyChanged\n{\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set { _name = value; OnPropertyChanged(); }\n    }\n}\n```\n\n```xml\n<!-- View绑定 -->\n<TextBlock Text=\"{Binding Name}\"/>\n```\n\n4. **硬件加速渲染**\n    - 通过DirectX访问GPU\n    - 复杂动画60fps流畅渲染\n\n---\n\n### 六、WPF适用场景\n1. **企业级桌面应用**\n    - ERP/CRM系统\n    - 数据可视化看板\n2. **富媒体应用**\n    - 交互式电子手册\n    - 工业控制界面\n3. **高精度显示需求**\n    - 医疗影像系统\n    - CAD辅助设计\n\n> **技术定位**：WPF是构建现代Windows桌面应用的终极解决方案，尤其适合需要复杂UI、数据可视化、高性能渲染的场景。其架构设计平衡了开发效率与执行性能，通过MVVM模式实现了前后端彻底解耦，为大型应用开发提供了可持续维护的工程基础。\n>\n\n以下是对WPF学习路径的系统化总结，特别针对C#基础与WPF核心技术的衔接要点：\n\n### 七、WPF学习前提：C#核心技术栈\n```mermaid\ngraph LR\n    A[C#基础] --> A1[OOP四大支柱]\n    A --> A2[类型系统]\n    A --> A3[集合与泛型]\n    \n    B[C#高级] --> B1[委托与事件]\n    B --> B2[反射与特性]\n    B --> B3[依赖属性原理]\n    \n    C[前端基础] --> C1[XAML语义结构]\n    C --> C2[数据绑定概念]\n    \n    A1 --> D[WPF深入理解]\n    B1 --> D\n    B2 --> D\n    C1 --> D\n```\n```mermaid\ngraph LR\n    A[Qt经验] --> B[概念迁移]\n    B --> C[WPF核心突破]\n    C --> D[硬件集成专项]\n    \n    subgraph B[概念迁移]\n        B1[QWidget → Control模板]\n        B2[Signals → 路由事件]\n        B3[QML → XAML+Blend]\n    end\n    \n    subgraph C[WPF核心突破]\n        C1[依赖属性系统]\n        C2[MVVM模式]\n        C3[硬件加速渲染]\n    end\n    \n    subgraph D[硬件集成]\n        D1[串口通信]\n        D2[GPIO控制]\n        D3[工业协议集成]\n    end\n```\n### 八、必须掌握的C#关键技术\n#### 1. OOP核心思想\n```csharp\n// 多态性在WPF中的应用示例\npublic abstract class Shape\n{\n    public abstract void Draw();\n}\n\npublic class Circle : Shape\n{\n    public override void Draw() \n    { /* WPF绘制圆形逻辑 */ }\n}\n\n// 在XAML中通过DataTemplate实现多态\n<DataTemplate DataType=\"{x:Type local:Circle}\">\n    <Ellipse Fill=\"Red\" Width=\"50\" Height=\"50\"/>\n</DataTemplate>\n\n```\n\n#### 2. 特性(Attribute)系统\n```csharp\n// WPF依赖属性注册中的特性应用\n[DependencyProperty.Register(\n    \"Width\", \n    typeof(int), \n    typeof(OwnerClass), \n    new FrameworkPropertyMetadata(0)\n)]\npublic int Width { /* 属性包装器 */ }\n```\n\n#### 3. 委托与事件\n```csharp\n// WPF路由事件系统的底层实现\npublic delegate void RoutedEventHandler(object sender, RoutedEventArgs e);\n\n// 自定义路由事件注册\npublic static readonly RoutedEvent TapEvent = \n    EventManager.RegisterRoutedEvent(\n        \"Tap\", \n        RoutingStrategy.Bubble, \n        typeof(RoutedEventHandler), \n        typeof(CustomControl));\n```\n\n#### 4. 反射机制\n```csharp\n// WPF依赖属性注册的反射原理\nPropertyInfo prop = typeof(OwnerClass).GetProperty(\"Width\");\nType ownerType = prop.DeclaringType;\nDependencyProperty.Register(\n    prop.Name, \n    prop.PropertyType, \n    ownerType,  // 通过反射获取类型\n    new PropertyMetadata(0));\n```\n\n### 九、WPF特有概念解析\n#### 1. 依赖属性 vs CLR属性\n| 特性 | 依赖属性 | CLR属性 |\n| --- | --- | --- |\n| **存储机制** | 全局属性存储 | 对象实例存储 |\n| **默认值** | 可设置默认值 | 需显式初始化 |\n| **变更通知** | 内置通知机制 | 需手动实现INPC |\n| **值继承** | 支持元素树继承 | 不支持 |\n| **动画支持** | 原生支持 | 需额外实现 |\n\n\n#### 2. 路由事件工作模型\n\n```csharp\nsequenceDiagram\n    participant Child as 子控件\n    participant Parent as 父容器\n    participant Root as 根元素\n    \n    Child->>Parent: 冒泡阶段(Bubbling)\n    Parent->>Root: 继续冒泡\n    Root-->>Parent: 隧道阶段(Tunneling)\n    Parent-->>Child: 继续隧道\n    Note over Child: 直接事件处理(Direct)\n``` \n\n### 十. 学习技巧\n1. **调试技巧**：\n\n```csharp\n// 查看绑定错误\nPresentationTraceSources.DataBindingSource.Switch.Level = SourceLevels.All;\n\n// 输出窗口显示绑定详情\nSystem.Diagnostics.PresentationTraceSources.DataBindingSource.Listeners.Add(\n    new ConsoleTraceListener());\n```\n\n2. **理解视觉树**：\n\n```csharp\n// 遍历视觉树\npublic static IEnumerable<T> FindVisualChildren<T>(DependencyObject depObj) \n    where T : DependencyObject\n{\n    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(depObj); i++)\n    {\n        var child = VisualTreeHelper.GetChild(depObj, i);\n        if (child is T typedChild) yield return typedChild;\n        foreach (var childOfChild in FindVisualChildren<T>(child)) \n            yield return childOfChild;\n    }\n}\n```\n\n3. **MVVM模式实践**：\n\n```csharp\n// 基础ViewModel实现\npublic class ViewModelBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n    \n    protected virtual void OnPropertyChanged([CallerMemberName] string name = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n    }\n}\n```\n\n#### 4、学习路线图\n#### 第一阶段：基础入门（2-3周）  \n  ├─ XAML语法精要  \n  ├─ 常用布局控件（Grid, StackPanel）  \n  ├─ 数据绑定基础（Binding Path）  \n  └─ 样式与资源基础  \n  \n第二阶段：核心技术（4-6周）  \n  ├─ 高级数据绑定（Converter, MultiBinding）  \n  ├─ 命令系统（ICommand, RelayCommand）  \n  ├─ 模板系统（ControlTemplate, DataTemplate）  \n  └─ 用户控件开发  \n  \n第三阶段：高级精通（8-12周）  \n  ├─ 依赖属性系统（自定义DP）  \n  ├─ 路由事件机制（冒泡/隧道）  \n  ├─ 动画与行为（Behaviors）  \n  ├─ 3D图形与多媒体  \n  └─ MVVM框架整合（Prism等）\n> #### **学习箴言**：WPF学习需遵循\"先会用，再懂理\"的实践路径。建议采用：\n> #### **小步快跑**：每学一个概念立即创建微型Demo验证\n> #### **逆向工程**：反编译优秀开源项目（如MaterialDesignInXAML）\n> #### **知识迁移**：将WinForm经验与WPF新特性对比学习\n> #### **工具赋能**：善用LiveXAML、Snoop等开发辅助工具\n\n#### 以下是为嵌入式开发工程师量身定制的WPF学习路径，结合您的Qt开发经验进行针对性优化：\n### 十一、Qt与WPF核心概念映射表\n| Qt概念 | WPF对应概念 | 差异点 | 学习建议 |\n| --- | --- | --- | --- |\n| QWidget | UIElement | WPF更强调组合而非继承 | 重点学习控件模板 |\n| Signals/Slots | 路由事件/绑定/命令 | WPF提供多种交互机制 | 掌握事件路由策略 |\n| QML | XAML | 语法相似但数据绑定更强 | 对比学习声明式语法 |\n| Model/View | MVVM | MVVM是更严格的分离模式 | 深入理解INotifyPropertyChanged |\n| Q_PROPERTY | 依赖属性 | 依赖属性有值继承机制 | 研究属性变更回调 |\n| QLayout | Panel派生类 | WPF布局系统更灵活 | 掌握Grid和DockPanel |\n| QGraphicsView | Visual层 | WPF有更完善的视觉树 | 学习视觉树遍历方法 |\n\n\n### 十二、重点领域深度适配\n#### 1. 硬件交互层实现\n```csharp\n// 串口通信封装（对比Qt的QSerialPort）\npublic class SerialService : IDisposable\n{\n    private SerialPort _port;\n    \n    public SerialService(string portName)\n    {\n        _port = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);\n        _port.DataReceived += OnDataReceived;\n    }\n    \n    private void OnDataReceived(object sender, SerialDataReceivedEventArgs e)\n    {\n        byte[] data = new byte[_port.BytesToRead];\n        _port.Read(data, 0, data.Length);\n        \n        // 通过事件或绑定更新UI\n        DataReceived?.Invoke(this, data);\n    }\n    \n    public event EventHandler<byte[]> DataReceived;\n}\n```\n\n#### 2. 实时数据可视化\n```xml\n<!-- 工业仪表盘实现（对比Qt的QChart） -->\n<Canvas>\n    <Path Data=\"M 100,100 A 50,50 0 1 1 200,100\"\n          Stroke=\"Blue\" StrokeThickness=\"3\"/>\n    \n    <!-- 实时指针 -->\n    <Line X1=\"150\" Y1=\"150\" X2=\"{Binding Angle, Converter={StaticResource AngleConverter}}\"\n          Stroke=\"Red\" StrokeThickness=\"2\"/>\n    \n    <!-- 数据绑定 -->\n    <TextBlock Text=\"{Binding Temperature, StringFormat='{}{0}°C'}\"\n               Canvas.Top=\"200\" Canvas.Left=\"130\"/>\n</Canvas>\n\n```\n\n### 十三、嵌入式场景优化学习模块\n#### 1. 低延迟渲染技术\n```csharp\n// 利用CompositionTarget.Rendering实现60fps渲染\nCompositionTarget.Rendering += (s, e) =>\n{\n    if (_sensorDataAvailable)\n    {\n        waveForm.InvalidateVisual(); // 自定义波形控件重绘\n    }\n};\n\n// 对比Qt的QTimer+update()\n```\n\n#### 2. 硬件资源管理\n| 资源类型 | Qt方案 | WPF方案 | 注意事项 |\n| --- | --- | --- | --- |\n| 串口 | QSerialPort | System.IO.Ports | 需处理UI线程调度 |\n| USB | libusb | HidLibrary | 驱动兼容性测试 |\n| 网络协议 | QTcpSocket | System.Net.Sockets | 异步操作避免UI阻塞 |\n| 传感器数据 | QSensor | 自定义ISensor接口 | 数据滤波处理 |\n\n\n### 十三、避坑指南（相对Qt学习者）\n1. **线程管理差异**：\n\n```csharp\n// 错误方式（直接跨线程更新UI）\nvoid OnDataReceived(byte[] data)\n{\n    txtValue.Text = data.ToString(); // 引发异常\n}\n\n// 正确方式\nvoid OnDataReceived(byte[] data)\n{\n    Dispatcher.Invoke(() => txtValue.Text = data.ToString());\n}\n```\n\n2. **内存管理对比**：\n\n| 特性 | Qt | WPF |\n| --- | --- | --- |\n| 对象生命周期 | 父子对象树 | GC垃圾回收 |\n| 资源释放 | deleteLater() | IDisposable模式 |\n| 事件处理 | 需手动disconnect | 弱事件模式支持 |\n\n\n3. **渲染性能优化**：\n\n```xml\n<!-- 启用硬件加速 -->\n<Window ...\n        AllowsTransparency=\"False\"\n        TextOptions.TextFormattingMode=\"Display\"\n        RenderOptions.BitmapScalingMode=\"NearestNeighbor\">\n```\n\n### 十四、实战项目演进路线\n```plain\n阶段1：设备监控面板（2周）\n  ├─ 串口数据采集\n  ├─ 实时曲线绘制（Canvas）\n  ├─ 基础MVVM实现\n\n阶段2：工业控制台（3周）\n  ├─ Modbus/TCP协议集成\n  ├─ 3D设备模型展示（HelixToolkit）\n  ├─ 动画状态指示器\n\n阶段3：智能网关系统（4周）\n  ├─ 多线程数据采集\n  ├─ WCF远程控制接口\n  ├─ 数据持久化（SQLite）\n  ├─ 响应式布局设计\n```\n\n### 十五、硬件开发专属工具链\n1. **调试工具**：\n    - Snoop：实时检查WPF视觉树\n    - WPF Performance Suite：渲染性能分析\n2. **硬件集成库**：\n    - LibUsbDotNet：USB设备访问\n    - NModbus：工业协议实现\n    - OPC-UA库：工业自动化标准\n3. **3D渲染框架**：\n\n```xml\n<helix:HelixViewport3D>\n    <helix:SunLight/>\n    <helix:MeshGeometryVisual3D MeshGeometry=\"{Binding SensorModel}\"/>\n</helix:HelixViewport3D>\n\n```\n\n\n\n> \n>\n\n\n\n","tags":["嵌入式","C#"],"categories":["嵌入式"]},{"title":"LIN总线OTA升级协议定义","url":"/2025/07/14/LIN总线OTA升级协议定义/","content":"\n## 一、LIN ID枚举定义\n### 1. 基本ID枚举\n```c\ntypedef enum\n{\n    gID_OtapCmd_c = 0x31,\n    gID_OtapGetStatus_c,\n    gID_OtapData_c\n} lin_id_t;\n```\n\n### 2. ID功能说明\n+ **gID_OtapCmd_c (0x31)**：LIN主节点指示从节点开始/结束固件传输的命令ID\n+ **gID_OtapGetStatus_c**：LIN主节点获取从节点实时状态的状态查询ID\n+ **gID_OtapData_c**：LIN主节点向从节点传输实际固件数据的数据传输ID\n\n\n\n## 二、命令与状态枚举定义\n### 1. gID_OtapCmd_c命令枚举\n```c\ntypedef enum\n{\n    LIN_OTA_CMD_NONE = 0x00,  // 无命令\n    LIN_OTA_CMD_START,        // 开始传输命令\n    LIN_OTA_CMD_END,          // 结束传输命令\n    LIN_OTA_CMD_CONTINUE      // 继续传输命令\n} lin_ota_cmd_c;\n```\n\n### 2. gID_OtapGetStatus_c状态枚举\n```c\ntypedef enum\n{\n    LIN_OTA_STATUS_IDLE = 0x00,   // 空闲状态\n    LIN_OTA_STATUS_READY,         // 准备就绪状态\n    LIN_OTA_STATUS_RUNNING,       // 传输进行中状态\n    LIN_OTA_STATUS_FINISH,        // 传输完成状态\n    LIN_OTA_STATUS_ABORT          // 传输中止状态\n} lin_ota_status_t;\n```\n\n\n\n## 三、数据帧格式定义\n### 1. 各ID数据帧结构对比\n| ID类型 | 数据帧长度 | 数据帧详细定义 |\n| --- | --- | --- |\n| gID_OtapCmd_c | 8字节 | 传输状态码 + 扇区号(1B) + 固件版本号(2B) + 保留字段(4B) |\n| gID_OtapGetStatus_c | 8字节 | 传输状态码 + 扇区号(1B) + 扇区CRC校验码(2B) + 保留字段(4B) |\n| gID_OtapData_c | 8字节 | 全部为固件数据(实际传输时可通过多帧拼接实现更大数据量传输) |\n\n\n### 2. 字段详细说明\n+ **传输状态码**：使用`lin_ota_cmd_c`枚举值(仅gID_OtapCmd_c)或`lin_ota_status_t`枚举值(仅gID_OtapGetStatus_c)\n+ **扇区号**：指定数据存储的目标扇区(0-255)\n+ **固件版本号**：2字节大端序版本号(如0x0100表示1.00版本)\n+ **扇区CRC校验码**：2字节大端序CRC校验值，用于验证扇区数据完整性\n+ **保留字段**：保留未来扩展使用，当前应置为0\n\n\n\n## 四、OTA升级流程详解\n### 1. 初始化与开始传输阶段\n1. LIN主节点通过`gID_OtapCmd_c`发送开始传输命令：\n    - 状态码：`LIN_OTA_CMD_START`\n    - 扇区号：0\n    - 固件版本号：0x0100(大端序)\n    - 保留字段：0x00000000\n2. LIN从节点收到命令后进入等待状态，准备接收数据\n3. LIN主节点通过`gID_OtapGetStatus_c`查询状态：\n    - 期望从节点返回：`LIN_OTA_STATUS_READY`状态码\n\n\n\n### 2. 数据传输阶段(以扇区1为例)\n4. LIN主节点通过`gID_OtapData_c`发送1K字节固件数据\n5. LIN从节点存储数据并计算扇区CRC校验码\n6. LIN主节点再次查询状态：\n    - 期望从节点返回：`LIN_OTA_STATUS_FINISH`状态码\n    - 校验码：扇区1的CRC校验码(大端序)\n7. LIN主节点发送继续传输命令到扇区1：\n    - 状态码：`LIN_OTA_CMD_CONTINUE`\n    - 扇区号：1\n    - 固件版本号：0x0100\n    - 保留字段：0x00000000\n8. 重复步骤4-6直到当前扇区数据传输完成\n9. 主节点查询状态应收到：`LIN_OTA_STATUS_FINISH`状态码\n\n\n\n### 3. 传输结束阶段\n10. 所有扇区数据传输完成后，主节点发送结束命令：\n    - 状态码：`LIN_OTA_CMD_END`\n    - 扇区号：0\n    - 固件版本号：0x0100\n    - 保留字段：0x00000000\n11. LIN从节点收到结束命令后完成固件升级流程\n\n## 五、图表说明\n\n```mermaid\nsequenceDiagram\n    participant UI as 用户界面\n    participant Updater as OTA升级器\n    participant LIN as LIN设备\n    \n    UI->>Updater: startUpgrade(固件数据, 版本号)\n    activate Updater\n    Updater->>LIN: 打开设备\n    Updater->>LIN: 发送开始命令\n    LIN-->>Updater: 准备就绪状态\n    \n    loop 每个扇区\n        Updater->>LIN: 发送继续命令(扇区号)\n        \n        loop 128次\n            Updater->>LIN: 发送数据帧(8字节)\n        end\n        \n        Updater->>LIN: 查询扇区状态\n        LIN-->>Updater: 返回完成状态\n    end\n    \n    Updater->>LIN: 发送结束命令\n    deactivate Updater\n    Updater->>UI: 发送完成信号\n    UI->>LIN: 关闭设备\n```\n\n### OTA 固件升级流程说明：\n1. **初始化升级**  \n```mermaid\nsequenceDiagram\n    UI->>Updater: startUpgrade(固件数据, 版本号)\n```\n    - 用户界面调用 OTA 升级器，传入固件数据和版本号\n2. **LIN 设备准备**  \n```mermaid\nsequenceDiagram\n    Updater->>LIN: 打开设备\n    Updater->>LIN: 发送开始命令\n    LIN-->>Updater: 准备就绪状态\n```\n    - 打开 LIN 设备连接  \n    - 发送升级开始命令\n3. **扇区数据写入**  \n4. \n```mermaid\nsequenceDiagram\n    loop 每个扇区\n        Updater->>LIN: 发送继续命令(扇区号)\n        loop 128次\n            Updater->>LIN: 发送数据帧(8字节)\n        end\n        Updater->>LIN: 查询扇区状态\n        LIN-->>Updater: 返回完成状态\n    end\n```\n    - 循环处理每个扇区（共 128 帧/扇区）  \n    - 每帧发送 8 字节数据  \n    - 查询并确认扇区写入状态\n1. **升级完成**  \n```mermaid\nsequenceDiagram\n    Updater->>LIN: 发送结束命令\n    Updater->>UI: 发送完成信号\n    UI->>LIN: 关闭设备\n```\n    - 发送升级结束命令  \n    - 通知用户界面升级完成  \n    - 关闭 LIN 设备连接\n\n## 六、协议关键点说明\n1. **数据分片机制**：由于LIN帧数据域仅8字节，1K数据需通过128帧`gID_OtapData_c`传输\n2. **CRC校验机制**：从节点需对每个扇区数据计算CRC并通过`gID_OtapGetStatus_c`返回\n3. **版本一致性**：所有命令帧需包含相同的固件版本号以确保版本一致性\n4. **错误处理**：当收到`LIN_OTA_STATUS_ABORT`状态码时，主节点应重新发起传输流程\n\n### 关键参数说明：\n| 步骤 | 数据量 | 说明 |\n| --- | --- | --- |\n| 单帧数据 | 8 字节 | LIN 总线标准数据帧大小 |\n| 单扇区传输 | 128 帧 | 共 1KB (128×8=1024 字节) |\n| 状态确认 | 每扇区结束后 | 确保数据完整写入 |\n\n\n> **注意事项**：  \n>\n> 1. 每个扇区写入后必须等待状态确认  \n> 2. LIN 设备需实现\"准备就绪\"和\"完成状态\"协议  \n> 3. 异常处理需包含：超时重传、校验失败回滚等机制\n>\n\n{% externalLinkCard \"\" \"https://www.f123.club/\" \"https://www.f123.club/wp-content/uploads/2021/08/UN77_C6SA5GU39GBAWJ.png\" %}\n\n{% heatMapCard %}\n\n{% tagRoulette \"记忆衰退,表达欲丧失,更加怠惰,无感,好想睡觉\" \"🕹️\" %}","tags":["嵌入式","C语言"],"categories":["嵌入式"]},{"title":"WPF的XAML解析","url":"/2025/07/14/WPF解析教程/","content":"XAML（eXtensible Application Markup Language）是WPF的核心技术，它是一种基于XML的声明式语言，用于定义用户界面和应用程序结构。下面我将全面讲解XAML的各种格式和设置。\n\n## 一、XAML基础结构\n### 1. 基本文档结构\n```xml\n<Window x:Class=\"MyApp.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        Title=\"Main Window\" Height=\"450\" Width=\"800\">\n    <!-- 只能有一个根子元素 -->\n    <Grid>\n        <!-- UI元素放在这里 -->\n    </Grid>\n</Window>\n\n```\n\n### 2. 核心组成部分\n+ **根元素**：Window、Page、UserControl等\n+ **命名空间声明**：\n    - `xmlns`：WPF核心命名空间\n    - `xmlns:x`：XAML语言特性命名空间\n+ **x:Class属性**：关联后台代码文件\n+ **属性设置**：直接在元素上设置属性值\n\n## 二、属性设置方式详解\n### 1. 直接属性设置\n```xml\n<Button Content=\"Click Me\" \n        Background=\"#FF4C5FF5\" \n        Foreground=\"White\"\n        Margin=\"10\" \n        Padding=\"15,5\"\n        FontSize=\"14\"/>\n```\n\n### 2. 属性元素语法\n当属性值复杂时使用：\n\n```xml\n<Button>\n    <Button.Background>\n        <LinearGradientBrush>\n            <GradientStop Color=\"#FF4C5FF5\" Offset=\"0\"/>\n            <GradientStop Color=\"#3A5BFF\" Offset=\"1\"/>\n        </LinearGradientBrush>\n    </Button.Background>\n    <Button.Content>\n        <StackPanel Orientation=\"Horizontal\">\n            <Image Source=\"icon.png\" Width=\"16\" Height=\"16\"/>\n            <TextBlock Text=\"Click Me\" Margin=\"5,0,0,0\"/>\n        </StackPanel>\n    </Button.Content>\n</Button>\n\n```\n\n### 3. 内容属性简写\n当属性被标记为内容属性时：\n\n```xml\n<!-- 标准写法 -->\n<Button>\n    <Button.Content>\n        Click Me\n    </Button.Content>\n</Button>\n<!-- 简写写法 -->\n<Button>Click Me</Button>\n\n```\n\n### 4. 标记扩展\nXAML提供多种标记扩展：\n\n```xml\n<!-- 数据绑定 -->\n<TextBlock Text=\"{Binding UserName, Mode=OneWay}\"/>\n\n<!-- 静态资源 -->\n<Button Background=\"{StaticResource PrimaryBrush}\"/>\n\n<!-- 动态资源 -->\n<Border BorderBrush=\"{DynamicResource BorderColor}\"/>\n\n<!-- 相对绑定 -->\n<TextBlock Text=\"{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Title}\"/>\n\n<!-- 模板绑定 -->\n<ControlTemplate TargetType=\"Button\">\n    <Border Background=\"{TemplateBinding Background}\"/>\n</ControlTemplate>\n\n```\n\n## 三、布局系统详解\n### 1. 常用布局容器\n```xml\n<!-- Grid布局 -->\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"*\"/>\n        <RowDefinition Height=\"2*\"/>\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\"/>\n        <ColumnDefinition Width=\"*\"/>\n    </Grid.ColumnDefinitions>\n    \n    <TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Name:\"/>\n    <TextBox Grid.Row=\"0\" Grid.Column=\"1\" Text=\"{Binding Name}\"/>\n    \n    <ListBox Grid.Row=\"1\" Grid.ColumnSpan=\"2\" ItemsSource=\"{Binding Items}\"/>\n</Grid>\n<!-- StackPanel布局 -->\n<StackPanel Orientation=\"Vertical\">\n    <Label Content=\"Username\"/>\n    <TextBox/>\n    <Label Content=\"Password\"/>\n    <PasswordBox/>\n    <Button Content=\"Login\" Margin=\"0,10\"/>\n</StackPanel>\n<!-- DockPanel布局 -->\n<DockPanel LastChildFill=\"True\">\n    <Menu DockPanel.Dock=\"Top\">...</Menu>\n    <StatusBar DockPanel.Dock=\"Bottom\">...</StatusBar>\n    <ToolBar DockPanel.Dock=\"Left\">...</ToolBar>\n    <ContentControl>主内容区</ContentControl>\n</DockPanel>\n\n```\n\n### 2. 布局属性\n| 属性 | 描述 | 示例 |\n| --- | --- | --- |\n| `Margin` | 外边距 | `Margin=\"10\"`、`Margin=\"5,10,5,10\"` |\n| `Padding` | 内边距 | `Padding=\"5\"` |\n| `HorizontalAlignment` | 水平对齐 | `Left`、`Center`、`Right`、`Stretch` |\n| `VerticalAlignment` | 垂直对齐 | `Top`、`Center`、`Bottom`、`Stretch` |\n| `Width/Height` | 显式尺寸 | `Width=\"100\"`、`Height=\"Auto\"` |\n\n\n## 四、资源系统\n### 1. 资源定义与引用\n```xml\n<Window.Resources>\n    <!-- 简单资源 -->\n    <SolidColorBrush x:Key=\"PrimaryBrush\" Color=\"#FF4C5FF5\"/>\n    \n    <!-- 样式资源 -->\n    <Style x:Key=\"RoundButtonStyle\" TargetType=\"Button\">\n        <Setter Property=\"Background\" Value=\"{StaticResource PrimaryBrush}\"/>\n        <Setter Property=\"Foreground\" Value=\"White\"/>\n        <Setter Property=\"Padding\" Value=\"12,6\"/>\n        <Setter Property=\"Template\">\n            <Setter.Value>\n                <ControlTemplate TargetType=\"Button\">\n                    <Border CornerRadius=\"8\" Background=\"{TemplateBinding Background}\">\n                        <ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\n                    </Border>\n                </ControlTemplate>\n            </Setter.Value>\n        </Setter>\n    </Style>\n    \n    <!-- 数据模板 -->\n    <DataTemplate x:Key=\"PersonTemplate\" DataType=\"local:Person\">\n        <StackPanel Orientation=\"Horizontal\">\n            <TextBlock Text=\"{Binding Name}\" FontWeight=\"Bold\"/>\n            <TextBlock Text=\" - \"/>\n            <TextBlock Text=\"{Binding Age}\"/>\n        </StackPanel>\n    </DataTemplate>\n</Window.Resources>\n<!-- 资源引用 -->\n<Button Style=\"{StaticResource RoundButtonStyle}\" Content=\"Submit\"/>\n```\n\n### 2. 资源作用域\n| 级别 | 定义位置 | 访问范围 |\n| --- | --- | --- |\n| 元素级 | 元素.Resources | 当前元素及子元素 |\n| 窗口级 | Window.Resources | 当前窗口 |\n| 应用级 | App.xaml | 全局可用 |\n| 主题级 | Themes/generic.xaml | 整个应用程序 |\n\n\n## 五、数据绑定\n### 1. 绑定基础\n```xml\n<!-- 简单绑定 -->\n<TextBlock Text=\"{Binding UserName}\"/>\n\n<!-- 带路径的绑定 -->\n<TextBlock Text=\"{Binding User.Address.City}\"/>\n\n<!-- 带转换器的绑定 -->\n<TextBlock Text=\"{Binding BirthDate, StringFormat='yyyy-MM-dd'}\"/>\n<TextBlock Text=\"{Binding Temperature, Converter={StaticResource TemperatureConverter}}\"/>\n\n<!-- 多绑定 -->\n<TextBlock>\n    <TextBlock.Text>\n        <MultiBinding StringFormat=\"{}{0} {1}\">\n            <Binding Path=\"FirstName\"/>\n            <Binding Path=\"LastName\"/>\n        </MultiBinding>\n    </TextBlock.Text>\n</TextBlock>\n\n```\n\n### 2. 绑定模式\n| 模式 | 描述 | 语法 |\n| --- | --- | --- |\n| OneWay | 源→目标 | `{Binding Path, Mode=OneWay}` |\n| TwoWay | 双向绑定 | `{Binding Path, Mode=TwoWay}` |\n| OneTime | 仅初始化 | `{Binding Path, Mode=OneTime}` |\n| OneWayToSource | 目标→源 | `{Binding Path, Mode=OneWayToSource}` |\n\n\n## 六、样式与模板\n### 1. 样式系统\n```xml\n<!-- 隐式样式（自动应用到所有匹配类型） -->\n<Style TargetType=\"TextBlock\">\n    <Setter Property=\"FontSize\" Value=\"14\"/>\n    <Setter Property=\"Margin\" Value=\"0,5\"/>\n</Style>\n<!-- 显式样式 -->\n<Style x:Key=\"HeaderText\" TargetType=\"TextBlock\" BasedOn=\"{StaticResource {x:Type TextBlock}}\">\n    <Setter Property=\"FontSize\" Value=\"18\"/>\n    <Setter Property=\"FontWeight\" Value=\"Bold\"/>\n    <Setter Property=\"Foreground\" Value=\"DarkBlue\"/>\n</Style>\n\n```\n\n### 2. 控件模板\n```xml\n<ControlTemplate x:Key=\"CustomButtonTemplate\" TargetType=\"Button\">\n    <Border x:Name=\"border\" \n            CornerRadius=\"8\"\n            Background=\"{TemplateBinding Background}\"\n            BorderBrush=\"{TemplateBinding BorderBrush}\"\n            BorderThickness=\"1\">\n        <ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\n    </Border>\n    <ControlTemplate.Triggers>\n        <Trigger Property=\"IsMouseOver\" Value=\"True\">\n            <Setter TargetName=\"border\" Property=\"Background\" Value=\"#3A5BFF\"/>\n            <Setter TargetName=\"border\" Property=\"BorderBrush\" Value=\"#B0C4FF\"/>\n        </Trigger>\n    </ControlTemplate.Triggers>\n</ControlTemplate>\n\n```\n\n## 七、动画与视觉效果\n### 1. 基本动画\n```xml\n<Button Content=\"Animate\">\n    <Button.Triggers>\n        <EventTrigger RoutedEvent=\"Button.Click\">\n            <BeginStoryboard>\n                <Storyboard>\n                    <DoubleAnimation\n                        Storyboard.TargetProperty=\"Width\"\n                        From=\"100\" To=\"200\" Duration=\"0:0:0.5\"\n                        AutoReverse=\"True\"/>\n                    <ColorAnimation\n                        Storyboard.TargetProperty=\"Background.Color\"\n                        To=\"LightGreen\" Duration=\"0:0:0.5\"\n                        AutoReverse=\"True\"/>\n                </Storyboard>\n            </BeginStoryboard>\n        </EventTrigger>\n    </Button.Triggers>\n</Button>\n\n```\n\n### 2. 变换效果\n```xml\n<Button Content=\"Transform\">\n    <Button.RenderTransform>\n        <TransformGroup>\n            <RotateTransform Angle=\"0\" x:Name=\"rotate\"/>\n            <ScaleTransform ScaleX=\"1\" ScaleY=\"1\" x:Name=\"scale\"/>\n        </TransformGroup>\n    </Button.RenderTransform>\n    <Button.Triggers>\n        <EventTrigger RoutedEvent=\"Button.MouseEnter\">\n            <BeginStoryboard>\n                <Storyboard>\n                    <DoubleAnimation \n                        Storyboard.TargetName=\"rotate\"\n                        Storyboard.TargetProperty=\"Angle\"\n                        To=\"10\" Duration=\"0:0:0.2\"/>\n                    <DoubleAnimation \n                        Storyboard.TargetName=\"scale\"\n                        Storyboard.TargetProperty=\"ScaleX\"\n                        To=\"1.05\" Duration=\"0:0:0.2\"/>\n                </Storyboard>\n            </BeginStoryboard>\n        </EventTrigger>\n    </Button.Triggers>\n</Button>\n\n```\n\n## 八、高级技巧与最佳实践\n### 1. XAML命名规范\n```xml\n<!-- 使用有意义的名称 -->\n<Button x:Name=\"SubmitButton\" Content=\"Submit\"/>\n<TextBox x:Name=\"UsernameTextBox\"/>\n<ListView x:Name=\"CustomerListView\"/>\n```\n\n### 2. 资源组织策略\n```xml\n<!-- 资源字典 -->\n<ResourceDictionary>\n    <ResourceDictionary.MergedDictionaries>\n        <ResourceDictionary Source=\"Styles/Brushes.xaml\"/>\n        <ResourceDictionary Source=\"Styles/Buttons.xaml\"/>\n        <ResourceDictionary Source=\"Styles/TextStyles.xaml\"/>\n    </ResourceDictionary.MergedDictionaries>\n    \n    <!-- 本地资源 -->\n</ResourceDictionary>\n\n```\n\n### 3. 设计时数据\n```xml\nxmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\nd:DataContext=\"{d:DesignInstance Type=local:DesignViewModel}\"\n\n<!-- 使用示例 -->\n<ListBox ItemsSource=\"{Binding Customers}\" \n         d:ItemsSource=\"{d:DesignData Source=SampleData/Customers.xaml}\"/>\n```\n\n### 4. 性能优化技巧\n```xml\n<!-- 虚拟化长列表 -->\n<ListView VirtualizingStackPanel.IsVirtualizing=\"True\"\n          VirtualizingStackPanel.VirtualizationMode=\"Recycling\">\n    <!-- ... -->\n</ListView>\n<!-- 冻结静态资源 -->\n<SolidColorBrush x:Key=\"StaticBrush\" Color=\"Blue\" PresentationOptions:Freeze=\"True\"/>\n\n<!-- 延迟滚动 -->\n<ScrollViewer IsDeferredScrollingEnabled=\"True\">\n    <ItemsControl ... />\n</ScrollViewer>\n\n```\n\n## 九、调试与问题排查\n### 1. 绑定调试\n```xml\n<!-- 启用绑定跟踪 -->\n<TextBlock Text=\"{Binding UserName, \n    diag:PresentationTraceSources.TraceLevel=High}\"/>\n```\n\n### 2. 可视化树检查\n```csharp\n// 在代码中遍历可视化树\npublic static T FindVisualChild<T>(DependencyObject obj) where T : DependencyObject\n{\n    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)\n    {\n        var child = VisualTreeHelper.GetChild(obj, i);\n        if (child is T result) \n            return result;\n        \n        var childResult = FindVisualChild<T>(child);\n        if (childResult != null) \n            return childResult;\n    }\n    return null;\n}\n```\n\n### 3. 常见错误解决\n1. **\"属性'Child'只能设置一次\"**：\n    - 确保容器元素只有一个直接子元素\n    - 使用布局容器（如Grid、StackPanel）包裹多个元素\n2. **\"InitializeComponent未找到\"**：\n    - 检查x:Class命名空间与代码文件一致\n    - 清理并重新生成项目\n    - 确保XAML文件生成操作为\"Page\"\n\n## 总结\nXAML是WPF的核心，掌握其各种格式和设置技巧对于构建现代桌面应用至关重要。关键要点包括：\n\n1. **声明式UI**：使用XAML清晰分离界面与逻辑\n2. **强大布局**：灵活运用Grid、StackPanel等布局容器\n3. **资源复用**：通过资源字典实现样式和模板共享\n4. **数据驱动**：利用数据绑定实现MVVM模式\n5. **视觉定制**：通过控件模板完全自定义控件外观\n6. **动画效果**：使用Storyboard创建流畅用户体验\n\n```mermaid\ngraph TD\n    A[XAML基础] --> B[布局系统]\n    A --> C[资源系统]\n    A --> D[数据绑定]\n    A --> E[样式模板]\n    B --> F[Grid/StackPanel]\n    C --> G[静态/动态资源]\n    D --> H[绑定模式]\n    E --> I[控件模板]\n    F --> J[响应式设计]\n    G --> K[主题切换]\n    H --> L[MVVM模式]\n    I --> M[完全自定义控件]\n    J --> N[自适应UI]\n    K --> O[动态换肤]\n    L --> P[关注点分离]\n    M --> Q[品牌化UI]\n```\n\n\n","tags":["嵌入式","C#"],"categories":["嵌入式"]},{"title":"汽车电子固件升级（OTA）实现详解","url":"/2025/07/14/汽车电子固件升级（OTA）实现详解/","content":"## 引言\n随着汽车电子技术的飞速发展，**固件空中升级(OTA)** 技术已成为现代汽车电子系统中不可或缺的功能。在车身控制领域，**LIN总线**作为低成本、低复杂度的通信协议被广泛应用。本文将深入探讨基于LIN总线的OTA升级实现方案，从协议设计到代码实现，全面解析这一关键技术。\n\n## 第一部分：LIN总线基础\n### LIN总线概述\nLIN(Local Interconnect Network)是一种低成本串行通信协议，主要特点包括：\n\n+ **单主多从架构**：一个主节点控制多个从节点\n+ **低传输速率**：最高20kbps（典型应用19.2kbps）\n+ **单线传输**：简化布线，降低成本\n+ **时间触发通信**：主节点控制通信时序\n\n### LIN帧结构\n| 字段 | 长度 | 说明 |\n| --- | --- | --- |\n| 间隔场 | 13位以上低电平 | 帧起始标识 |\n| 同步场 | 1字节(0x55) | 时钟同步 |\n| 标识符 | 1字节 | 6位ID+2位校验 |\n| 数据场 | 0-8字节 | 传输数据 |\n| 校验和 | 1字节 | 数据完整性校验 |\n\n\n## 第二部分：OTA协议设计\n### ID枚举定义\n```c\ntypedef enum\n{\n    gID_OtapCmd_c = 0x31,   // 命令ID\n    gID_OtapGetStatus_c,    // 状态查询ID\n    gID_OtapData_c          // 数据传输ID\n} lin_id_t;\n```\n\n### 命令与状态枚举\n**命令枚举：**\n\n```c\ntypedef enum\n{\n    LIN_OTA_CMD_NONE = 0x00,  // 无命令\n    LIN_OTA_CMD_START,        // 开始传输\n    LIN_OTA_CMD_END,          // 结束传输\n    LIN_OTA_CMD_CONTINUE      // 继续传输\n} lin_ota_cmd_c;\n```\n\n**状态枚举：**\n\n```c\ntypedef enum\n{\n    LIN_OTA_STATUS_IDLE = 0x00,   // 空闲\n    LIN_OTA_STATUS_READY,         // 准备就绪\n    LIN_OTA_STATUS_RUNNING,       // 传输中\n    LIN_OTA_STATUS_FINISH,        // 完成\n    LIN_OTA_STATUS_ABORT          // 中止\n} lin_ota_status_t;\n```\n\n### 数据帧格式定义\n| ID类型 | 长度 | 数据帧结构 |\n| --- | --- | --- |\n| gID_OtapCmd_c | 8字节 | [状态码(1B)] [扇区号(1B)] [版本号(2B)] [保留(4B)] |\n| gID_OtapGetStatus_c | 8字节 | [状态码(1B)] [扇区号(1B)] [CRC(2B)] [保留(4B)] |\n| gID_OtapData_c | 8字节 | [固件数据(8B)] |\n\n\n### CRC校验机制\n```c\nuint16_t CalculateCrc16(const uint8_t *data, uint16_t len) {\n    uint16_t crc = 0xFFFF;\n    for (uint16_t i = 0; i < len; i++) {\n        crc ^= (uint16_t)data[i] << 8;\n        for (uint8_t j = 0; j < 8; j++) {\n            if (crc & 0x8000) {\n                crc = (crc << 1) ^ 0x1021;\n            } else {\n                crc <<= 1;\n            }\n        }\n    }\n    return crc;\n}\n```\n\n## 第三部分：OTA升级流程\n### 整体流程图\n```mermaid\ngraph TD\n    A[开始] --> B[发送开始命令]\n    B --> C{设备就绪?}\n    C -->|是| D[发送继续命令]\n    C -->|否| B\n    D --> E[发送扇区数据]\n    E --> F[查询状态]\n    F --> G{完成且CRC正确?}\n    G -->|是| H[还有扇区?]\n    G -->|否| E\n    H -->|是| D\n    H -->|否| I[发送结束命令]\n    I --> J[升级完成]\n```\n\n### 1. 初始化与开始传输\n```c\n// 主节点发送开始命令\nuint8_t start_cmd[8] = {\n    LIN_OTA_CMD_START, // 命令\n    0,                 // 扇区号0\n    0x01, 0x00,        // 固件版本1.0 (大端序)\n    0,0,0,0            // 保留字段\n};\nLIN_SendFrame(gID_OtapCmd_c, start_cmd);\n```\n\n### 2. 数据传输阶段（扇区处理）\n```c\n// 传输单个扇区数据\nfor (int frame = 0; frame < 128; frame++) {\n    uint8_t data_frame[8];\n    // 填充8字节数据\n    memcpy(data_frame, &firmware[frame*8], 8);\n    LIN_SendFrame(gID_OtapData_c, data_frame);\n}\n\n// 查询扇区状态\nuint8_t status_frame[8];\nLIN_QueryStatus(gID_OtapGetStatus_c, status_frame);\n\n// 验证CRC\nuint16_t remote_crc = (status_frame[2] << 8) | status_frame[3];\nif (remote_crc != local_crc) {\n    // CRC校验失败，重传\n}\n```\n\n### 3. 传输结束阶段\n```c\nuint8_t end_cmd[8] = {\n    LIN_OTA_CMD_END, // 结束命令\n    0,               // 扇区号0\n    0x01, 0x00,      // 固件版本1.0\n    0,0,0,0          // 保留字段\n};\nLIN_SendFrame(gID_OtapCmd_c, end_cmd);\n```\n\n## 第四部分：下位机实现\n### 状态机设计\n```c\ntypedef enum {\n    OTA_IDLE = 0,       // 空闲状态\n    OTA_READY,          // 准备就绪\n    OTA_RECEIVING,       // 接收数据中\n    OTA_VERIFYING,       // 校验中\n    OTA_COMPLETE,        // 完成\n    OTA_ERROR            // 错误\n} OtaState;\n```\n\n### 数据结构\n```c\ntypedef struct {\n    OtaState state;            // 当前状态\n    uint8_t current_sector;    // 当前扇区\n    uint16_t firmware_version; // 固件版本\n    uint16_t expected_crc;     // 期望CRC\n    uint16_t calculated_crc;   // 计算CRC\n    uint32_t bytes_received;   // 已接收字节数\n    uint8_t sector_buffer[1024]; // 扇区缓冲区(1KB)\n} OtaUpdater;\n```\n\n### 命令处理\n```c\nvoid OTA_HandleCommand(uint8_t* data) {\n    uint8_t command = data[0];\n    uint8_t sector = data[1];\n    uint16_t version = (data[2] << 8) | data[3];\n    \n    switch(command) {\n        case LIN_OTA_CMD_START:\n            // 初始化OTA状态\n            ota_updater.state = OTA_READY;\n            ota_updater.current_sector = 0;\n            ota_updater.firmware_version = version;\n            ota_updater.bytes_received = 0;\n            memset(ota_updater.sector_buffer, 0xFF, \n                   sizeof(ota_updater.sector_buffer));\n            break;\n            \n        case LIN_OTA_CMD_CONTINUE:\n            // 准备接收新扇区数据\n            if (ota_updater.state == OTA_VERIFYING || \n                ota_updater.state == OTA_READY) {\n                ota_updater.state = OTA_RECEIVING;\n                ota_updater.current_sector = sector;\n                ota_updater.bytes_received = 0;\n                memset(ota_updater.sector_buffer, 0xFF, \n                       sizeof(ota_updater.sector_buffer));\n            }\n            break;\n            \n        case LIN_OTA_CMD_END:\n            // 结束传输\n            if (ota_updater.state == OTA_VERIFYING || \n                ota_updater.state == OTA_COMPLETE) {\n                OTA_WriteSectorToFlash(); // 写入Flash\n                ota_updater.state = OTA_COMPLETE;\n                // 执行固件跳转\n            }\n            break;\n    }\n}\n```\n\n## 第五部分：上位机实现\n### 线程架构\n```mermaid\nclassDiagram\n    class LinOtaUpdater {\n        -QThread* m_workerThread\n        -OtaWorker* m_worker\n        +startUpgrade()\n        +cancelUpgrade()\n    }\n    \n    class OtaWorker {\n        -int m_devHandle\n        -quint8 m_channel\n        -bool m_cancelRequested\n        +startUpgrade()\n        +cancelUpgrade()\n    }\n    \n    LinOtaUpdater --> OtaWorker : 包含\n```\n\n### 核心升级流程\n```cpp\nvoid OtaWorker::startUpgrade(const QByteArray &firmwareData, \n                             quint16 firmwareVersion) \n{\n    const int SECTOR_SIZE = 1024;\n    const int totalSectors = (firmwareData.size() + SECTOR_SIZE - 1) / SECTOR_SIZE;\n\n    // 1. 发送开始命令\n    if (!sendStartCommand(firmwareVersion)) {\n        emit finished(false, \"开始命令发送失败\");\n        return;\n    }\n\n    // 2. 等待设备就绪\n    int retry = 0;\n    while (retry++ < 20) {\n        if (queryStatus(0) == LIN_OTA_STATUS_READY) break;\n        QThread::msleep(100);\n    }\n    if (retry >= 20) {\n        emit finished(false, \"设备未就绪\");\n        return;\n    }\n\n    // 3. 分扇区传输数据\n    for (int sector = 0; sector < totalSectors; ++sector) {\n        if (m_cancelRequested) return;\n        \n        if (sector > 0 && !sendContinueCommand(sector, firmwareVersion)) {\n            emit finished(false, QString(\"扇区%1继续命令失败\").arg(sector));\n            return;\n        }\n        \n        QByteArray sectorData = firmwareData.mid(sector * SECTOR_SIZE, SECTOR_SIZE);\n        if (sectorData.size() < SECTOR_SIZE) {\n            sectorData.append(QByteArray(SECTOR_SIZE - sectorData.size(), 0xFF));\n        }\n        \n        if (!transferSectorData(sector, sectorData)) {\n            emit finished(false, QString(\"扇区%1传输失败\").arg(sector));\n            return;\n        }\n        \n        emit progressChanged(sector * 100 / totalSectors);\n    }\n\n    // 4. 发送结束命令\n    if (sendEndCommand(firmwareVersion)) {\n        emit finished(true, \"升级成功完成\");\n    } else {\n        emit finished(false, \"结束命令发送失败\");\n    }\n}\n```\n\n### 扇区传输实现\n```cpp\nbool OtaWorker::transferSectorData(int sectorIndex, \n                                   const QByteArray &sectorData) \n{\n    // 发送128帧数据\n    for (int i = 0; i < 128; ++i) {\n        if (m_cancelRequested) return false;\n        \n        QByteArray frame = sectorData.mid(i * 8, 8);\n        if (!sendDataFrame(frame)) {\n            return false;\n        }\n    }\n\n    // 计算本地CRC\n    quint16 localCrc = calculateCrc16(sectorData);\n    \n    // 验证扇区状态\n    int retry = 0;\n    while (retry++ < 10) {\n        if (m_cancelRequested) return false;\n        \n        quint16 remoteCrc = 0;\n        LinOtaStatus status = queryStatus(sectorIndex, &remoteCrc);\n        \n        if (status == LIN_OTA_STATUS_FINISH) {\n            if (localCrc == remoteCrc) {\n                return true; // 校验成功\n            } else {\n                emit statusMessage(QString(\"CRC校验失败: 本地=0x%1, 远程=0x%2\")\n                                  .arg(localCrc, 4, 16, QChar('0'))\n                                  .arg(remoteCrc, 4, 16, QChar('0')));\n                return false;\n            }\n        }\n        QThread::msleep(100);\n    }\n    return false; // 超时\n}\n```\n\n## 第六部分：关键技术点\n### 1. 数据分片机制\n| 参数 | 值 | 说明 |\n| --- | --- | --- |\n| 单帧数据 | 8字节 | LIN帧最大数据长度 |\n| 单扇区 | 1KB | 1024字节 |\n| 扇区帧数 | 128帧 | 1024/8=128 |\n| 典型固件 | 64KB | 64个扇区 |\n\n\n### 2. 错误处理机制\n**关键错误处理策略：**\n\n1. **超时重传**：\n\n```cpp\nint retry = 0;\nwhile (retry++ < MAX_RETRY) {\n    // 尝试操作\n    if (success) break;\n    QThread::msleep(RETRY_DELAY);\n}\n```\n\n2. **CRC校验失败处理**：\n\n```cpp\nif (localCrc != remoteCrc) {\n    // 记录错误\n    // 触发重传流程\n}\n```\n\n3. **状态异常处理**：\n\n```c\nif (ota_updater.state == OTA_ERROR) {\n    // 重置状态机\n    // 通知主节点\n}\n```\n\n### 3. 性能优化策略（仅介绍）\n1. **并行处理**：多个扇区预取数据\n2. **压缩传输**：固件压缩减少传输量\n3. **差分升级**：仅传输差异部分\n4. **流控制**：动态调整传输速率\n\n## 第七部分：安全设计\n### 固件验证机制\n```c\nbool VerifyFirmwareIntegrity() {\n    // 1. 检查固件头\n    if (firmware_header.magic != FIRMWARE_MAGIC) \n        return false;\n    \n    // 2. 验证签名\n    if (!VerifyDigitalSignature(firmware_header.signature))\n        return false;\n    \n    // 3. 校验整体CRC\n    uint16_t total_crc = CalculateCrc16(firmware_data, firmware_size);\n    if (total_crc != firmware_header.crc)\n        return false;\n    \n    return true;\n}\n```\n\n### 安全启动流程\n```mermaid\nsequenceDiagram\n    设备->>Bootloader: 上电启动\n    Bootloader->>Flash: 读取固件头\n    Bootloader->>Crypto: 验证签名\n    alt 验证成功\n        Bootloader->>Application: 跳转到应用\n    else 验证失败\n        Bootloader->>Recovery: 进入恢复模式\n        Recovery->>LIN: 请求固件更新\n    end\n```\n\n## 第八部分：实际应用挑战与解决方案\n### 典型挑战及应对\n| 挑战 | 解决方案 | 实现要点 |\n| --- | --- | --- |\n| 带宽限制 | 增量更新 | 仅传输差异部分 |\n| 升级中断 | 断点续传 | 记录最后成功扇区 |\n| 电源不稳 | 双Bank设计 | BankA/B交替升级 |\n| 内存有限 | 流式处理 | 分块处理不缓存完整固件 |\n| 版本兼容 | 元数据校验 | 校验硬件ID和版本号 |\n\n\n### 双Bank设计实现\n```c\n// Flash布局\n#define BANK_A_START  0x08000000\n#define BANK_A_END    0x0801FFFF\n#define BANK_B_START  0x08020000\n#define BANK_B_END    0x0803FFFF\n\n// 升级流程\nvoid PerformOTA() {\n    uint32_t target_bank = (current_bank == BANK_A) ? BANK_B : BANK_A;\n    \n    // 擦除目标Bank\n    FLASH_EraseBank(target_bank);\n    \n    // 写入新固件\n    for (int i = 0; i < sector_count; i++) {\n        WriteSector(target_bank + i*1024, sector_data[i]);\n    }\n    \n    // 验证固件\n    if (VerifyFirmware(target_bank)) {\n        // 更新启动标志\n        SetBootBank(target_bank);\n    }\n}\n```\n\n## 第九部分：测试与验证\n### 测试用例设计\n| 测试项 | 测试方法 | 预期结果 |\n| --- | --- | --- |\n| 正常升级 | 完整传输固件 | 升级成功，设备运行新固件 |\n| 断电恢复 | 随机断电后重启 | 恢复升级流程，无损坏 |\n| 带宽测试 | 模拟不同总线负载 | 升级时间在可接受范围 |\n| 错误注入 | 模拟数据错误 | 触发重传机制，最终成功 |\n| 边界测试 | 传输最大尺寸固件 | 完整处理无溢出 |\n\n\n### 性能测试数据\n| 固件大小 | 理论时间 | 实测时间 | 传输效率 |\n| --- | --- | --- | --- |\n| 32KB | 13.6s |  | 89% |\n| 64KB | 27.3s |  | 88% |\n| 128KB | 54.6s |  | 87% |\n\n\n_测试条件：LIN波特率19.2kbps，含协议开销_\n\n## 结论\n基于LIN总线的OTA升级方案在汽车电子系统中具有重要价值。本文详细介绍了从协议设计到代码实现的全过程，重点解决了以下关键问题：\n\n1. **协议设计**：设计了精简高效的LIN OTA协议，包括命令集、状态机和数据格式\n2. **分片传输**：通过128帧/扇区的机制克服了LIN帧长度限制\n3. **完整性保障**：实现CRC校验和双Bank存储确保升级可靠性\n4. **错误恢复**：完善的超时重传和状态机设计应对各种异常场景\n5. **性能优化**：多线程架构和流式处理提高升级效率\n\n随着汽车电子架构的演进，LIN OTA技术将在车身控制领域持续发挥重要作用。未来可探索与CAN FD、以太网等高速总线的协同升级方案，以满足日益增长的固件更新需求。\n\n> **技术交流**：欢迎访问作者博客 [冯笑一的小窝](https://www.f123.club) 获取更多技术文章和源码示例\n>\n\n## 附录：关键代码片段\n### PID计算函数\n```cpp\nquint8 OtaWorker::calculatePid(quint8 id) {\n    id &= 0x3F; // 确保6位ID\n    quint8 p0 = ((id >> 0) & 1) ^ ((id >> 1) & 1) ^ \n                ((id >> 2) & 1) ^ ((id >> 4) & 1);\n    quint8 p1 = ~(((id >> 1) & 1) ^ ((id >> 3) & 1) ^ \n                 ((id >> 4) & 1) ^ ((id >> 5) & 1)) & 1;\n    return id | (p0 << 6) | (p1 << 7);\n}\n```\n\n### 状态响应处理\n```c\nvoid OTA_SendStatusResponse(void) {\n    uint8_t response[8] = {0};\n    response[0] = (uint8_t)ota_updater.state; // 状态码\n    response[1] = ota_updater.current_sector; // 扇区号\n    \n    // 计算CRC\n    if (ota_updater.state == OTA_VERIFYING) {\n        response[2] = (ota_updater.calculated_crc >> 8) & 0xFF;\n        response[3] = ota_updater.calculated_crc & 0xFF;\n    }\n    \n    // 发送响应\n    LIN_slaveSend(response, sizeof(response));\n}\n```\n\n### 上位机实现\n```cpp\n// 在主窗口中使用\nvoid MainWindow::startOtaUpgrade() {\n    // 初始化参数\n    int devHandle = DevHandle[0];// 获取设备句柄\n    if (devHandle == 0) {\n        qWarning() << \"Failed to open LIN device\";\n        return;\n    }\n\n    quint8 channel = ui->comboBox->currentIndex();   // LIN通道号 (根据实际情况设置)\n\n    // 加载固件文件\n    QFile firmwareFile(\"firmware.bin\");\n    if (!firmwareFile.open(QIODevice::ReadOnly)) {\n        qWarning() << \"Failed to open firmware file\";\n        return;\n    }\n    QByteArray firmwareData = firmwareFile.readAll();\n    firmwareFile.close();\n\n    quint16 version = 0x0100; // 固件版本号\n\n    // 创建升级器\n    m_otaUpdater = new LinOtaUpdater(devHandle, channel, this);\n\n    connect(m_otaUpdater, &LinOtaUpdater::progressChanged,\n            ui->progressBar, &QProgressBar::setValue);\n    connect(m_otaUpdater, &LinOtaUpdater::statusMessage,\n            this, [this](QString msg) {\n                 ui->Message->showMessage(msg, MessageConsole::Success);\n            });\n    connect(m_otaUpdater, &LinOtaUpdater::finished,\n            this, &MainWindow::handleOtaResult);\n    connect(m_otaUpdater, &LinOtaUpdater::errorOccurred,\n            this, [this](QString error) {\n                QMessageBox::critical(this, \"OTA Error\", error);\n            });\n\n    //开始升级\n    m_otaUpdater->startUpgrade(firmwareData, version);\n}\n\nvoid MainWindow::handleOtaResult(bool success, QString message) {\n    if (success) {\n        QMessageBox::information(this, \"Success\", message);\n    } else {\n        QMessageBox::warning(this, \"Failure\", message);\n    }\n\n    // 清理资源\n   if (m_otaUpdater) {\n       int devHandle = m_otaUpdater->getDeviceHandle(); // 需要添加getter\n       m_otaUpdater->deleteLater();\n       m_otaUpdater = nullptr;\n       LIN_EX_CloseDevice(devHandle);\n   }\n}\n\nvoid MainWindow::cancelOtaUpgrade() {\n\n    if (m_otaUpdater) {\n        m_otaUpdater->cancelUpgrade();\n    }\n}\n```\n\n![360X360/0e42cf925940.png](https://cdn.nlark.com/yuque/0/2025/png/33668333/1751981435368-6439468c-bc6d-40bf-9e36-0e42cf925940.png)\n\n","tags":["嵌入式","C#","教程，技术分享"],"categories":["嵌入式"]},{"title":"情侣小游戏","url":"/2025/07/13/love/","content":"\n{% raw %}\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>宝贝专属心动小游戏乐园</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Ma+Shan+Zheng&family=Dancing+Script:wght@700&display=swap\" rel=\"stylesheet\">\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Ma Shan Zheng', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            color: #5a3e36;\n            min-height: 100vh;\n            overflow-x: hidden;\n            padding: 20px 10px;\n            position: relative;\n        }\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            position: relative;\n            z-index: 10;\n        }\n        \n        header {\n            text-align: center;\n            padding: 15px 0 25px;\n            position: relative;\n        }\n        \n        .title {\n            font-size: 2.5rem;\n            color: #e84393;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n            margin-bottom: 5px;\n            letter-spacing: 3px;\n        }\n        \n        .subtitle {\n            font-size: 1.2rem;\n            color: #6d214f;\n            margin-bottom: 20px;\n        }\n        \n        .heart-divider {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 15px 0;\n        }\n        \n        .heart-divider i {\n            color: #e84393;\n            margin: 0 5px;\n            font-size: 1.2rem;\n        }\n        \n        /* 游戏卡片 */\n        .games-container {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .game-card {\n            background: rgba(255, 255, 255, 0.85);\n            border-radius: 20px;\n            padding: 20px;\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n            transition: all 0.3s ease;\n            backdrop-filter: blur(10px);\n            border: 2px solid rgba(255, 255, 255, 0.3);\n        }\n        \n        .game-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);\n        }\n        \n        .game-header {\n            display: flex;\n            align-items: center;\n            margin-bottom: 15px;\n            border-bottom: 2px dashed #f8a5c2;\n            padding-bottom: 10px;\n        }\n        \n        .game-icon {\n            width: 50px;\n            height: 50px;\n            background: linear-gradient(45deg, #e84393, #fd79a8);\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 15px;\n            font-size: 1.5rem;\n            color: white;\n            box-shadow: 0 4px 8px rgba(232, 67, 147, 0.3);\n        }\n        \n        .game-title {\n            font-size: 1.6rem;\n            color: #e84393;\n        }\n        \n        /* 心情日记 */\n        .mood-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n            margin-bottom: 15px;\n        }\n        \n        .mood-btn {\n            flex: 1;\n            min-width: 70px;\n            padding: 8px 5px;\n            border-radius: 15px;\n            border: none;\n            background: #f8a5c2;\n            color: white;\n            font-family: inherit;\n            font-size: 1rem;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n        }\n        \n        .mood-btn:hover {\n            transform: scale(1.05);\n        }\n        \n        .mood-btn.selected {\n            background: #e84393;\n            box-shadow: 0 0 0 3px white, 0 0 0 6px #f8a5c2;\n        }\n        \n        .diary-input {\n            width: 100%;\n            padding: 12px;\n            border-radius: 15px;\n            border: 2px solid #f8a5c2;\n            background: rgba(255, 255, 255, 0.7);\n            margin: 10px 0;\n            min-height: 100px;\n            font-family: inherit;\n            font-size: 1rem;\n        }\n        \n        .diary-input:focus {\n            outline: none;\n            border-color: #e84393;\n        }\n        \n        .save-btn {\n            background: linear-gradient(45deg, #e84393, #fd79a8);\n            color: white;\n            border: none;\n            padding: 12px 25px;\n            border-radius: 25px;\n            font-size: 1.1rem;\n            cursor: pointer;\n            display: block;\n            margin: 15px auto 0;\n            transition: all 0.3s ease;\n            box-shadow: 0 5px 15px rgba(232, 67, 147, 0.3);\n        }\n        \n        .save-btn:hover {\n            transform: scale(1.05);\n            box-shadow: 0 7px 18px rgba(232, 67, 147, 0.4);\n        }\n        \n        /* 老虎机 */\n        .slot-machine {\n            display: flex;\n            justify-content: center;\n            gap: 10px;\n            margin: 20px 0;\n        }\n        \n        .slot {\n            width: 70px;\n            height: 70px;\n            background: linear-gradient(45deg, #6a89cc, #4a69bd);\n            border-radius: 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 2rem;\n            color: white;\n            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2), 0 5px 10px rgba(0, 0, 0, 0.1);\n            border: 3px solid #4a69bd;\n        }\n        \n        .pull-btn {\n            background: linear-gradient(45deg, #4a69bd, #1e3799);\n            color: white;\n            border: none;\n            padding: 12px 30px;\n            border-radius: 25px;\n            font-size: 1.1rem;\n            cursor: pointer;\n            display: block;\n            margin: 20px auto 10px;\n            transition: all 0.3s ease;\n            box-shadow: 0 5px 15px rgba(74, 105, 189, 0.3);\n        }\n        \n        .pull-btn:hover {\n            transform: scale(1.05);\n        }\n        \n        .slot-result {\n            text-align: center;\n            font-size: 1.3rem;\n            color: #1e3799;\n            margin: 15px 0;\n            min-height: 40px;\n        }\n        \n        /* 在线空调 */\n        .ac-control {\n            text-align: center;\n            margin: 20px 0;\n        }\n        \n        .ac-display {\n            width: 200px;\n            height: 200px;\n            background: linear-gradient(45deg, #00cec9, #0984e3);\n            border-radius: 20px;\n            margin: 0 auto 20px;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            color: white;\n            font-size: 1.5rem;\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .ac-display::before {\n            content: \"\";\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            background: repeating-linear-gradient(\n                transparent,\n                transparent 20px,\n                rgba(255, 255, 255, 0.1) 22px,\n                rgba(255, 255, 255, 0.1) 24px\n            );\n        }\n        \n        .temperature {\n            font-size: 4rem;\n            font-weight: bold;\n            margin: 10px 0;\n            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n        }\n        \n        .ac-controls {\n            display: flex;\n            justify-content: center;\n            gap: 20px;\n            margin-top: 15px;\n        }\n        \n        .ac-btn {\n            width: 50px;\n            height: 50px;\n            border-radius: 50%;\n            border: none;\n            background: #0984e3;\n            color: white;\n            font-size: 1.5rem;\n            cursor: pointer;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n        }\n        \n        /* 星座运势 */\n        .horoscope {\n            text-align: center;\n        }\n        \n        .zodiac-select {\n            width: 100%;\n            padding: 12px;\n            border-radius: 15px;\n            border: 2px solid #f8a5c2;\n            background: rgba(255, 255, 255, 0.7);\n            font-family: inherit;\n            font-size: 1rem;\n            margin: 10px 0 20px;\n            color: #5a3e36;\n        }\n        \n        .zodiac-select:focus {\n            outline: none;\n            border-color: #e84393;\n        }\n        \n        .horoscope-result {\n            background: rgba(255, 255, 255, 0.7);\n            border-radius: 15px;\n            padding: 15px;\n            margin-top: 15px;\n            min-height: 150px;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            border: 2px dashed #f8a5c2;\n        }\n        \n        .fortune-text {\n            font-size: 1.2rem;\n            line-height: 1.6;\n        }\n        \n        .lucky-stars {\n            font-size: 1.8rem;\n            margin: 15px 0;\n            color: gold;\n        }\n        \n        /* 更多游戏 */\n        .game-grid {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 15px;\n            margin-top: 15px;\n        }\n        \n        .mini-game {\n            background: rgba(255, 255, 255, 0.8);\n            border-radius: 20px;\n            padding: 20px 15px;\n            text-align: center;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n            transition: all 0.3s ease;\n            border: 2px solid rgba(255, 255, 255, 0.3);\n            cursor: pointer;\n        }\n        \n        .mini-game:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n        }\n        \n        .mini-game i {\n            font-size: 2.5rem;\n            color: #e84393;\n            margin-bottom: 10px;\n        }\n        \n        .mini-game h3 {\n            font-size: 1.3rem;\n            color: #e84393;\n        }\n        \n        footer {\n            text-align: center;\n            padding: 20px 0 10px;\n            color: #6d214f;\n            font-size: 0.9rem;\n        }\n        \n        /* 装饰元素 */\n        .floating {\n            position: absolute;\n            z-index: 1;\n            animation: floating 3s infinite ease-in-out;\n        }\n        \n        .heart {\n            color: rgba(232, 67, 147, 0.4);\n            font-size: 2rem;\n        }\n        \n        @keyframes floating {\n            0% { transform: translateY(0px); }\n            50% { transform: translateY(-15px); }\n            100% { transform: translateY(0px); }\n        }\n        \n        /* 响应式设计 */\n        @media (max-width: 480px) {\n            .title {\n                font-size: 2rem;\n            }\n            .game-title {\n                font-size: 1.4rem;\n            }\n            .slot {\n                width: 60px;\n                height: 60px;\n                font-size: 1.7rem;\n            }\n            .ac-display {\n                width: 180px;\n                height: 180px;\n            }\n        }\n        \n        /* 新增游戏样式 */\n        .game-detail {\n            display: none;\n            background: rgba(255, 255, 255, 0.9);\n            border-radius: 20px;\n            padding: 20px;\n            margin-top: 20px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        }\n        \n        .game-content {\n            padding: 15px;\n        }\n        \n        .back-btn {\n            background: linear-gradient(45deg, #00cec9, #0984e3);\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 25px;\n            font-size: 1rem;\n            cursor: pointer;\n            margin-top: 15px;\n            display: block;\n            margin-left: auto;\n        }\n        \n        .love-calculator {\n            text-align: center;\n        }\n        \n        .name-inputs {\n            display: flex;\n            gap: 10px;\n            margin: 15px 0;\n        }\n        \n        .name-input {\n            flex: 1;\n            padding: 10px;\n            border-radius: 15px;\n            border: 2px solid #f8a5c2;\n            background: rgba(255, 255, 255, 0.7);\n            font-family: inherit;\n            font-size: 1rem;\n        }\n        \n        .love-result {\n            margin: 20px 0;\n            font-size: 1.3rem;\n        }\n        \n        .love-percentage {\n            font-size: 3rem;\n            font-weight: bold;\n            color: #e84393;\n            margin: 10px 0;\n        }\n        \n        .love-message {\n            font-size: 1.2rem;\n            color: #6d214f;\n        }\n        \n                .memory-game-container {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 10px;\n            margin: 20px 0;\n            perspective: 1000px;\n        }\n\n        .memory-card {\n            width: 100%;\n            aspect-ratio: 1/1;\n            border-radius: 15px;\n            position: relative;\n            transform-style: preserve-3d;\n            cursor: pointer;\n            transition: transform 0.5s ease;\n        }\n\n        .memory-card-face {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            border-radius: 15px;\n            backface-visibility: hidden;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 1.8rem;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n        }\n\n        .memory-card-front {\n            background: linear-gradient(45deg, #a18cd1, #fbc2eb);\n        }\n\n        .memory-card-back {\n            background: linear-gradient(45deg, #ffecd2, #fcb69f);\n            transform: rotateY(180deg);\n        }\n\n        .memory-card.flipped {\n            transform: rotateY(180deg);\n        }\n\n        .memory-card.matched .memory-card-back {\n            box-shadow: 0 0 15px rgba(232, 67, 147, 0.5);\n            filter: brightness(1.1);\n        }\n\n        .memory-result {\n            text-align: center;\n            font-size: 1.3rem;\n            margin: 15px 0;\n            min-height: 40px;\n        }\n        \n        .dessert-options {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 15px;\n            margin: 20px 0;\n        }\n        \n        .dessert-option {\n            background: rgba(255, 255, 255, 0.7);\n            border-radius: 15px;\n            padding: 20px 10px;\n            text-align: center;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            border: 2px solid #f8a5c2;\n        }\n        \n        .dessert-option:hover {\n            transform: scale(1.05);\n            background: rgba(248, 165, 194, 0.2);\n        }\n        \n        .dessert-option i {\n            font-size: 2.5rem;\n            color: #e84393;\n            margin-bottom: 10px;\n        }\n        \n        .dessert-result {\n            text-align: center;\n            margin: 20px 0;\n            font-size: 1.2rem;\n            min-height: 100px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex-direction: column;\n        }\n        \n        .kiss-counter {\n            font-size: 3rem;\n            color: #e84393;\n            margin: 10px 0;\n            font-weight: bold;\n        }\n        \n        .kiss-btn {\n            background: linear-gradient(45deg, #e84393, #fd79a8);\n            color: white;\n            border: none;\n            padding: 12px 30px;\n            border-radius: 25px;\n            font-size: 1.1rem;\n            cursor: pointer;\n            margin: 10px auto;\n            transition: all 0.3s ease;\n            box-shadow: 0 5px 15px rgba(232, 67, 147, 0.3);\n        }\n        \n        .kiss-btn:hover {\n            transform: scale(1.05);\n        }\n        \n        .fortune-cookie {\n            width: 150px;\n            height: 100px;\n            background: #f3e5ab;\n            border-radius: 0 50% 50% 50%;\n            margin: 0 auto 20px;\n            position: relative;\n            transform: rotate(45deg);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n            cursor: pointer;\n        }\n        \n        .fortune-cookie:before {\n            content: \"\";\n            position: absolute;\n            width: 80%;\n            height: 20px;\n            background: #d4c690;\n            border-radius: 10px;\n            transform: rotate(-45deg);\n        }\n        \n        .fortune-cookie-text {\n            transform: rotate(-45deg);\n            font-size: 1.5rem;\n            color: #5a3e36;\n        }\n        \n        .fortune-message {\n            text-align: center;\n            margin-top: 20px;\n            font-size: 1.2rem;\n            min-height: 80px;\n        }\n        \n        .compatibility-images {\n            display: flex;\n            justify-content: center;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .compatibility-image {\n            width: 80px;\n            height: 80px;\n            border-radius: 50%;\n            overflow: hidden;\n            background: linear-gradient(45deg, #ff9a9e, #fad0c4);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 2rem;\n            color: white;\n        }\n        \n        .compatibility-arrow {\n            display: flex;\n            align-items: center;\n            font-size: 2rem;\n            color: #e84393;\n        }\n    </style>\n</head>\n<body>\n    <!-- 飘动的心形装饰 -->\n    <!-- <div class=\"floating\" style=\"top: 5%; left: 10%;\">\n        <i class=\"fas fa-heart heart\"></i>\n    </div>\n    <div class=\"floating\" style=\"top: 15%; right: 15%;\">\n        <i class=\"fas fa-heart heart\"></i>\n    </div>\n    <div class=\"floating\" style=\"bottom: 10%; left: 20%;\">\n        <i class=\"fas fa-heart heart\"></i>\n    </div>\n    <div class=\"floating\" style=\"bottom: 15%; right: 10%;\">\n        <i class=\"fas fa-heart heart\"></i>\n    </div> -->\n    \n    <div class=\"container\">\n        <header>\n            <h1 class=\"title\">❤️ 心动小游戏乐园 ❤️</h1>\n            <p class=\"subtitle\">专属于韩思宇的甜蜜互动空间</p>\n            <div class=\"heart-divider\">\n                <i class=\"fas fa-heart\"></i>\n                <i class=\"fas fa-heart\"></i>\n                <i class=\"fas fa-heart\"></i>\n            </div>\n        </header>\n        \n        <div class=\"games-container\">\n            <!-- 心情日记本 -->\n            <div class=\"game-card\">\n                <div class=\"game-header\">\n                    <div class=\"game-icon\">\n                        <i class=\"fas fa-book\"></i>\n                    </div>\n                    <h2 class=\"game-title\">心情日记本</h2>\n                </div>\n                <p>记录今天的点点滴滴，分享你的心情~</p>\n                \n                <div class=\"mood-container\">\n                    <button class=\"mood-btn\" data-mood=\"happy\">😊 开心</button>\n                    <button class=\"mood-btn\" data-mood=\"excited\">😆 兴奋</button>\n                    <button class=\"mood-btn\" data-mood=\"calm\">😌 平静</button>\n                    <button class=\"mood-btn\" data-mood=\"tired\">😴 疲惫</button>\n                </div>\n                \n                <textarea class=\"diary-input\" placeholder=\"今天发生了什么有趣的事情呢？\"></textarea>\n                \n                <button class=\"save-btn\" id=\"save-diary\">\n                    <i class=\"fas fa-save\"></i> 保存心情日记\n                </button>\n            </div>\n            \n            <!-- 老虎机抽奖 -->\n            <div class=\"game-card\">\n                <div class=\"game-header\">\n                    <div class=\"game-icon\">\n                        <i class=\"fas fa-dice\"></i>\n                    </div>\n                    <h2 class=\"game-title\">幸运老虎机</h2>\n                </div>\n                <p>试试今天的运气，赢取特别奖励！</p>\n                \n                <div class=\"slot-machine\">\n                    <div class=\"slot\" id=\"slot1\">🍓</div>\n                    <div class=\"slot\" id=\"slot2\">🍒</div>\n                    <div class=\"slot\" id=\"slot3\">🍋</div>\n                </div>\n                \n                <div class=\"slot-result\" id=\"slot-result\">等待抽奖...</div>\n                \n                <button class=\"pull-btn\" id=\"pull-lever\">\n                    <i class=\"fas fa-hand-point-down\"></i> 拉杆抽奖\n                </button>\n            </div>\n            \n            <!-- 在线空调 -->\n            <div class=\"game-card\">\n                <div class=\"game-header\">\n                    <div class=\"game-icon\">\n                        <i class=\"fas fa-wind\"></i>\n                    </div>\n                    <h2 class=\"game-title\">在线小空调</h2>\n                </div>\n                <p>热了吗？打开空调凉爽一下吧！</p>\n                \n                <div class=\"ac-control\">\n                    <div class=\"ac-display\">\n                        <div>当前温度</div>\n                        <div class=\"temperature\" id=\"temp\">26°C</div>\n                        <div>舒适模式</div>\n                    </div>\n                    \n                    <div class=\"ac-controls\">\n                        <button class=\"ac-btn\" id=\"temp-down\">－</button>\n                        <button class=\"ac-btn\" id=\"ac-power\">\n                            <i class=\"fas fa-power-off\"></i>\n                        </button>\n                        <button class=\"ac-btn\" id=\"temp-up\">＋</button>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 星座运势 -->\n            <div class=\"game-card\">\n                <div class=\"game-header\">\n                    <div class=\"game-icon\">\n                        <i class=\"fas fa-star\"></i>\n                    </div>\n                    <h2 class=\"game-title\">星座运势</h2>\n                </div>\n                <p>看看星星们今天想对你说什么？</p>\n                \n                <div class=\"horoscope\">\n                    <select class=\"zodiac-select\" id=\"zodiac\">\n                        <option value=\"\">选择你的星座</option>\n                        <option value=\"aries\">白羊座 ♈</option>\n                        <option value=\"taurus\">金牛座 ♉</option>\n                        <option value=\"gemini\">双子座 ♊</option>\n                        <option value=\"cancer\">巨蟹座 ♋</option>\n                        <option value=\"leo\">狮子座 ♌</option>\n                        <option value=\"virgo\">处女座 ♍</option>\n                        <option value=\"libra\">天秤座 ♎</option>\n                        <option value=\"scorpio\">天蝎座 ♏</option>\n                        <option value=\"sagittarius\">射手座 ♐</option>\n                        <option value=\"capricorn\">摩羯座 ♑</option>\n                        <option value=\"aquarius\">水瓶座 ♒</option>\n                        <option value=\"pisces\">双鱼座 ♓</option>\n                    </select>\n                    \n                    <button class=\"save-btn\" id=\"check-fortune\">\n                        <i class=\"fas fa-crystal-ball\"></i> 查看今日运势\n                    </button>\n                    \n                    <div class=\"horoscope-result\" id=\"fortune-result\">\n                        <p class=\"fortune-text\">选择星座查看今日运势</p>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 更多游戏 -->\n            <div class=\"game-card\">\n                <div class=\"game-header\">\n                    <div class=\"game-icon\">\n                        <i class=\"fas fa-plus-circle\"></i>\n                    </div>\n                    <h2 class=\"game-title\">更多小游戏</h2>\n                </div>\n                <p>点击图标开启更多有趣游戏！</p>\n                \n                <div class=\"game-grid\" id=\"mini-game-grid\">\n                    <div class=\"mini-game\" data-game=\"love-calculator\">\n                        <i class=\"fas fa-heart\"></i>\n                        <h3>爱情计算器</h3>\n                    </div>\n                    <div class=\"mini-game\" data-game=\"memory-game\">\n                        <i class=\"fas fa-brain\"></i>\n                        <h3>记忆挑战</h3>\n                    </div>\n                    <div class=\"mini-game\" data-game=\"dessert-fortune\">\n                        <i class=\"fas fa-cookie-bite\"></i>\n                        <h3>甜品占卜</h3>\n                    </div>\n                    <div class=\"mini-game\" data-game=\"kiss-counter\">\n                        <i class=\"fas fa-kiss-wink-heart\"></i>\n                        <h3>亲亲计数器</h3>\n                    </div>\n                    <div class=\"mini-game\" data-game=\"fortune-cookie\">\n                        <i class=\"fas fa-cookie\"></i>\n                        <h3>幸运饼干</h3>\n                    </div>\n                    <div class=\"mini-game\" data-game=\"compatibility\">\n                        <i class=\"fas fa-people-arrows\"></i>\n                        <h3>默契测试</h3>\n                    </div>\n                </div>\n                \n                <!-- 爱情计算器 -->\n                <div id=\"love-calculator\" class=\"game-detail\">\n                    <div class=\"game-content\">\n                        <h3>❤️ 爱情计算器 ❤️</h3>\n                        <p>计算你们之间的爱情指数</p>\n                        \n                        <div class=\"name-inputs\">\n                            <input type=\"text\" class=\"name-input\" id=\"name1\" placeholder=\"你的名字\">\n                            <input type=\"text\" class=\"name-input\" id=\"name2\" placeholder=\"TA的名字\">\n                        </div>\n                        \n                        <button class=\"save-btn\" id=\"calculate-love\">\n                            <i class=\"fas fa-heart\"></i> 计算爱情指数\n                        </button>\n                        \n                        <div class=\"love-result\">\n                            <div class=\"love-percentage\" id=\"love-percentage\">0%</div>\n                            <div class=\"love-message\" id=\"love-message\">输入名字查看你们的缘分</div>\n                        </div>\n                    </div>\n                    <button class=\"back-btn\">返回游戏列表</button>\n                </div>\n                \n                <!-- 记忆挑战 -->\n                <div id=\"memory-game\" class=\"game-detail\">\n                    <div class=\"game-content\">\n                        <h3>🧠 记忆挑战 🧠</h3>\n                        <p>记住卡片位置，找到所有配对！</p>\n                        \n                        <div class=\"memory-game-container\" id=\"memory-game-container\"></div>\n                        \n                        <div class=\"memory-result\" id=\"memory-result\">点击卡片开始游戏</div>\n                        \n                        <button class=\"save-btn\" id=\"restart-memory\">\n                            <i class=\"fas fa-redo\"></i> 重新开始\n                        </button>\n                    </div>\n                    <button class=\"back-btn\">返回游戏列表</button>\n                </div>\n                \n                <!-- 甜品占卜 -->\n                <div id=\"dessert-fortune\" class=\"game-detail\">\n                    <div class=\"game-content\">\n                        <h3>🍰 甜品占卜 🍰</h3>\n                        <p>选择你喜欢的甜品，看看今天的运势</p>\n                        \n                        <div class=\"dessert-options\">\n                            <div class=\"dessert-option\" data-dessert=\"cake\">\n                                <i class=\"fas fa-birthday-cake\"></i>\n                                <div>蛋糕</div>\n                            </div>\n                            <div class=\"dessert-option\" data-dessert=\"icecream\">\n                                <i class=\"fas fa-ice-cream\"></i>\n                                <div>冰淇淋</div>\n                            </div>\n                            <div class=\"dessert-option\" data-dessert=\"chocolate\">\n                                <i class=\"fas fa-candy-cane\"></i>\n                                <div>巧克力</div>\n                            </div>\n                            <div class=\"dessert-option\" data-dessert=\"cookie\">\n                                <i class=\"fas fa-cookie\"></i>\n                                <div>饼干</div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"dessert-result\" id=\"dessert-result\">\n                            请选择一种甜品进行占卜\n                        </div>\n                    </div>\n                    <button class=\"back-btn\">返回游戏列表</button>\n                </div>\n                \n                <!-- 亲亲计数器 -->\n                <div id=\"kiss-counter\" class=\"game-detail\">\n                    <div class=\"game-content\">\n                        <h3>💋 亲亲计数器 💋</h3>\n                        <p>记录你们今天的甜蜜亲亲次数</p>\n                        \n                        <div class=\"kiss-counter\" id=\"kiss-count\">0</div>\n                        \n                        <button class=\"kiss-btn\" id=\"add-kiss\">\n                            <i class=\"fas fa-kiss-wink-heart\"></i> 亲亲 +1\n                        </button>\n                        \n                        <button class=\"kiss-btn\" id=\"reset-kiss\">\n                            <i class=\"fas fa-redo\"></i> 重置计数\n                        </button>\n                        \n                        <div style=\"margin-top: 20px; font-size: 1.1rem;\">\n                            <p>今天也要多多亲亲哦 😘</p>\n                        </div>\n                    </div>\n                    <button class=\"back-btn\">返回游戏列表</button>\n                </div>\n                \n                <!-- 幸运饼干 -->\n                <div id=\"fortune-cookie\" class=\"game-detail\">\n                    <div class=\"game-content\">\n                        <h3>🍪 幸运饼干 🍪</h3>\n                        <p>点击饼干获取今日专属幸运签</p>\n                        \n                        <div class=\"fortune-cookie\" id=\"fortune-cookie\">\n                            <div class=\"fortune-cookie-text\">?</div>\n                        </div>\n                        \n                        <div class=\"fortune-message\" id=\"fortune-message\">\n                            点击饼干获取你的幸运签\n                        </div>\n                    </div>\n                    <button class=\"back-btn\">返回游戏列表</button>\n                </div>\n                \n                <!-- 默契测试 -->\n                <div id=\"compatibility\" class=\"game-detail\">\n                    <div class=\"game-content\">\n                        <h3>👫 默契测试 👫</h3>\n                        <p>看看你们有多了解彼此</p>\n                        \n                        <div class=\"compatibility-images\">\n                            <div class=\"compatibility-image\">👩</div>\n                            <div class=\"compatibility-arrow\">❤️</div>\n                            <div class=\"compatibility-image\">👨</div>\n                        </div>\n                        \n                        <div class=\"love-result\">\n                            <div class=\"love-percentage\" id=\"compatibility-percentage\">0%</div>\n                            <div class=\"love-message\" id=\"compatibility-message\">测试你们的默契程度</div>\n                        </div>\n                        \n                        <button class=\"save-btn\" id=\"test-compatibility\">\n                            <i class=\"fas fa-heart\"></i> 测试默契\n                        </button>\n                    </div>\n                    <button class=\"back-btn\">返回游戏列表</button>\n                </div>\n            </div>\n        </div>\n        \n        <footer>\n            <p>❤️ 专属于你的心动空间 ❤️</p>\n            <p>每一天都因你而甜蜜 | 设计：冯笑一</p>\n        </footer>\n    </div>\n\n    <script>\n        // 心情日记功能\n        const moodButtons = document.querySelectorAll('.mood-btn');\n        const diaryInput = document.querySelector('.diary-input');\n        const saveDiaryBtn = document.getElementById('save-diary');\n        \n        let selectedMood = '';\n        \n        moodButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                moodButtons.forEach(btn => btn.classList.remove('selected'));\n                button.classList.add('selected');\n                selectedMood = button.dataset.mood;\n            });\n        });\n        \n        saveDiaryBtn.addEventListener('click', () => {\n            if (!selectedMood) {\n                alert('请先选择一种心情哦~');\n                return;\n            }\n            \n            if (diaryInput.value.trim() === '') {\n                alert('请写点今天的心情故事吧~');\n                return;\n            }\n            \n            // 这里实际应用中应该保存到本地存储或服务器\n            alert('心情日记已保存！\\n\\n心情: ' + \n                  document.querySelector('.mood-btn.selected').textContent + \n                  '\\n内容: ' + diaryInput.value);\n            \n            // 重置表单\n            moodButtons.forEach(btn => btn.classList.remove('selected'));\n            diaryInput.value = '';\n            selectedMood = '';\n        });\n        \n        // 老虎机功能\n        const slots = ['🍎', '🍊', '🍇', '🍓', '🍒', '🍋', '🍉', '🍑', '🍍', '🥝'];\n        const slotElements = [document.getElementById('slot1'), \n                            document.getElementById('slot2'), \n                            document.getElementById('slot3')];\n        const slotResult = document.getElementById('slot-result');\n        const pullLeverBtn = document.getElementById('pull-lever');\n        \n        function spinSlot(slotElement) {\n            let count = 0;\n            const maxSpins = 20 + Math.floor(Math.random() * 10);\n            const interval = setInterval(() => {\n                slotElement.textContent = slots[Math.floor(Math.random() * slots.length)];\n                count++;\n                if (count > maxSpins) {\n                    clearInterval(interval);\n                }\n            }, 100);\n        }\n        \n        pullLeverBtn.addEventListener('click', () => {\n            // 重置结果\n            slotResult.textContent = \"旋转中...\";\n            pullLeverBtn.disabled = true;\n            \n            // 旋转每个老虎机\n            slotElements.forEach(slot => spinSlot(slot));\n            \n            // 等待所有老虎机停止后显示结果\n            setTimeout(() => {\n                const results = [\n                    slotElements[0].textContent,\n                    slotElements[1].textContent,\n                    slotElements[2].textContent\n                ];\n                \n                // 检查是否中奖\n                if (results[0] === results[1] && results[1] === results[2]) {\n                    slotResult.innerHTML = \"🎉 恭喜！大奖！获得甜蜜之吻 💋\";\n                } else if (results[0] === results[1] || results[1] === results[2]) {\n                    slotResult.innerHTML = \"🎊 恭喜！小奖！获得爱的拥抱 🤗\";\n                } else {\n                    slotResult.textContent = \"😊 感谢参与！明天再来试试吧~\";\n                }\n                \n                pullLeverBtn.disabled = false;\n            }, 3000);\n        });\n        \n        // 在线空调功能\n        const tempDisplay = document.getElementById('temp');\n        const tempDownBtn = document.getElementById('temp-down');\n        const tempUpBtn = document.getElementById('temp-up');\n        const acPowerBtn = document.getElementById('ac-power');\n        \n        let currentTemp = 26;\n        let isPowerOn = true;\n        \n        function updateAC() {\n            tempDisplay.textContent = currentTemp + \"°C\";\n            acPowerBtn.innerHTML = isPowerOn ? '<i class=\"fas fa-power-off\"></i>' : '<i class=\"fas fa-power-off\" style=\"color:#ddd\"></i>';\n            acPowerBtn.style.background = isPowerOn ? \"#0984e3\" : \"#95afc0\";\n        }\n        \n        tempDownBtn.addEventListener('click', () => {\n            if (!isPowerOn) return;\n            if (currentTemp > 16) {\n                currentTemp--;\n                updateAC();\n            }\n        });\n        \n        tempUpBtn.addEventListener('click', () => {\n            if (!isPowerOn) return;\n            if (currentTemp < 30) {\n                currentTemp++;\n                updateAC();\n            }\n        });\n        \n        acPowerBtn.addEventListener('click', () => {\n            isPowerOn = !isPowerOn;\n            updateAC();\n        });\n        \n        // 初始化空调\n        updateAC();\n        \n        // 星座运势功能\n        const zodiacSelect = document.getElementById('zodiac');\n        const fortuneResult = document.getElementById('fortune-result');\n        const checkFortuneBtn = document.getElementById('check-fortune');\n        \n        const fortunes = [\n            \"今天会有意外惊喜！保持开放心态迎接新机会。\",\n            \"感情运势上升，适合表达心意或约会。\",\n            \"工作上有突破性进展，抓住机会展现能力。\",\n            \"注意健康管理，适当休息放松很重要。\",\n            \"财运亨通，但需谨慎处理投资决策。\",\n            \"人际关系运势上升，适合拓展社交圈。\",\n            \"今天适合独处思考，会有新的领悟。\",\n            \"可能会遇到旧友，重温美好回忆。\",\n            \"尝试新事物会带来意想不到的收获。\",\n            \"保持耐心，好事正在慢慢向你靠近。\"\n        ];\n        \n        const luckyStars = [\"⭐\", \"⭐⭐\", \"⭐⭐⭐\", \"⭐⭐⭐⭐\", \"⭐⭐⭐⭐⭐\"];\n        \n        checkFortuneBtn.addEventListener('click', () => {\n            if (!zodiacSelect.value) {\n                alert('请先选择你的星座哦~');\n                return;\n            }\n            \n            const zodiacName = zodiacSelect.options[zodiacSelect.selectedIndex].text;\n            const randomFortune = fortunes[Math.floor(Math.random() * fortunes.length)];\n            const randomStars = luckyStars[Math.floor(Math.random() * luckyStars.length)];\n            \n            fortuneResult.innerHTML = `\n                <h3>${zodiacName} 今日运势</h3>\n                <p class=\"fortune-text\">${randomFortune}</p>\n                <div class=\"lucky-stars\">幸运指数: ${randomStars}</div>\n                <p>${getZodiacTip(zodiacSelect.value)}</p>\n            `;\n        });\n        \n        function getZodiacTip(zodiac) {\n            const tips = {\n                aries: \"今日幸运色：红色，适合主动出击！\",\n                taurus: \"今日幸运色：绿色，享受美食会带来好运。\",\n                gemini: \"今日幸运色：黄色，多与人交流会带来机会。\",\n                cancer: \"今日幸运色：银色，家庭会给你温暖的力量。\",\n                leo: \"今日幸运色：金色，展现你的领导魅力吧！\",\n                virgo: \"今日幸运色：蓝色，注重细节会带来成功。\",\n                libra: \"今日幸运色：粉色，平衡是你今天的关键词。\",\n                scorpio: \"今日幸运色：紫色，直觉会引导你正确方向。\",\n                sagittarius: \"今日幸运色：橙色，冒险精神会带来惊喜。\",\n                capricorn: \"今日幸运色：棕色，务实的态度会得到回报。\",\n                aquarius: \"今日幸运色：青色，创新思维会解决难题。\",\n                pisces: \"今日幸运色：海蓝色，艺术会激发你的灵感。\"\n            };\n            \n            return tips[zodiac] || \"保持积极心态，今天会是美好的一天！\";\n        }\n        document.addEventListener('DOMContentLoaded', function() {\n            // 新增游戏功能\n            const miniGames = document.querySelectorAll('.mini-game');\n            const gameDetails = document.querySelectorAll('.game-detail');\n            const backButtons = document.querySelectorAll('.back-btn');\n            \n            console.log('所有事件监听器已绑定');\n            console.log(`找到 ${miniGames.length} 个游戏按钮`);\n            console.log(`找到 ${gameDetails.length} 个游戏详情`);\n            console.log(`找到 ${backButtons.length} 个返回按钮`);\n            \n            \n            const calculateLoveBtn = document.getElementById('calculate-love');\n            const lovePercentage = document.getElementById('love-percentage');\n            const loveMessage = document.getElementById('love-message');\n        \n            \n            calculateLoveBtn.addEventListener('click', () => {\n                // 爱情计算器\n                const name1 = document.getElementById('name1').value.trim();\n                const name2 = document.getElementById('name2').value.trim();\n                \n                if (!name1 || !name2) {\n                    alert('请输入两个名字~');\n                    return;\n                }\n                \n                // 生成随机爱情指数（60-100%）\n                const percentage = Math.floor(Math.random() * 41) + 60;\n                lovePercentage.textContent = `${percentage}%`;\n                \n                // 根据百分比显示不同消息\n                if (percentage >= 90) {\n                    loveMessage.innerHTML = \"天作之合！你们是命中注定的一对 ❤️\";\n                } else if (percentage >= 75) {\n                    loveMessage.innerHTML = \"非常般配！你们的爱情会越来越甜蜜 💕\";\n                } else {\n                    loveMessage.innerHTML = \"有发展潜力！多相处会让感情升温 🌹\";\n                }\n            });\n            \n            // 记忆挑战游戏\n            const memoryContainer = document.getElementById('memory-game-container');\n            const memoryResult = document.getElementById('memory-result');\n            const restartMemoryBtn = document.getElementById('restart-memory');\n\n            const memorySymbols = ['❤️', '🌟', '🎁', '💋', '🌸', '🎈', '🍭', '🌈'];\n            let memoryCards = [];\n            let flippedCards = [];\n            let matchedPairs = 0;\n\n            // 初始化记忆游戏的函数\n            function initMemoryGame() {\n                memoryContainer.innerHTML = '';\n                memoryCards = [...memorySymbols, ...memorySymbols];\n                flippedCards = [];\n                matchedPairs = 0;\n                memoryResult.textContent = \"点击卡片开始游戏\";\n\n                // 洗牌\n                for (let i = memoryCards.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1));\n                    [memoryCards[i], memoryCards[j]] = [memoryCards[j], memoryCards[i]];\n                }\n\n                // 创建卡片\n                memoryCards.forEach((symbol, index) => {\n                    const card = document.createElement('div');\n                    card.classList.add('memory-card');\n                    card.dataset.index = index;\n                    card.dataset.symbol = symbol;\n                    \n                    // 卡片正面（默认图标）\n                    const front = document.createElement('div');\n                    front.classList.add('memory-card-face', 'memory-card-front');\n                    front.textContent = '❓'; // 默认图标\n                    \n                    // 卡片背面（实际图形）\n                    const back = document.createElement('div');\n                    back.classList.add('memory-card-face', 'memory-card-back');\n                    back.textContent = symbol;\n                    \n                    card.appendChild(front);\n                    card.appendChild(back);\n                    card.addEventListener('click', flipMemoryCard);\n                    memoryContainer.appendChild(card);\n                });\n            }\n\n            function flipMemoryCard() {\n                if (flippedCards.length < 2 && !this.classList.contains('flipped')) {\n                    this.classList.add('flipped');\n                    flippedCards.push(this);\n\n                    if (flippedCards.length === 2) {\n                        setTimeout(checkMatch, 500);\n                    }\n                }\n            }\n\n            function checkMatch() {\n                const card1 = flippedCards[0];\n                const card2 = flippedCards[1];\n\n                if (card1.dataset.symbol === card2.dataset.symbol) {\n                    card1.classList.add('matched');\n                    card2.classList.add('matched');\n                    matchedPairs++;\n\n                    if (matchedPairs === memorySymbols.length) {\n                        memoryResult.innerHTML = \"🎉 恭喜！你完成了挑战！\";\n                    } else {\n                        memoryResult.textContent = `已匹配: ${matchedPairs}/${memorySymbols.length}`;\n                    }\n                } else {\n                    // 翻回正面时移除flipped类\n                    setTimeout(() => {\n                        card1.classList.remove('flipped');\n                        card2.classList.remove('flipped');\n                    }, 500);\n                }\n\n                flippedCards = [];\n            }\n\n            // 修改游戏点击事件处理\n            miniGames.forEach(game => {\n                game.addEventListener('click', () => {\n                    const gameId = game.dataset.game;\n                    document.getElementById('mini-game-grid').style.display = 'none';\n                    document.getElementById(gameId).style.display = 'block';\n                    \n                    // 只有在点击记忆游戏时才初始化\n                    if (gameId === 'memory-game') {\n                        initMemoryGame();\n                    }\n                });\n            });\n\n            // 重新开始按钮\n            restartMemoryBtn.addEventListener('click', initMemoryGame);\n            \n            // 甜品占卜\n            const dessertOptions = document.querySelectorAll('.dessert-option');\n            const dessertResult = document.getElementById('dessert-result');\n            \n            dessertOptions.forEach(option => {\n                option.addEventListener('click', () => {\n                    const dessert = option.dataset.dessert;\n                    let message = \"\";\n                    \n                    switch (dessert) {\n                        case 'cake':\n                            message = \"🍰 蛋糕代表甜蜜生活！今天会有令人开心的小惊喜，记得留意身边的美好事物哦~\";\n                            break;\n                        case 'icecream':\n                            message = \"🍦 冰淇淋代表清凉心情！今天适合放松自己，做些让自己开心的事情，别太劳累~\";\n                            break;\n                        case 'chocolate':\n                            message = \"🍫 巧克力代表浪漫爱情！今天感情运势上升，适合表达心意或安排甜蜜约会~\";\n                            break;\n                        case 'cookie':\n                            message = \"🍪 饼干代表温馨日常！今天适合与家人朋友共度美好时光，享受简单的小幸福~\";\n                            break;\n                    }\n                    \n                    dessertResult.innerHTML = message;\n                });\n            });\n            \n            // 亲亲计数器\n            const kissCount = document.getElementById('kiss-count');\n            const addKissBtn = document.getElementById('add-kiss');\n            const resetKissBtn = document.getElementById('reset-kiss');\n            let kissCounter = 0;\n            \n            addKissBtn.addEventListener('click', () => {\n                kissCounter++;\n                kissCount.textContent = kissCounter;\n                \n                // 添加动画效果\n                kissCount.style.transform = 'scale(1.2)';\n                setTimeout(() => {\n                    kissCount.style.transform = 'scale(1)';\n                }, 300);\n            });\n            \n            resetKissBtn.addEventListener('click', () => {\n                kissCounter = 0;\n                kissCount.textContent = kissCounter;\n            });\n            \n            // 幸运饼干\n            const fortuneCookie = document.querySelector('.fortune-cookie');\n            const fortuneMessage = document.getElementById('fortune-message');\n            \n            const fortuneMessages = [\n                \"今天会有意想不到的好运降临！\",\n                \"微笑是最好的化妆品，今天多笑笑吧~\",\n                \"你的善良会带来美好的回报\",\n                \"勇敢表达你的心意，会有惊喜结果\",\n                \"小小的举动会带来大大的幸福\",\n                \"今天适合尝试新事物，会有意外收获\",\n                \"你的魅力值今天爆表！\",\n                \"放松心情，享受当下的美好时光\",\n                \"给爱的人一个拥抱，温暖彼此\",\n                \"美好的事情正在向你走来\"\n            ];\n            \n            fortuneCookie.addEventListener('click', () => {\n                const randomIndex = Math.floor(Math.random() * fortuneMessages.length);\n                fortuneMessage.textContent = fortuneMessages[randomIndex];\n                \n                // 添加动画效果\n                fortuneCookie.style.transform = 'rotate(10deg)';\n                setTimeout(() => {\n                    fortuneCookie.style.transform = 'rotate(0deg)';\n                }, 200);\n            });\n            \n            // 默契测试\n            const testCompatibilityBtn = document.getElementById('test-compatibility');\n            const compatibilityPercentage = document.getElementById('compatibility-percentage');\n            const compatibilityMessage = document.getElementById('compatibility-message');\n            \n            testCompatibilityBtn.addEventListener('click', () => {\n                // 生成随机默契指数（70-100%）\n                const percentage = Math.floor(Math.random() * 31) + 70;\n                compatibilityPercentage.textContent = `${percentage}%`;\n                \n                // 根据百分比显示不同消息\n                if (percentage >= 90) {\n                    compatibilityMessage.innerHTML = \"心灵相通！你们真是天生一对 ❤️\";\n                } else if (percentage >= 80) {\n                    compatibilityMessage.innerHTML = \"非常默契！彼此了解程度很高 💕\";\n                } else {\n                    compatibilityMessage.innerHTML = \"默契不错！多交流会更加了解彼此 🌹\";\n                }\n            });\n\n        // 显示游戏详情\n        miniGames.forEach(game => {\n            game.addEventListener('click', () => {\n                const gameId = game.dataset.game;\n                document.getElementById('mini-game-grid').style.display = 'none';\n                document.getElementById(gameId).style.display = 'block';\n            });\n        });\n        \n        // 返回游戏列表\n        backButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                gameDetails.forEach(detail => {\n                    detail.style.display = 'none';\n                });\n                document.getElementById('mini-game-grid').style.display = 'grid';\n            });\n        });\n    }\n    </script>\n</body>\n</html>\n{% endraw %}\n\n\n![360X360/bg_xinhai_360.png](https://tc.z.wiki/autoupload/f/pCwQSduTrK74xeM6D4jdFJO7Q2ZCk-TPg9YW4bt5tjGyl5f0KlZfm6UsKj-HyTuv/20250715/QOWX/360X360/bg_xinhai_360.png)","categories":["技术分享,开源项目,工具"]},{"title":"号码归属地查询","url":"/2025/07/04/shearchphone/","content":"\n{% raw %}\n\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>手机归属地查询工具</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    \n    <style>\n        bodydiv {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', 'Microsoft YaHei', sans-serif;\n            background: linear-gradient(135deg, #ff4b5c 0%, #ff9a9e 100%);\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            padding: 20px;\n        }\n        \n        .container {\n            max-width: 1200px;\n            width: 100%;\n            margin: 0 auto;\n            display: flex;\n            flex-direction: column;\n            gap: 30px;\n        }\n        \n        header {\n            text-align: center;\n            padding: 20px;\n            color: white;\n            animation: fadeInDown 0.8s ease;\n        }\n        \n        header h1 {\n            font-size: 2.8rem;\n            margin-bottom: 10px;\n            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        }\n        \n        header p {\n            font-size: 1.2rem;\n            max-width: 600px;\n            margin: 0 auto;\n            opacity: 0.9;\n        }\n        \n        .main-content {\n            display: flex;\n            gap: 30px;\n            flex-wrap: wrap;\n            justify-content: center;\n        }\n        \n        .query-card {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);\n            padding: 40px;\n            width: 100%;\n            max-width: 500px;\n            animation: fadeInLeft 0.8s ease;\n            transition: transform 0.3s ease;\n        }\n        \n        .query-card:hover {\n            transform: translateY(-10px);\n        }\n        \n        .card-title {\n            text-align: center;\n            margin-bottom: 30px;\n            color: #e91e63;\n            font-size: 1.8rem;\n            position: relative;\n            padding-bottom: 15px;\n        }\n        \n        .card-title::after {\n            content: '';\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 80px;\n            height: 4px;\n            background: linear-gradient(to right, #ff4b5c, #e91e63);\n            border-radius: 2px;\n        }\n        \n        .input-group {\n            position: relative;\n            margin-bottom: 30px;\n            /* 确保父容器宽度设置正确，例如设置一个宽度或者继承父级宽度 */\n            width: 100%; /* 添加这一行确保宽度约束 */\n        }\n\n        .input-group i {\n            position: absolute;\n            left: 20px;\n            top: 50%;\n            transform: translateY(-50%);\n            color: #e91e63;\n            font-size: 22px;\n            z-index: 1; /* 确保图标在输入框之上 */\n        }\n\n        .input-group input {\n            box-sizing: border-box; /* 关键修复 */\n            width: 100%;\n            padding: 18px 18px 18px 50px; /* 上 右 下 左，左侧内边距调整为50px */\n            cursor: pointer;\n            letter-spacing: 1px;\n            position: relative;\n            overflow: hidden;\n            font-size: 18px;\n            border: 2px solid #f8bbd0;\n            border-radius: 12px;\n            outline: none;\n            transition: all 0.3s ease;\n            background: #fff;\n            color: #333;\n        }\n\n        .input-group input:focus {\n            border-color: #e91e63;\n            box-shadow: 0 0 0 3px rgba(233, 30, 99, 0.2);\n        }\n        \n        .btn-query {\n            width: 100%;\n            padding: 18px;\n            background: linear-gradient(to right, #e91e63, #ff4b5c);\n            border: none;\n            border-radius: 12px;\n            color: white;\n            font-size: 18px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            letter-spacing: 1px;\n            box-shadow: 0 5px 15px rgba(233, 30, 99, 0.4);\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .btn-query:hover {\n            transform: translateY(-3px);\n            box-shadow: 0 8px 20px rgba(233, 30, 99, 0.6);\n        }\n        \n        .btn-query:active {\n            transform: translateY(1px);\n        }\n        \n        .btn-query::after {\n            content: '';\n            position: absolute;\n            top: -50%;\n            left: -60%;\n            width: 40%;\n            height: 200%;\n            background: rgba(255, 255, 255, 0.2);\n            transform: rotate(30deg);\n            transition: all 0.6s;\n        }\n        \n        .btn-query:hover::after {\n            left: 120%;\n        }\n        \n        .result-container {\n            background: rgba(255, 255, 255, 0.95);\n            border-radius: 20px;\n            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);\n            padding: 40px;\n            width: 100%;\n            max-width: 500px;\n            animation: fadeInRight 0.8s ease;\n            display: none;\n        }\n        \n        .result-container.active {\n            display: block;\n        }\n        \n        .result-header {\n            display: flex;\n            align-items: center;\n            margin-bottom: 30px;\n            padding-bottom: 20px;\n            border-bottom: 2px solid #f8bbd0;\n        }\n        \n        .result-header i {\n            font-size: 28px;\n            color: #e91e63;\n            margin-right: 15px;\n        }\n        \n        .result-header h2 {\n            color: #e91e63;\n            font-size: 1.8rem;\n            font-weight: 600;\n        }\n        \n        .result-details {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .info-card {\n            background: linear-gradient(135deg, #fff0f5 0%, #ffeef3 100%);\n            border-radius: 15px;\n            padding: 25px 20px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n            transition: all 0.3s ease;\n            border: 1px solid #ffdbe6;\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .info-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);\n        }\n        \n        .info-card::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 5px;\n            height: 100%;\n            background: linear-gradient(to bottom, #e91e63, #ff4b5c);\n        }\n        \n        .info-card h3 {\n            color: #e91e63;\n            font-size: 16px;\n            margin-bottom: 10px;\n            font-weight: 600;\n            opacity: 0.8;\n        }\n        \n        .info-card p {\n            color: #d81b60;\n            font-size: 20px;\n            font-weight: 700;\n        }\n        \n        .spinner {\n            display: none;\n            text-align: center;\n            margin: 30px 0;\n        }\n        \n        .spinner i {\n            font-size: 50px;\n            color: #e91e63;\n            animation: spin 1.5s linear infinite;\n        }\n        \n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        \n        .error-message {\n            display: none;\n            background: #ffebee;\n            color: #c62828;\n            padding: 18px;\n            border-radius: 12px;\n            margin-top: 20px;\n            text-align: center;\n            font-weight: 600;\n            border-left: 4px solid #c62828;\n        }\n        \n        .history-section {\n            margin-top: 30px;\n            padding-top: 25px;\n            border-top: 2px dashed #f8bbd0;\n        }\n        \n        .history-section h3 {\n            color: #e91e63;\n            margin-bottom: 15px;\n            font-size: 1.3rem;\n        }\n        \n        .history-list {\n            max-height: 200px;\n            overflow-y: auto;\n        }\n        \n        .history-item {\n            background: #fff0f5;\n            padding: 12px 15px;\n            border-radius: 10px;\n            margin-bottom: 10px;\n            display: flex;\n            justify-content: space-between;\n            border: 1px solid #ffdbe6;\n        }\n        \n        .history-phone {\n            font-weight: 600;\n            color: #e91e63;\n        }\n        \n        .history-location {\n            color: #d81b60;\n        }\n        \n        footer {\n            text-align: center;\n            color: rgba(255, 255, 255, 0.85);\n            padding: 20px;\n            font-size: 1rem;\n            animation: fadeInUp 0.8s ease;\n        }\n        \n        /* 动画效果 */\n        @keyframes fadeInDown {\n            from {\n                opacity: 0;\n                transform: translateY(-30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n        \n        @keyframes fadeInUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n        \n        @keyframes fadeInLeft {\n            from {\n                opacity: 0;\n                transform: translateX(-30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateX(0);\n            }\n        }\n        \n        @keyframes fadeInRight {\n            from {\n                opacity: 0;\n                transform: translateX(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateX(0);\n            }\n        }\n        \n        /* 响应式设计 */\n        @media (max-width: 768px) {\n            .main-content {\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            .query-card, .result-container {\n                max-width: 100%;\n                padding: 30px 20px;\n            }\n            \n            header h1 {\n                font-size: 2.2rem;\n            }\n            \n            .result-details {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<bodydiv>\n    <div class=\"container\">\n        <header>\n            <h1><i class=\"fas fa-mobile-alt\"></i> 手机归属地查询</h1>\n            <p>精准查询手机号码归属地、运营商及地理位置信息</p>\n        </header>\n        \n        <div class=\"main-content\">\n            <div class=\"query-card\">\n                <h2 class=\"card-title\">查询手机归属地</h2>\n                \n                <div class=\"input-group\">\n                    <i class=\"fas fa-phone\"></i>\n                    <input type=\"tel\" id=\"phone-input\" placeholder=\"请输入11位手机号码\" maxlength=\"11\">\n                </div>\n                \n                <button class=\"btn-query\" id=\"query-btn\">\n                    <i class=\"fas fa-search\"></i> 立即查询\n                </button>\n                \n                <div class=\"spinner\" id=\"spinner\">\n                    <i class=\"fas fa-spinner\"></i>\n                </div>\n                \n                <div class=\"error-message\" id=\"error-msg\"></div>\n            </div>\n            \n            <div class=\"result-container\" id=\"result-container\">\n                <div class=\"result-header\">\n                    <i class=\"fas fa-info-circle\"></i>\n                    <h2>查询结果</h2>\n                </div>\n                \n                <div class=\"result-details\">\n                    <div class=\"info-card\">\n                        <h3>手机号码</h3>\n                        <p id=\"result-phone\">138****3800</p>\n                    </div>\n                    <div class=\"info-card\">\n                        <h3>运营商</h3>\n                        <p id=\"result-operator\">中国移动</p>\n                    </div>\n                    <div class=\"info-card\">\n                        <h3>省份</h3>\n                        <p id=\"result-province\">北京市</p>\n                    </div>\n                    <div class=\"info-card\">\n                        <h3>城市</h3>\n                        <p id=\"result-city\">北京市</p>\n                    </div>\n                </div>\n                \n                <div class=\"history-section\">\n                    <h3><i class=\"fas fa-history\"></i> 最近查询记录</h3>\n                    <div class=\"history-list\" id=\"history-list\">\n                        <div class=\"history-item\">\n                            <span class=\"history-phone\">138****5678</span>\n                            <span class=\"history-location\">北京·移动</span>\n                        </div>\n                        <div class=\"history-item\">\n                            <span class=\"history-phone\">159****1234</span>\n                            <span class=\"history-location\">上海·联通</span>\n                        </div>\n                        <div class=\"history-item\">\n                            <span class=\"history-phone\">186****9876</span>\n                            <span class=\"history-location\">广州·电信</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <footer>\n            <p>© 2023 手机归属地查询工具 | 数据来源于360手机归属地API | 仅供查询参考</p>\n        </footer>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            const phoneInput = document.getElementById('phone-input');\n            const queryBtn = document.getElementById('query-btn');\n            const resultContainer = document.getElementById('result-container');\n            const spinner = document.getElementById('spinner');\n            const errorMsg = document.getElementById('error-msg');\n            const resultPhone = document.getElementById('result-phone');\n            const resultOperator = document.getElementById('result-operator');\n            const resultProvince = document.getElementById('result-province');\n            const resultCity = document.getElementById('result-city');\n            const historyList = document.getElementById('history-list');\n            \n            // 存储查询历史\n            let queryHistory = [];\n            \n            // 输入框自动格式化\n            phoneInput.addEventListener('input', function() {\n                this.value = this.value.replace(/\\D/g, '');\n                if (this.value.length > 11) {\n                    this.value = this.value.slice(0, 11);\n                }\n            });\n            \n            // 查询按钮点击事件\n            queryBtn.addEventListener('click', function() {\n                const phone = phoneInput.value.trim();\n                \n                // 验证手机号\n                if (!phone) {\n                    showError('请输入手机号码');\n                    return;\n                }\n                \n                if (!/^1[3-9]\\d{9}$/.test(phone)) {\n                    showError('请输入有效的11位手机号码');\n                    return;\n                }\n                \n                // 开始查询\n                startQuery(phone);\n            });\n            \n            // 按Enter键查询\n            phoneInput.addEventListener('keypress', function(e) {\n                if (e.key === 'Enter') {\n                    queryBtn.click();\n                }\n            });\n            \n            // 开始查询\n            function startQuery(phone) {\n                // 显示加载动画\n                spinner.style.display = 'block';\n                resultContainer.classList.remove('active');\n                errorMsg.style.display = 'none';\n                \n                // JSONP 回调函数名（确保唯一性）\n                const callbackName = `jsonpCallback_${Date.now()}`;\n                \n                // 创建 script 元素\n                const script = document.createElement('script');\n                \n                // 设置 JSONP 请求\n                script.src = `https://cx.shouji.360.cn/phonearea.php?number=${phone}&callback=${callbackName}`;\n                \n                // 处理 JSONP 响应\n                window[callbackName] = function(data) {\n                    // 清理\n                    document.body.removeChild(script);\n                    delete window[callbackName];\n                    \n                    spinner.style.display = 'none';\n                    \n                    if (data.code === 0) {\n                        // 更新结果\n                        resultPhone.textContent = formatPhoneNumber(phone);\n                        \n                        const province = data.data.province || '未知';\n                        const city = data.data.city || '未知';\n                        let operator = data.data.sp || '未知';\n                        \n                        // 标准化运营商名称\n                        operator = operator.replace('中国', '');\n                        \n                        resultOperator.textContent = operator;\n                        resultProvince.textContent = province;\n                        resultCity.textContent = city;\n                        \n                        // 添加到查询历史\n                        addToHistory(phone, `${province}·${operator}`);\n                        \n                        // 显示结果\n                        resultContainer.classList.add('active');\n                    } else {\n                        showError('未查询到该号码信息，请重试');\n                    }\n                };\n            \n            // 显示错误信息\n            function showError(message) {\n                errorMsg.textContent = message;\n                errorMsg.style.display = 'block';\n                \n                // 3秒后自动隐藏错误信息\n                setTimeout(() => {\n                    errorMsg.style.display = 'none';\n                }, 3000);\n            }\n            \n            // 格式化手机号显示\n            function formatPhoneNumber(phone) {\n                return phone.replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1****$3');\n            }\n            \n            // 添加到查询历史\n            function addToHistory(phone, location) {\n                // 添加到历史数组\n                queryHistory.unshift({\n                    phone: phone,\n                    location: location,\n                    timestamp: new Date()\n                });\n                \n                // 只保留最近的5条记录\n                if (queryHistory.length > 5) {\n                    queryHistory.pop();\n                }\n                \n                // 更新历史列表\n                updateHistoryList();\n            }\n            \n            // 更新历史列表\n            function updateHistoryList() {\n                historyList.innerHTML = '';\n                \n                queryHistory.forEach(item => {\n                    const historyItem = document.createElement('div');\n                    historyItem.className = 'history-item';\n                    historyItem.innerHTML = `\n                        <span class=\"history-phone\">${formatPhoneNumber(item.phone)}</span>\n                        <span class=\"history-location\">${item.location}</span>\n                    `;\n                    historyList.appendChild(historyItem);\n                });\n            }\n            \n            // 页面加载时自动聚焦输入框\n            phoneInput.focus();\n            \n            // 添加一些示例历史记录\n            addToHistory('13800138000', '北京·移动');\n            addToHistory('15912345678', '上海·联通');\n            addToHistory('18698765432', '广州·电信');\n        });\n    </script>\n</bodydiv>\n</html>\n\n{% endraw %}","tags":["小程序","工具","应用"],"categories":["技术分享,开源项目,工具"]},{"title":"ESP32-IDF新建工程和创建分区","url":"/2025/06/06/ESP32-IDF新建工程和创建分区/","content":"\nesp32文件路径：D:/Espressif/frameworks/esp-idf-v5.4.1/components/**\n\n创建工程：<font style=\"color:rgb(77, 77, 77);\">查看->命令面板，在里面搜索create project from extersion template</font>\n\n![](/images/posts/ESP32-IDF新建工程和创建分区/1.png)\n\n<font style=\"color:rgb(77, 77, 77);\">步骤2) 选择要创建工程的路径</font>\n\n![](/images/posts/ESP32-IDF新建工程和创建分区/2.png)\n\n<font style=\"color:rgb(77, 77, 77);\">步骤3）选择工程的类型</font>\n\n![](/images/posts/ESP32-IDF新建工程和创建分区/3.png)\n\n<font style=\"color:rgb(77, 77, 77);\">步骤4）在main.c的app_main函数我们添加一个打印</font><font style=\"color:rgb(78, 161, 219) !important;\">printf</font><font style=\"color:rgb(77, 77, 77);\">  \n</font><font style=\"color:rgb(77, 77, 77);\"> </font>![](/images/posts/ESP32-IDF新建工程和创建分区/4.png)\n\n后面就是选择芯片，选择烧入方式，编译下载。\n\n### <font style=\"color:rgb(79, 79, 79);\">创建分区文件</font>\n<font style=\"color:rgb(77, 77, 77);\">命令面板 搜索partition table,出来以下画面，我们打开分区编辑器UI</font>\n\n![](/images/posts/ESP32-IDF新建工程和创建分区/5.png)\n\nSDK编辑器设置好对于的文件和flash大小![](/images/posts/ESP32-IDF新建工程和创建分区/6.png)\n\n# <font style=\"color:rgb(34, 34, 38);\">logging库</font>\n```c\n#include \"esp_log.h\"\nstatic const char* TAG = \"Wireless Link\";\nvoid esp32_logging_lib_show()\n{\n    ESP_LOGE(TAG, \"I am error log\");\n    ESP_LOGW(TAG, \"I am warning log\");\n    ESP_LOGI(TAG, \"I am info log\");\n    ESP_LOGD(TAG, \"I am debug log\");\n    ESP_LOGV(TAG, \"I am verbose log\");\n}\n```\n\n#### `**<font style=\"color:rgb(79, 79, 79);\">xTaskCreate</font>**`**<font style=\"color:rgb(79, 79, 79);\"> 函数原型</font>**\n`<font style=\"color:rgb(77, 77, 77);\">xTaskCreate</font>`<font style=\"color:rgb(77, 77, 77);\"> 是 </font><font style=\"color:rgb(78, 161, 219) !important;\">FreeRTOS</font><font style=\"color:rgb(77, 77, 77);\"> 中用于创建任务的函数。</font>\n\n```c\nBaseType_t xTaskCreate(\n    TaskFunction_t pvTaskCode,       // 任务函数指针\n    const char * const pcName,       // 任务名称（字符串）\n    configSTACK_DEPTH_TYPE usStackDepth, // 任务堆栈大小（以字为单位）\n    void *pvParameters,             // 传递给任务函数的参数\n    UBaseType_t uxPriority,         // 任务优先级\n    TaskHandle_t *pxCreatedTask      // 任务句柄（用于引用任务）\n);\n\nxTaskCreate(uart_select_task, \"uart_select_task\", 4 * 1024, NULL, 5, NULL);\n```\n\n### <font style=\"color:rgb(79, 79, 79);\"></font><font style=\"color:rgb(79, 79, 79);\">json基础</font>\n<font style=\"color:rgb(77, 77, 77);\">JSON（</font><font style=\"color:rgb(78, 161, 219) !important;\">JavaScript</font><font style=\"color:rgb(77, 77, 77);\"> Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。它基于JavaScript的一个子集，但独立于语言，广泛用于Web应用中的数据交换。</font><font style=\"color:rgb(51, 51, 51);\">  \n</font><font style=\"color:rgb(51, 51, 51);\">json编程</font>\n\n![](/images/posts/ESP32-IDF新建工程和创建分区/7.png)\n\n<font style=\"color:rgb(51, 51, 51);\">{\"FUNC\":\"HW\",\"OPERATE\":\"LED_ON\",\"PARAM1\":null,\"PARAM2\":null,\"PARAM3\":null,\"PARAM4\":null,\"PARAM5\":null,\"PARAM6\":null}</font>\n\n<font style=\"color:rgb(77, 77, 77);\">在ESP IDF中已经集成了json的库，就是</font><font style=\"color:rgb(78, 161, 219) !important;\">cJson</font><font style=\"color:rgb(77, 77, 77);\">，只需要引用这个头文件即可以使用其中的API</font>\n\n```c\n#include \"cJSON.h\"\n    /* 解析上位机的json格式 */\n    cJSON* parse_json = cJSON_Parse((const char *)shell_string);\n \n    if(!parse_json)\n    {\n        ESP_LOGE(TAG, \"Not specific json format:%s\\n\",shell_string);\n        goto exit;\n    }\n \n    uint8_t* func_value = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"FUNC\"))->valuestring;\n    uint8_t* operate_value = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"OPERATE\"))->valuestring;\n    uint8_t* para1 = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"PARAM1\"))->valuestring;\n    uint8_t* para2 = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"PARAM2\"))->valuestring;\n    uint8_t* para3 = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"PARAM3\"))->valuestring;\n    uint8_t* para4 = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"PARAM4\"))->valuestring;\n    uint8_t* para5 = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"PARAM5\"))->valuestring;\n    uint8_t* para6 = (uint8_t*)((cJSON *)cJSON_GetObjectItem(parse_json,\"PARAM6\"))->valuestring;\n    ESP_UNUSED(para1);\n    ESP_UNUSED(para2);\n    ESP_UNUSED(para3);\n    ESP_UNUSED(para4);\n    ESP_UNUSED(para5);\n    ESP_UNUSED(para6);\n    if(!func_value || !operate_value)\n    {\n        ESP_LOGE(TAG, \"Not specific json format:%s\\n\",shell_string);\n        goto exit;\n    }\n \n    if(strcmp((const char *)func_value,\"HW\") == 0)\n    {\n        if(strcmp((const char *)operate_value,\"LED_ON\") == 0)\n        {\n            ESP_LOGD(TAG, \"UART PARSE DEBUG:operate LED_ON\\n\");\n            LED_ON;\n            goto exit;\n        }\n \n        if(strcmp((const char *)operate_value,\"LED_OFF\") == 0)\n        {\n            ESP_LOGD(TAG, \"UART PARSE DEBUG:operate LED_OFF\\n\");\n            LED_OFF;\n            goto exit;\n        }\n \n    }\n```\n\n","tags":["嵌入式","C语言","笔记","单片机"],"categories":["嵌入式"]},{"title":"基于Cortex-M0内核的Bootloader开发指南","url":"/2025/03/28/基于Cortex-M0内核的Bootloader开发指南/","content":"\n\n> <font style=\"color:rgb(64, 64, 64);\">在嵌入式系统中，Bootloader是芯片上电后运行的第一段代码，负责初始化硬件、验证应用程序完整性，并实现固件升级功能。针对资源受限的</font>**<font style=\"color:rgb(64, 64, 64);\">Cortex-M0</font>**<font style=\"color:rgb(64, 64, 64);\">内核的MM32G0001的MCU实现，过程中设计到中断向量表的不同的区分。</font>\n>\n\n#### **<font style=\"color:rgb(64, 64, 64);\">一、Bootloader的核心作用</font>**\n1. **<font style=\"color:rgb(64, 64, 64);\">硬件初始化</font>**<font style=\"color:rgb(64, 64, 64);\">：配置时钟、外设、中断向量表。</font>\n2. **<font style=\"color:rgb(64, 64, 64);\">应用程序跳转</font>**<font style=\"color:rgb(64, 64, 64);\">：验证APP有效性后跳转到用户程序。</font>\n3. **<font style=\"color:rgb(64, 64, 64);\">固件升级</font>**<font style=\"color:rgb(64, 64, 64);\">：通过UART、I2C等接口接收新固件并烧录到Flash。</font>\n\n#### **<font style=\"color:rgb(64, 64, 64);\">二、Bootloader工作流程图</font>**\n```plain\n+---------------------+\n|      上电启动        |\n+---------------------+\n           |\n           V\n+---------------------+\n| 初始化时钟、GPIO、串口 |\n+---------------------+\n           |\n           V\n+---------------------+\n| 检测升级触发条件       |\n| (如按键/USB信号)       |\n+---------------------+\n           |------------------- 是 -------------------+\n           |                                         |\n          否                                          |\n           |                                         V\n           V                                +---------------------+\n+---------------------+                     |  进入Bootloader模式  |\n| 检查APP有效性         |                     | (等待固件传输)        |\n| (CRC校验或标志位)      |                     +---------------------+\n+---------------------+                                |\n           |                                           |\n          有效                                          V\n           |                                +---------------------+\n           V                                |  接收数据并写入Flash |\n+---------------------+                     |  (分块校验+烧录)     |\n| 跳转到应用程序(APP)   |                     +---------------------+\n+---------------------+                                |\n           |                                           |\n           +------------------- 完成 ------------------+\n                                           |\n                                           V\n                                +---------------------+\n                                | 复位或跳转到新APP     |\n                                +---------------------+\n```\n\n#### **<font style=\"color:rgb(64, 64, 64);\">三、关键设计步骤</font>**\n##### **<font style=\"color:rgb(64, 64, 64);\">1. 内存分配</font>**\n+ **<font style=\"color:rgb(64, 64, 64);\">Bootloader区域</font>**<font style=\"color:rgb(64, 64, 64);\">：占用Flash起始地址（如0x08000000~0x080013FF）。</font>\n+ **<font style=\"color:rgb(64, 64, 64);\">应用程序区域</font>**<font style=\"color:rgb(64, 64, 64);\">：紧随其后（如0x08001400~0x080037FF）。</font>\n+ **<font style=\"color:rgb(64, 64, 64);\">中断向量表重定向</font>**<font style=\"color:rgb(64, 64, 64);\">：APP中需通过</font>`<font style=\"color:rgb(64, 64, 64);\">SCB->VTOR</font>`<font style=\"color:rgb(64, 64, 64);\">设置偏移量。(M0内核没有)</font>\n\n**<font style=\"color:rgb(64, 64, 64);\">链接脚本示例（APP端）</font>**<font style=\"color:rgb(64, 64, 64);\"> </font><font style=\"color:rgb(64, 64, 64);\">：</font>\n\n```c\nMEMORY {\n        FLASH (rx) : ORIGIN = 0x08001400, LENGTH = 9K\n        RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 2K\n    }\n```\n\nkeill设置\n\n![](/images/posts/基于Cortex-M0内核的Bootloader开发指南/1.png)\n\n##### **<font style=\"color:rgb(64, 64, 64);\">2. 跳转到应用程序</font>**\n```c\ntypedef void (*AppEntry)(void);\n\nvoid JumpToApp(uint32_t appAddress) {\n    // 检查栈顶地址是否合法\n    if (((*(uint32_t*)appAddress) & 0x2FFE0000) == 0x20000000) {\n        // 设置APP的栈指针和复位向量\n        __set_MSP(*(uint32_t*)appAddress);\n        AppEntry entry = (AppEntry)(*(uint32_t*)(appAddress + 4));\n\n        // 关闭所有中断\n        __disable_irq();\n\n        // 跳转到APP\n        entry();\n    }\n}\n```\n\n##### **<font style=\"color:rgb(64, 64, 64);\">3. 固件接收与烧录</font>**\n<font style=\"color:rgb(64, 64, 64);\">通过UART接收数据并写入Flash：</font>\n\n```c\nFLASH_Status flash_bsp_write_block(uint16_t BlockNum, uint8_t *data)\n{\n    FLASH_Status err_Status;\n\n    // 解锁闪存以允许写操作\n    FLASH_Unlock();\n\n    // 清除所有错误标志位，确保写操作前状态标志处于已知状态\n    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);\n\n    /* 将数据写入指定的页 */\n    for (uint16_t i = 0; i < 128; i += 4)\n    {\n        err_Status += FLASH_ProgramWord(FLASH_APP1_BASE_ADDRESS + (BlockNum * 0x80) + i, *(uint32_t *)(data + i));\n    }\n\n    // 清除操作结束标志位，为后续操作做好准备\n    FLASH_ClearFlag(FLASH_FLAG_EOP);\n\n    // 锁定闪存以防止未经授权的访问或修改\n    FLASH_Lock();\n\n    // 返回写操作的状态\n    return err_Status;\n}\n\n```\n\n##### **<font style=\"color:rgb(64, 64, 64);\">4. 升级触发条件检测</font>**\n<font style=\"color:rgb(64, 64, 64);\">如检测到指令</font>\n\n```c\nif(reg_value == 0x0000)\n    {\n        enter_app();\n    }\n```\n\n#### **<font style=\"color:rgb(64, 64, 64);\">四、调试技巧</font>**\n1. **<font style=\"color:rgb(64, 64, 64);\">半主机问题</font>**<font style=\"color:rgb(64, 64, 64);\">：禁用标准库依赖，避免在Bootloader中使用printf</font><font style=\"color:rgb(64, 64, 64);\">。</font>\n2. **<font style=\"color:rgb(64, 64, 64);\">看门狗</font>**<font style=\"color:rgb(64, 64, 64);\">：在长时间操作中复位看门狗。</font>\n3. **<font style=\"color:rgb(64, 64, 64);\">Flash保护</font>**<font style=\"color:rgb(64, 64, 64);\">：确保操作前正确解锁Flash。</font>\n\n#### **<font style=\"color:rgb(64, 64, 64);\">五、中断向量表详解</font>**\n##### <font style=\"color:rgb(64, 64, 64);\">1、对比 Cortex-M0 和 M3 内核的中断向量表迁移方式：</font>\n| **<font style=\"color:rgb(64, 64, 64);\">特性</font>** | **<font style=\"color:rgb(64, 64, 64);\">Cortex-M0</font>** | **<font style=\"color:rgb(64, 64, 64);\">Cortex-M3</font>** |\n| --- | --- | --- |\n| <font style=\"color:rgb(64, 64, 64);\">向量表偏移寄存器(VTOR)</font> | **<font style=\"color:rgb(64, 64, 64);\">可选特性</font>**<font style=\"color:rgb(64, 64, 64);\">（依赖芯片厂商实现）</font> | **<font style=\"color:rgb(64, 64, 64);\">强制支持</font>**<font style=\"color:rgb(64, 64, 64);\">（SCB->VTOR 寄存器）</font> |\n| <font style=\"color:rgb(64, 64, 64);\">默认向量表地址</font> | <font style=\"color:rgb(64, 64, 64);\">0x00000000（固定）</font> | <font style=\"color:rgb(64, 64, 64);\">0x00000000（可通过VTOR动态修改）</font> |\n| <font style=\"color:rgb(64, 64, 64);\">重映射灵活性</font> | <font style=\"color:rgb(64, 64, 64);\">依赖Flash物理地址或厂商自定义方法</font> | <font style=\"color:rgb(64, 64, 64);\">任意地址（通过VTOR设置）</font> |\n\n\n**<font style=\"color:rgb(64, 64, 64);\">注</font>**<font style=\"color:rgb(64, 64, 64);\">：MM32G0001 的 VTOR 功能</font>**<font style=\"color:rgb(64, 64, 64);\">由芯片厂商自定义实现</font>**<font style=\"color:rgb(64, 64, 64);\">，需查阅手册确认其行为！MM32G0001没有此功能</font>\n\n<font style=\"color:rgb(64, 64, 64);\">####</font>\n\n##### <font style=\"color:rgb(64, 64, 64);\">2、MM32G0001中断向量表配置方法</font>\n###### **<font style=\"color:rgb(64, 64, 64);\">M0内核中断向量表偏移存在问题</font>**\n+ <font style=\"color:rgb(64, 64, 64);\">芯片复位后默认从 </font><font style=\"color:rgb(64, 64, 64);\">0x08000000</font><font style=\"color:rgb(64, 64, 64);\">（Flash起始地址）加载向量表。向量表的位置由Flash的物理地址决定，无法通过软件动态调整。</font>\n\n###### **<font style=\"color:rgb(64, 64, 64);\">MM32G0001的特殊性</font>**\n+ <font style=\"color:rgb(64, 64, 64);\">MM32G0001虽然是Cortex-M0内核，但支持自定义的向量表映射机制，需参考具体芯片手册。</font>\n\n###### 解决方法\n通过切换内存映射方法，切换中断向量表，系统默认将flash的0x8000000地址映射到地址0x000000地址，通过修改SYSCFG->CFGR寄存器将ram的0x20000000内存映射到地址0x000000，通过查阅可以看到中断入口函数存放在bin文件的最前面：\n\n![](/images/posts/基于Cortex-M0内核的Bootloader开发指南/2.png)\n\n再通过启动文件可以看到一共48个中断<font style=\"color:rgb(77, 77, 77);\">53行Vectors---到-->102行Vectors_End 每一个DCD都代表一个中断向量 （ 中断服务程序的入口地址 ）分为内核中断和外部中断，其中32位系统中，每一个中断入口函数指针占4字节。所以一共占用48*4= 192 = 0xC0字节。</font>\n\n![](/images/posts/基于Cortex-M0内核的Bootloader开发指南/3.png)\n\n通过查看hex文件可以知道我们16进制文件的0xc前都是中断入口函数指针后面接着是其他函数的入口函数指针。\n\n![](/images/posts/基于Cortex-M0内核的Bootloader开发指南/4.png)\n\n所以我们的方式是把前面的0XC0自己的入口函数指针复制到内存空间中。\n\n```c\n// 获取APP的向量表地址\n    memcpy((uint32_t *)RAM_APP1_BASE_ADDRESS, (uint32_t *)FLASH_APP1_BASE_ADDRESS, 48*4);\n```\n\n需要在APP的程序中屏蔽前面部分的内存，防止被修改\n\n![](/images/posts/基于Cortex-M0内核的Bootloader开发指南/5.png)\n\n完成上诉步骤，接着就可以实现从以0x2000 0000作为起始地址映射向量表：\n\n```c\nRCC_APB1PeriphClockCmd(RCC_APB1PERIPH_SYSCFG, ENABLE);\nSYSCFG->CFGR &= ~SYSCFG_CFGR_MEM_MODE; // 清除原有配置\nSYSCFG->CFGR |= (0x3 << SYSCFG_CFGR_MEM_MODE_Pos); // MEM_MODE=11\nRCC_APB1PeriphClockCmd(RCC_APB1PERIPH_SYSCFG, DISABLE);\n```\n\n    这里需要注意，MM32和STM32单片机区别，MM32单片机在修改内存映射修改时需要启动相对应的时钟。而在STM32无需这项操作。\n\n##### 跳转APP整体完整操作\n 禁用中断，确保后续操作不会被中断->禁用定时器中断\\禁用发送和接收->获取APP的向量表地址复制RAM中-> 配置SYSCFG，设置RAM映射到0地址->重启中断(减少app代码修改)->定义一个函数指针->获取应用程序的入口地址-> 设置主栈指针(MSP)为应用程序的初始栈指针->调用应用程序的入口函数，开始执行应用程序->APP中屏蔽前0xc0的内存地址\n\n**<font style=\"color:rgb(64, 64, 64);\">流程图</font>**\n\n```plain\ngraph TD\n    A[Bootloader开始] --> B[禁用所有中断]\n    B --> C[复制APP向量表到RAM]\n    C --> D[配置SYSCFG重映射RAM到0x00000000]\n    D --> E[设置MSP为APP栈顶地址]\n    E --> F[跳转到APP入口函数]\n    F --> G[APP运行]\n```\n\n####  **<font style=\"color:rgb(64, 64, 64);\">六：结语</font>**\n<font style=\"color:rgb(64, 64, 64);\">在本次关于MM32G001 MCU（Cortex-M0内核）的Bootloader开发指南中，我们详细探讨了Bootloader在嵌入式系统中的重要角色，特别是在中断向量表映射方面的特殊需求。通过深入分析Cortex-M0与Cortex-M3内核在中断向量表映射机制上的差异，明确了在MM32G001上实现Bootloader的关键步骤和注意事项。</font>\n\n<font style=\"color:rgb(64, 64, 64);\">我回顾了Bootloader的核心功能，包括硬件初始化、应用程序有效性检查、固件升级以及中断向量表的重映射。特别是在MM32G001上，由于其Cortex-M0内核不支持动态修改向量表偏移寄存器（VTOR），我采用了硬件重映射的方法，通过将应用程序的向量表复制到RAM，并配置系统控制寄存器（SYSCFG）以实现中断向量表的重映射。这一过程确保了在不修改应用程序代码的前提下，实现安全可靠的跳转。</font>\n\n<font style=\"color:rgb(64, 64, 64);\">通过完整的代码示例和详细的步骤说明，我们展示了如何禁用中断、复制向量表到RAM、配置SYSCFG寄存器以及跳转到应用程序入口函数。这些步骤不仅确保了系统的稳定性，还为开发者提供了清晰的实现路径。</font>\n\n<font style=\"color:rgb(64, 64, 64);\">在实际开发过程中，强调了以下关键点：</font>\n\n1. **<font style=\"color:rgb(64, 64, 64);\">内存对齐</font>**<font style=\"color:rgb(64, 64, 64);\">：确保Flash和RAM地址按芯片手册要求对齐，避免地址错误导致的系统崩溃。</font>\n2. **<font style=\"color:rgb(64, 64, 64);\">中断清除</font>**<font style=\"color:rgb(64, 64, 64);\">：跳转前清除所有挂起的中断，防止在应用程序运行过程中出现意外中断。</font>\n3. **<font style=\"color:rgb(64, 64, 64);\">调试验证</font>**<font style=\"color:rgb(64, 64, 64);\">：使用内存查看工具和调试器，确保向量表复制正确，中断向量表重映射成功。</font>\n\n<font style=\"color:rgb(64, 64, 64);\">建议读者在开发过程中参考MM32G001的芯片手册，确保配置和操作符合芯片的具体要求。</font>\n\n> <font style=\"color:rgb(64, 64, 64);\">个人博客：WWW.f123.club</font>\n>\n\n\n","tags":["嵌入式","C语言","笔记","单片机","bootloader"],"categories":["嵌入式"]},{"title":"基于Modbus-RTU协议的Bootloader升级系统设计","url":"/2025/03/24/基于Modbus-RTU协议的Bootloader升级系统设计/","content":"\n---\n\n## 一、串口协议配置\n### 1. 基本串口参数\n```cpp\n// Qt串口配置代码\nQSerialPort serial;\nserial.setPortName(\"COM1\");       // 用户可选择端口\nserial.setBaudRate(QSerialPort::Baud9600);\nserial.setDataBits(QSerialPort::Data8);\nserial.setParity(QSerialPort::NoParity);\nserial.setStopBits(QSerialPort::OneStop);\nserial.setFlowControl(QSerialPort::NoFlowControl);\n\n// 连接接收槽函数\nconnect(&serial, &QSerialPort::readyRead, this, &ModbusMaster::handleReadyRead);\n```\n\n## 二、Hex文件处理\n### 1. 文件解析与转换\n```cpp\nbool ModbusMaster::loadAndParseHexFile(const QString &filePath) \n{\n    QFile file(filePath);\n    if (!file.open(QIODevice::ReadOnly)) {\n        qWarning() << \"文件打开失败:\" << filePath;\n        return false;\n    }\n\n    // 此处简化处理直接读取二进制数据\n    QByteArray data = file.readAll();\n    file.close();\n\n    // 分块处理（512字节/块）\n    for (int i = 0; i < data.size(); i += 512) {\n        QByteArray block = data.mid(i, 512);\n        if(block.size() < 512) {\n            block.append(QByteArray(512 - block.size(), 0xFF)); // 填充0xFF\n        }\n        dataBlocks.append(block);\n    }\n    \n    return !dataBlocks.isEmpty();\n}\n```\n\n## 三、Modbus-RTU协议帧格式\n### 1. 数据帧结构\n| 字段 | 长度 | 说明 |\n| --- | --- | --- |\n| 从机地址 | 1字节 | 目标设备地址（0x01~0xFF） |\n| 功能码 | 1字节 | 0x03读/0x10写多寄存器 |\n| 数据地址 | 2字节 | 寄存器起始地址 |\n| 数据内容 | N字节 | 最好的方式是block号(2字节)+512字节数据 |\n| CRC校验 | 2字节 | Modbus CRC16校验 |\n\n\n### 2. 关键寄存器定义\n| 寄存器地址 | 类型 | 功能描述 |\n| --- | --- | --- |\n| 0x00E0 | 读写 | 状态寄存器（0:APP, 1:Bootloader）用于确认当前状态（读取回复00 xx，写入需要加校验（cc xx），可使用读UID校验进入bootloder） |\n| 0x00E1 | 读写 | 固件版本号（例如0x0102表示V1.2）上位机读取文件名 |\n| 0x00E2 | 只写 | 总数据块数（数据长度/512 + 1） |\n| 0x00E3 | 写 | 数据块写入接口 |\n| 0x00E4 | 读 | 完整CRC校验 |\n\n\n## 四、核心功能实现\n### 1. 数据发送模块\n```cpp\nQByteArray ModbusMaster::createModbusRequest(const bankNum,const QByteArray &data) {\n    /* 自定义Bootloader协议帧格式：\n       ---------------------------------------------------\n       | 地址(1) | 功能码(1) | 块序号(2) | 数据块(512) | CRC16(2)    |\n       --------------------------------------------------- */\n    QByteArray frame;\n    quint8 slaveAddr = 0x01;       // 从机地址\n    quint8 funcCode = 0x06;        // 自定义写操作\n    \n    // 帧头\n    frame.append(slaveAddr);\n    frame.append(funcCode);\n\n    // 块序号\n    frame.append(bankNum >> 8);\n    frame.append(bankNum & 0xFF);\n    \n    // 数据块（固定512字节）\n    if(data.size() < 512){\n        frame.append(data);\n        frame.append(QByteArray(512 - data.size(), 0xFF)); // 填充\n    } else {\n        frame.append(data.left(512));\n    }\n    \n    // CRC校验\n    quint16 crc = calculateCRC(frame);\n    frame.append(quint8(crc & 0xFF));\n    frame.append(quint8((crc >> 8) & 0xFF));\n    return frame;\n}\n```\n\n### 2. CRC校验实现\n```cpp\nquint16 ModbusMaster::calculateCRC(const QByteArray &data)\n{\n    quint16 crc = 0xFFFF;\n    for (char byte : data) {\n        crc ^= (quint8)byte;\n        for (int i = 0; i < 8; ++i) {\n            if (crc & 0x0001) {\n                crc = (crc >> 1) ^ 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }                                                         \n    return crc;\n}\n```\n\n### 3. 响应处理状态机\n```cpp\nvoid ModbusMaster::handleReadyRead()\n{\n    QByteArray response = serial.readAll();\n    \n    // 验证CRC\n    quint16 receivedCRC = (quint8)response.at(response.size()-2) << 8 \n                        | (quint8)response.at(response.size()-1);\n    quint16 calculatedCRC = calculateCRC(response.left(response.size()-2));\n    \n    if(receivedCRC != calculatedCRC) {\n        qWarning() << \"CRC校验失败\";\n        return;\n    }\n\n    // 解析功能码\n    quint8 functionCode = (quint8)response[1];\n    switch(functionCode) {\n    case 0x10: // 写寄存器响应\n        handleWriteResponse(response);\n        break;\n    case 0x03: // 读寄存器响应\n        handleReadResponse(response);\n        break;\n    default:\n        qWarning() << \"未知功能码:\" << functionCode;\n    }\n}\n```\n\n## 五、升级流程控制\n```mermaid\nsequenceDiagram\n    participant 上位机\n    participant 下位机\n    \n    上位机->>下位机: 发送身份验证（挑战-响应）\n    activate 下位机\n    下位机-->>上位机: 返回响应数据+状态\n    deactivate 下位机\n    \n    上位机->>下位机: 写0x00F0进入Bootloader\n    下位机-->>上位机: 操作成功响应(0x00F0 0x0001)\n    \n    上位机->>下位机: 读0x00F0确认状态\n    下位机-->>上位机: 返回当前模式(0x0001)\n    \n    上位机->>下位机: 读0x00F1（固件版本）\n    下位机-->>上位机: 返回版本号\n    上位机->>上位机: 验证版本兼容性\n    \n    alt 版本验证通过\n        上位机->>下位机: 写0x00F2总块数\n        下位机-->>上位机: 确认接收块数\n        \n        loop 数据块传输\n            上位机->>下位机: 写0x00F3发送数据块(n)\n            下位机-->>上位机: 确认接收或错误码\n            alt 传输失败\n                上位机->>上位机: 指数退避重试(最多3次)\n            end\n        end\n        \n        上位机->>下位机: 读0x00F4全局CRC\n        下位机-->>上位机: 返回计算后的CRC\n        \n        alt CRC匹配\n\t\t\t\t\t\t上位机->>下位机: 写0x00F1（固件版本）\n\t\t\t\t    下位机-->>上位机: 返回新版本号\n            上位机->>下位机: 写0x00F0返回APP模式\n            下位机-->>上位机: 操作成功响应\n        else CRC不匹配\n            上位机->>上位机: 触发错误处理流程\n        end\n        \n    else 版本验证失败\n        上位机->>下位机: 写0x00F0返回APP模式\n        下位机-->>上位机: 模式切换确认\n        上位机->>上位机: 记录错误日志并终止\n    end\n```\n\n### 1. 状态转移流程\n```mermaid\nstateDiagram-v2\n    [*] --> Idle\n    Idle --> EnterBootloader: 开始升级\n    EnterBootloader --> SendMetadata: 收到ACK\n    SendMetadata --> TransferData: 收到ACK\n    TransferData --> TransferData: 发送下一块\n    TransferData --> Finalize: 最后一块完成\n    Finalize --> [*]: 收到最终确认\n```\n\n### 2. 错误处理机制\n| 错误类型 | 处理方式 |\n| --- | --- |\n| CRC校验失败 | 自动重发当前数据块（最多3次） |\n| 超时无响应 | 自动重发当前数据块（最多3次） |\n| 版本不匹配 | 终止升级并提示错误 |\n| Flash写入失败 | 记录错误地址并尝试续传 |\n\n\n## 六、下位机响应规范\n### 1. 成功响应格式\n```plain\n01 06 00F3 0001 XXXX (CRC)\n```\n\n+ 第1字节：从机地址\n+ 第2字节：功能码\n+ 第3-4字节：写入地址\n+ 第5-6字节：成功写入的bank号\n+ 最后2字节：CRC校验\n\n### 2. 错误响应格式\n```plain\n01 90 04 XXXX (CRC)\n```\n\n+ 第2字节：功能码+0x80\n+ 第3字节：错误代码\n    - 0x01: 非法功能\n    - 0x02: 非法地址\n    - 0x03: 数据值错误\n    - 0x04: 设备忙\n\n#### <font style=\"color:rgb(64, 64, 64);\">2.2 自定义Bootloader异常码</font>\n| **异常码** | **名称** | **触发场景** | **建议处理方式** |\n| --- | --- | --- | --- |\n| <font style=\"color:rgb(64, 64, 64);\">0x11</font> | <font style=\"color:rgb(64, 64, 64);\">CRC Check Failed</font> | <font style=\"color:rgb(64, 64, 64);\">数据块CRC校验失败</font> | <font style=\"color:rgb(64, 64, 64);\">自动重传（最多3次）</font> |\n| <font style=\"color:rgb(64, 64, 64);\">0x12</font> | <font style=\"color:rgb(64, 64, 64);\">Flash Write Error</font> | <font style=\"color:rgb(64, 64, 64);\">Flash编程失败</font> | <font style=\"color:rgb(64, 64, 64);\">记录错误地址块，尝试续传</font> |\n| <font style=\"color:rgb(64, 64, 64);\">0x13</font> | <font style=\"color:rgb(64, 64, 64);\">Device Busy</font> | <font style=\"color:rgb(64, 64, 64);\">设备处理忙状态</font> | <font style=\"color:rgb(64, 64, 64);\">指数退避重试（最大5次）</font> |\n| <font style=\"color:rgb(64, 64, 64);\">0x14</font> | <font style=\"color:rgb(64, 64, 64);\">Auth Failed</font> | <font style=\"color:rgb(64, 64, 64);\">身份验证失败</font> | <font style=\"color:rgb(64, 64, 64);\">终止并触发安全锁定</font> |\n\n\n---\n\n# 注意事项\n1. **Hex文件解析**：实际项目需实现完整的HEX或bin格式解析\n2. **内存对齐**：确保数据块地址符合Flash页对齐要求\n3. **CRC校验**：必须在下位机端同步实现相同算法\n4. **超时时间**：根据实际硬件性能调整（3-5秒）\n5. **固件验证**：升级完成后建议执行整体CRC校验\n\n\n\n","tags":["嵌入式","C语言","笔记","单片机","bootloader"],"categories":["嵌入式"]},{"title":"ROS学习","url":"/2024/03/22/ROS学习/","content":"\n1、工作空间\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">工作空间</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">所以工作空间是一个存放项目开发相关文件的文件夹，也是</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">开发过程中存放所有资料的大本营</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。</font>\n\n![](/images/posts/ROS学习/1.png)\n\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">src，代码空间</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">，未来编写的代码、脚本，都需要人为的放置到这里；</font>\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">build，编译空间</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">，保存编译过程中产生的中间文件；</font>\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">install，安装空间</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">，放置编译得到的可执行文件和脚本；</font>\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">log，日志空间</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">，编译和运行过程中，保存各种警告、错误、信息等日志。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。</font>\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">创建工作空间</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码：</font>\n\n\n\n```plain\n$ mkdir -p ~/dev_ws/src\n$ cd ~/dev_ws/src\n$ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git\n```\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">自动安装依赖</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装：</font>\n\n\n\n```plain\n$ sudo apt install -y python3-pip\n$ sudo pip3 install rosdepc\n$ sudo rosdepc init\n$ rosdepc update\n$ cd ..\n$ rosdepc install -i --from-path src --rosdistro humble -y\n```\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">编译工作空间</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误：</font>\n\n\n\n```plain\n$ sudo apt install python3-colcon-ros\n$ cd ~/dev_ws/\n$ colcon build\n```\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。</font>\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">创建功能包</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">如何在ROS2中创建一个功能包呢？我们可以使用这个指令：</font>\n\n\n\n```plain\n$ ros2 pkg create --build-type <build-type> <package_name>\n```\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">ros2命令中：</font>\n\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">pkg</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">：表示功能包相关的功能；</font>\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">create</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">：表示创建功能包；</font>\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">build-type</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python；</font>\n+ **<font style=\"color:rgba(0, 0, 0, 0.87);\">package_name</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">：新建功能包的名字。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">比如在终端中分别创建C++和Python版本的功能包：</font>\n\n\n\n```plain\n$ cd ~/dev_ws/src\n$ ros2 pkg create --build-type ament_cmake learning_pkg_c               # C++\n$ ros2 pkg create --build-type ament_python learning_pkg_python # Python\n```\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">编译功能包</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行：</font>\n\n\n\n```plain\n$ cd ~/dev_ws\n$ colcon build   # 编译工作空间所有功能包\n$ source install/local_setup.bash\n```\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">功能包的结构</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。</font>\n\n### **<font style=\"color:rgba(0, 0, 0, 0.87);\">C++功能包</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">首先看下C++类型的功能包，其中必然存在两个文件：</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">package.xml</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">和</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">CMakerLists.txt</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">。</font>\n\n![](/images/posts/ROS学习/2.png)\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。</font>\n\n![](/images/posts/ROS学习/3.png)\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。</font>\n\n![](/images/posts/ROS学习/4.png)\n\n### **<font style=\"color:rgba(0, 0, 0, 0.87);\">Python功能包</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件：</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">package.xml</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">和</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">setup.py</font>**<font style=\"color:rgba(0, 0, 0, 0.87);\">。</font>\n\n![](/images/posts/ROS学习/5.png)\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。</font>\n\n![](/images/posts/ROS学习/6.png)\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。</font>\n\n![](/images/posts/ROS学习/7.png)\n\n## **<font style=\"color:rgba(0, 0, 0, 0.87);\">Hello World节点（面向过程）</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。</font>\n\n### **<font style=\"color:rgba(0, 0, 0, 0.87);\">运行效果</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。</font>\n\n\n\n```plain\n$ ros2 run learning_node node_helloworld\n```\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。</font>\n\n![](/images/posts/ROS学习/8.png)\n\n### **<font style=\"color:rgba(0, 0, 0, 0.87);\">代码解析</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">这个节点是如何实现的呢？我们来看下代码。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">learning_node/node_helloworld.py</font>\n\n```python\n#!/usr/bin/env python3 \n# -*- coding: utf-8 -*-\n\n\"\"\"\n@作者: 古月居(www.guyuehome.com)\n@说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式\n\"\"\"\n\nimport rclpy                                   # ROS2 Python接口库\nfrom rclpy.node import Node                    # ROS2 节点类\nimport time\n\ndef main(args=None):                           # ROS2节点主入口main函数\n    rclpy.init(args=args)                      # ROS2 Python接口初始化\n    node = Node(\"node_helloworld\")             # 创建ROS2节点对象并进行初始化\n\n    while rclpy.ok():                          # ROS2系统是否正常运行\n        node.get_logger().info(\"Hello World\")  # ROS2日志输出\n        time.sleep(0.5)                        # 休眠控制循环时间\n\n    node.destroy_node()                        # 销毁节点对象    \n    rclpy.shutdown()                           # 关闭ROS2 Python接口\n```\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置：</font>\n\n```json\n entry_points={\n        'console_scripts': [\n         'node_helloworld       = learning_node.node_helloworld:main',\n        ],\n```\n\n### **<font style=\"color:rgba(0, 0, 0, 0.87);\">创建节点流程</font>**\n<font style=\"color:rgba(0, 0, 0, 0.87);\">代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">总结一下，想要实现一个节点，代码的实现流程是这样做：</font>\n\n+ <font style=\"color:rgba(0, 0, 0, 0.87);\">编程接口初始化</font>\n+ <font style=\"color:rgba(0, 0, 0, 0.87);\">创建节点并初始化</font>\n+ <font style=\"color:rgba(0, 0, 0, 0.87);\">实现节点功能</font>\n+ <font style=\"color:rgba(0, 0, 0, 0.87);\">销毁节点并关闭接口</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\">大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。</font>\n\n<font style=\"color:rgba(0, 0, 0, 0.87);\"></font>\n\n{% externalLinkCard \"\" \"https://www.f123.club/\" \"https://www.f123.club/wp-content/uploads/2021/08/UN77_C6SA5GU39GBAWJ.png\" %}\n\n{% heatMapCard %}\n\n{% tagRoulette \"记忆衰退,表达欲丧失,更加怠惰,无感,好想睡觉\" \"🕹️\" %}","tags":["嵌入式","C语言","笔记","python","linux","ros"],"categories":["嵌入式"]},{"title":"QML Fluid Element 动态元素","url":"/2024/03/22/QML_Fluid_Element动态元素/","content":"\n**<font style=\"color:rgb(51, 51, 51);\">这章的源代码能够在</font>**[assetts folder](http://qmlbook.org/assets)**<font style=\"color:rgb(51, 51, 51);\">找到。</font>**\n\n<font style=\"color:rgb(51, 51, 51);\">这一章介绍如何控制属性值的变化，通过动画的方式在一段时间内来改变属性值。这项技术是建立一个现代化的平滑界面的基础，通过使用状态和过渡来扩展你的用户界面。每一种状态定义了属性的改变，与动画联系起来的状态改变称作过渡。</font>\n\n# <font style=\"color:rgb(51, 51, 51);\">动画（Animations）</font>\n<font style=\"color:rgb(51, 51, 51);\">动画被用于属性的改变。一个动画定义了属性值改变的曲线，将一个属性值变化从一个值过渡到另一个值。动画是由一连串的目标属性活动定义的，平缓的曲线算法能够引发一个定义时间内属性的持续变化。所有在QtQuick中的动画都由同一个计时器来控制，因此它们始终都保持同步，这也提高了动画的性能和显示效果。</font>\n\n**<font style=\"color:rgb(51, 51, 51);\">注意</font>**\n\n**<font style=\"color:rgb(51, 51, 51);\">动画控制了属性的改变，也就是值的插入。这是一个基本的概念，QML是基于元素，属性与脚本的。每一个元素都提供了许多的属性，每一个属性都在等待使用动画。在这本书中你将会看到这是一个壮阔的场景，你会发现你自己在看一些动画时欣赏它们的美丽并且肯定自己的创造性想法。然后请记住：动画控制了属性的改变，每个元素都有大量的属性供你任意使用。</font>**\n\n```python\n// animation.qml\n\nimport QtQuick 2.5\n\nImage {\n    id: root\n    source: \"assets/background.png\"\n\n    property int padding: 40\n    property int duration: 4000\n    property bool running: false\n\n    Image {\n        id: box\n        x: root.padding;\n        y: (root.height-height)/2\n        source: \"assets/box_green.png\"\n\n        NumberAnimation on x {\n            to: root.width - box.width - root.padding\n            duration: root.duration\n            running: root.running\n        }\n        RotationAnimation on rotation {\n            to: 360\n            duration: root.duration\n            running: root.running\n        }\n    }\n\n    MouseArea {\n        anchors.fill: parent\n        onClicked: root.running = true\n    }\n\n}\n```\n\n<font style=\"color:rgb(51, 51, 51);\">上面的示例显示了应用于 and 属性的简单动画。每个动画的持续时间为 4000 毫秒 （msec），并永远循环。x 上的动画将 x 坐标从对象逐渐移动到 240px。旋转动画从当前角度运行到 360 度。这两个动画并行运行，并在加载 UI 后鼠标点击后立即启动。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">现在你可以通过to属性和duration属性来实现动画效果。或者你可以在opacity或者scale上添加动画作为例子，集成这两个参数，你可以实现火箭逐渐消失在太空中，试试吧!</font>\n\n```python\n            PropertyAnimation on opacity {\n                to: 0\n                duration: root.duration\n                running: root.running\n            }\n```\n\n### <font style=\"color:rgb(51, 51, 51);\">动画元素（Animation Elements）</font>\n<font style=\"color:rgb(51, 51, 51);\">有几种类型的动画，每一种都在特定情况下都有最佳的效果，下面列出了一些常用的动画：</font>\n\n+ <font style=\"color:rgb(51, 51, 51);\">PropertyAnimation（属性动画）- 使用属性值改变播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">NumberAnimation（数字动画）- 使用数字改变播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">ColorAnimation（颜色动画）- 使用颜色改变播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">RotationAnimation（旋转动画）- 使用旋转改变播放的动画</font>\n\n<font style=\"color:rgb(51, 51, 51);\">除了上面这些基本和通常使用的动画元素，QtQuick还提供了一切特殊场景下使用的动画：</font>\n\n+ <font style=\"color:rgb(51, 51, 51);\">PauseAnimation（停止动画）- 运行暂停一个动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">SequentialAnimation（顺序动画）- 允许动画有序播放</font>\n+ <font style=\"color:rgb(51, 51, 51);\">ParallelAnimation（并行动画）- 允许动画同时播放</font>\n+ <font style=\"color:rgb(51, 51, 51);\">AnchorAnimation（锚定动画）- 使用锚定改变播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">ParentAnimation（父元素动画）- 使用父对象改变播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">SmotthedAnimation（平滑动画）- 跟踪一个平滑值播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">SpringAnimation（弹簧动画）- 跟踪一个弹簧变换的值播放的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">PathAnimation（路径动画）- 跟踪一个元素对象的路径的动画</font>\n+ <font style=\"color:rgb(51, 51, 51);\">Vector3dAnimation（3D容器动画）- 使用QVector3d值改变播放的动画</font>\n\n<font style=\"color:rgb(51, 51, 51);\">我们将在后面学习怎样创建一连串的动画。当使用更加复杂的动画时，我们可能需要在播放一个动画时中改变一个属性或者运行一个脚本。对于这个问题，QtQuick提供了一个动作元素：</font>\n\n+ <font style=\"color:rgb(51, 51, 51);\">PropertyAction（属性动作）- 在播放动画时改变属性</font>\n+ <font style=\"color:rgb(51, 51, 51);\">ScriptAction（脚本动作）- 在播放动画时运行脚本</font>\n\n<font style=\"color:rgb(51, 51, 51);\">在这一章中我们将会使用一些小的例子来讨论大多数类型的动画。</font>\n\n### <font style=\"color:rgb(51, 51, 51);\">应用动画（Applying Animations）</font>\n<font style=\"color:rgb(51, 51, 51);\">动画可以通过以下几种方式来应用：</font>\n\n+ <font style=\"color:rgb(51, 51, 51);\">属性动画 - 在元素完整加载后自动运行</font>\n+ <font style=\"color:rgb(51, 51, 51);\">属性动作 - 当属性值改变时自动运行</font>\n+ <font style=\"color:rgb(51, 51, 51);\">独立运行动画 - 使用start()函数明确指定运行或者running属性被设置为true（比如通过属性绑定）</font>\n\n<font style=\"color:rgb(51, 51, 51);\">后面我们会谈论如何在状态变换时播放动画。</font>\n\n```plain\nItem {\n    id: root\n    width: container.childrenRect.width\n    height: container.childrenRect.height\n    property alias text: label.text\n    property alias source: image.source\n    signal clicked\n\n    Column {\n        id: container\n        Image {\n            id: image\n        }\n        Text {\n            id: label\n            width: image.width\n            horizontalAlignment: Text.AlignHCenter\n            wrapMode: Text.WordWrap\n            color: \"#ececec\"\n        }\n    }\n\n    MouseArea {\n        anchors.fill: parent\n        onClicked: root.clicked()\n    }\n}\n```\n\n<font style=\"color:rgb(51, 51, 51);\">为了给图片下面的元素定位，我们使用了Column（列）定位器，并且使用基于列的子矩形（childRect）属性来计算它的宽度和高度（width and height）。我们导出了文本（text）和图形源（source）属性，一个点击信号（clicked signal）。我们使用文本元素的wrapMode属性来设置文本与图像一样宽并且可以自动换行。</font>\n\n**<font style=\"color:rgb(51, 51, 51);\">对象升序。</font>**\n\n<font style=\"color:rgb(51, 51, 51);\">这三个对象都位于相同的 y 位置 （）。他们需要全部前往.他们每个人都使用不同的方法，具有不同的副作用和功能。</font><font style=\"color:rgb(199, 37, 78);\">y=200y=40</font>\n\n```python\n ClickableImageV2 {\n        id: greenBox\n        x: 40; y: root.height-height\n        source: \"assets/box_green.png\"\n        text: \"animation on property\"\n        NumberAnimation on y {\n            to: 40; duration: 4000\n        }\n    }\n```\n\n**<font style=\"color:rgb(51, 51, 51);\">第一个对象</font>**\n\n<font style=\"color:rgb(51, 51, 51);\">第一个火箭使用了Animation on 属性变化的策略来完成。动画会在加载完成后立即播放。点击火箭可以重置它回到开始的位置。在动画播放时重置第一个火箭不会有任何影响。在动画开始前的几分之一秒设置一个新的y轴坐标让人感觉挺不安全的，应当避免这样的属性值竞争的变化。</font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n```python\n    ClickableImageV2 {\n        id: blueBox\n        x: (root.width-width)/2; y: root.height-height\n        source: \"assets/box_blue.png\"\n        text: \"behavior on property\"\n        Behavior on y {\n            NumberAnimation { duration: 4000 }\n        }\n\n        onClicked: y = 40\n        // random y on each click\n//        onClicked: y = 40+Math.random()*(205-40)\n    }\n```\n\n**<font style=\"color:rgb(51, 51, 51);\">第二个对象</font>**\n\n<font style=\"color:rgb(51, 51, 51);\"></font><font style=\"color:rgb(51, 51, 51);\">第二个火箭使用了behavior on 属性行为策略的动画。这个行为告诉属性值每时每刻都在变化，通过动画的方式来改变这个值。可以使用行为元素的enabled : false来设置行为失效。当你点击这个火箭时它将会开始运行（y轴坐标逐渐移至40）。然后其它的点击对于位置的改变没有任何的影响。你可以试着使用一个随机值（例如 40+(Math.random()*(205-40)）来设置y轴坐标。你可以发现动画始终会将移动到新位置的时间匹配在4秒内完成。</font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n```python\n ClickableImageV2 {\n        id: redBox\n        x: root.width-width-40; y: root.height-height\n        source: \"assets/box_red.png\"\n        onClicked: anim.start()\n//        onClicked: anim.restart()\n\n        text: \"standalone animation\"\n\n        NumberAnimation {\n            id: anim\n            target: redBox\n            properties: \"y\"\n            to: 40\n            duration: 4000\n        }\n    }\n```\n\n**<font style=\"color:rgb(51, 51, 51);\">第三个对象</font>**\n\n<font style=\"color:rgb(51, 51, 51);\">第三个火箭使用standalone animation独立动画策略。这个动画由一个私有的元素定义并且可以写在文档的任何地方。点击火箭调用动画函数start()来启动动画。每一个动画都有start()，stop()，resume()，restart()函数。这个动画自身可以比其他类型的动画更早的获取到更多的相关信息。我们只需要定义目标和目标元素的属性需要怎样改变的一个动画。我们定义一个to属性的值，在这个例子中我们也定义了一个from属性的值允许动画可以重复运行。</font>\n\n**<font style=\"color:rgb(51, 51, 51);\">另一个启动/停止一个动画的方法是绑定一个动画的running属性。当需要用户输入控制属性时这种方法非常有用：</font>**\n\n```python\n NumberAnimation {\n        ...\n        // animation runs when mouse is pressed\n        running: area.pressed\n    }\n    MouseArea {\n        id: area\n    }\n```\n\n## <font style=\"color:rgb(51, 51, 51);\">缓冲曲线（Easing Curves）</font>\n<font style=\"color:rgb(51, 51, 51);\">属性值的改变能够通过一个动画来控制，缓冲曲线属性影响了一个属性值改变的插值算法。我们现在已经定义的动画都使用了一种线性的插值算法，因为一个动画的默认缓冲类型是Easing.Linear。在一个小场景下的x轴与y轴坐标改变可以得到最好的视觉效果。一个线性插值算法将会在动画开始时使用from的值到动画结束时使用的to值绘制一条直线，所以缓冲类型定义了曲线的变化情况。精心为一个移动的对象挑选一个合适的缓冲类型将会使界面更加自然，例如一个页面的滑出，最初使用缓慢的速度滑出，然后在最后滑出时使用高速滑出，类似翻书一样的效果。</font>\n\n![](https://cdn.nlark.com/yuque/0/2024/png/33668333/1709691245443-36428021-3abc-43aa-b0dc-6641f71a156c.png)\n\n**<font style=\"color:rgb(51, 51, 51);\">注意：不要过度的使用动画。用户界面动画的设计应该尽量小心，动画是让界面更加生动而不是充满整个界面。眼睛对于移动的东西非常敏感，很容易干扰用户的使用。</font>**\n\n**<font style=\"color:rgb(51, 51, 51);\"></font>**\n\n<font style=\"color:rgb(51, 51, 51);\">在下面的例子中我们将会使用不同的缓冲曲线，每一种缓冲曲线都都使用了一个可点击图片来展示，点击将会在动画中设置一个新的缓冲类型并且使用这种曲线重新启动动画。</font>\n\n```python\n// EasingCurves.qml\n\nimport QtQuick 2.5\nimport QtQuick.Layouts 1.2\n\nRectangle {\n    id: root\n    width: childrenRect.width\n    height: childrenRect.height\n\n    color: '#4a4a4a'\n    gradient: Gradient {\n        GradientStop { position: 0.0; color: root.color }\n        GradientStop { position: 1.0; color: Qt.lighter(root.color, 1.2) }\n    }\n\n    ColumnLayout {\n\n        Grid {\n            spacing: 8\n            columns: 5\n            EasingType {\n                easingType: Easing.Linear\n                title: 'Linear'\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InExpo\n                title: \"InExpo\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.OutExpo\n                title: \"OutExpo\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InOutExpo\n                title: \"InOutExpo\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InOutCubic\n                title: \"InOutCubic\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.SineCurve\n                title: \"SineCurve\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InOutCirc\n                title: \"InOutCirc\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InOutElastic\n                title: \"InOutElastic\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InOutBack\n                title: \"InOutBack\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n            EasingType {\n                easingType: Easing.InOutBounce\n                title: \"InOutBounce\"\n                onClicked: {\n                    animation.easing.type = easingType\n                    box.toggle = !box.toggle\n                }\n            }\n        }\n        Item {\n            height: 80\n            Layout.fillWidth: true\n            Box {\n                id: box\n                property bool toggle\n                x: toggle?20:root.width-width-20\n                anchors.verticalCenter: parent.verticalCenter\n                gradient: Gradient {\n                    GradientStop { position: 0.0; color: \"#2ed5fa\" }\n                    GradientStop { position: 1.0; color: \"#2467ec\" }\n                }\n                Behavior on x {\n                    NumberAnimation {\n                        id: animation\n                        duration: 500\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## <font style=\"color:rgb(51, 51, 51);\">动画分组（Grouped Animations）</font>\n<font style=\"color:rgb(51, 51, 51);\">通常使用的动画比一个属性的动画更加复杂。例如你想同时运行几个动画并把他们连接起来，或者在一个一个的运行，或者在两个动画之间执行一个脚本。动画分组提供了很好的帮助，作为命名建议可以叫做一组动画。有两种方法来分组：平行与连续。你可以使用SequentialAnimation（连续动画）和ParallelAnimation（平行动画）来实现它们，它们作为动画的容器来包含其它的动画元素。</font>\n\n![](https://cdn.nlark.com/yuque/0/2024/png/33668333/1709693400013-21b78616-019c-43cc-a4bf-b678236c0aca.png)\n\n```python\n    BrightSquare {\n        id: root\n        width: 300\n        height: 200\n        property int duration: 3000\n        ClickableImageV3 {\n            id: rocket\n            x: 20; y: 120\n            source: \"images/rocket2.png\"\n            onClicked: anim.restart()\n        }\n        ParallelAnimation {\n            id: anim\n            NumberAnimation {\n                target: rocket\n                properties: \"y\"\n                to: 20\n                duration: root.duration\n                easing.type:Easing.OutExpo\n            }\n            NumberAnimation {\n                target: rocket\n                properties: \"x\"\n                to: 160\n                duration: root.duration\n            }\n        }\n    }\n\n}\n```\n\n<font style=\"color:rgb(51, 51, 51);\">一个连续的动画将会一个一个的运行子动画。</font>\n\n```python\nimport QtQuick 2.0\nBrightSquare {\n    id: root\n    width: 300\n    height: 200\n    property int duration: 3000\n    ClickableImageV3 {\n        id: rocket\n        x: 20; y: 120\n        source: \"assets/rocket2.png\"\n        onClicked: anim.restart()\n    }\n    SequentialAnimation {\n        id: anim\n        NumberAnimation {\n            target: rocket\n            properties: \"y\"\n            to: 20\n            // 60% of time to travel up\n            duration: root.duration*0.6\n        }\n        NumberAnimation {\n            target: rocket\n            properties: \"x\"\n            to: 160\n            // 40% of time to travel sideways\n            duration: root.duration*0.4\n        }\n    }\n}\n```\n\n<font style=\"color:rgb(51, 51, 51);\">分组动画也可以被嵌套，例如一个连续动画可以拥有两个平行动画作为子动画。我们来看看这个足球的例子。这个动画描述了一个从左向右扔一个球的行为：</font>\n\n![](https://cdn.nlark.com/yuque/0/2024/png/33668333/1709693973021-accb3bf7-e016-4374-b801-b4a3e1475320.png)\n\n<font style=\"color:rgb(51, 51, 51);\">要弄明白这个动画我们需要剖析这个目标的运动过程。我们需要记住这个动画是通过属性变化来实现的动画，下面是不同部分的转换：</font>\n\n+ <font style=\"color:rgb(51, 51, 51);\">从左向右的x坐标转换（X1）。</font>\n+ <font style=\"color:rgb(51, 51, 51);\">从下往上的y坐标转换（Y1）然后跟着一个从上往下的Y坐标转换（Y2）。</font>\n+ <font style=\"color:rgb(51, 51, 51);\">整个动画过程中360度旋转。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">这个动画将会花掉3秒钟的时间。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">我们使用一个空的基本元素对象（Item）作为根元素，它的宽度为480，高度为300。</font>\n\n```python\nimport QtQuick 1.1\nItem {\n    id: root\n    width: 480\n    height: 300\n    property int duration: 3000\n    ...\n}\n```\n\n<font style=\"color:rgb(51, 51, 51);\">我们定义动画的总持续时间作为参考，以便更好的同步各部分的动画。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">下一步我们需需要添加一个背景，在我们这个例子中有两个矩形框分别使用了绿色渐变和蓝色渐变填充。</font>\n\n```python\n Rectangle {\n        id: sky\n        width: parent.width\n        height: 200\n        gradient: Gradient {\n            GradientStop { position: 0.0; color: \"#0080FF\" }\n            GradientStop { position: 1.0; color: \"#66CCFF\" }\n        }\n    }\n    Rectangle {\n        id: ground\n        anchors.top: sky.bottom\n        anchors.bottom: root.bottom\n        width: parent.width\n        gradient: Gradient {\n            GradientStop { position: 0.0; color: \"#00FF00\" }\n            GradientStop { position: 1.0; color: \"#00803F\" }\n        }\n    }\n```\n\n<font style=\"color:rgb(51, 51, 51);\">上面部分的蓝色区域高度为200像素，下面部分的区域使用上面的蓝色区域的底作为锚定的顶，使用根元素的底作为底。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">让我们将足球加入到屏幕上，足球是一个图片，位于路径“images/soccer_ball.png”。首先我们需要将它放置在左下角接近边界处。</font>\n\n```python\n Image {\n        id: ball\n        x: 20; y: 240\n        source: \"assets/soccer_ball.png\"\n        MouseArea {\n            anchors.fill: parent\n            onClicked: {\n                ball.x = 20; ball.y = 240\n                anim.restart()\n            }\n        }\n    }\n```\n\n<font style=\"color:rgb(51, 51, 51);\">图片与鼠标区域连接，点击球将会重置球的状态，并且动画重新开始。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">首先使用一个连续的动画来播放两次的y轴变换和一次x轴。</font>\n\n```python\nParallelAnimation{\n               id: anim\n               SequentialAnimation {\n\n                       NumberAnimation {\n                           target: ball\n                           properties: \"y\"\n                           to: 20\n                           duration: root.duration * 0.6\n                           easing.type:Easing.OutQuad\n                       }\n                       NumberAnimation {\n                           target: ball\n                           properties: \"y\"\n                           to: 240\n                           duration: root.duration * 0.4\n                           easing.type:Easing.InCubic\n                       }\n                   }\n               NumberAnimation { // X1 animation\n                          target: ball\n                          properties: \"x\"\n                          to: 400\n                          duration: root.duration\n                      }\n           }\n```\n\n<font style=\"color:rgb(51, 51, 51);\">在动画总时间的40%的时间里完成上升部分，在动画总时间的60%的时间里完成下降部分，一个动画完成后播放下一个动画。目前还没有使用任何缓冲曲线。缓冲曲线将在后面使用easing curves来添加，现在我们只关心如何使用动画来完成过渡。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">现在我们需要添加x轴坐标转换。x轴坐标转换需要与y轴坐标转换同时进行，所以我们需要将y轴坐标转换的连续动画和x轴坐标转换一起压缩进一个平行动画中。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">最后我们想要旋转这个球，我们需要向平行动画中添加一个新的动画，我们选择RotationAnimation来实现旋转。</font>\n\n```python\n ParallelAnimation {\n        id: anim\n        SequentialAnimation {\n            // ... our Y1, Y2 animation\n        }\n        NumberAnimation { // X1 animation\n            // X1 animation\n        }\n        RotationAnimation {\n            target: ball\n            properties: \"rotation\"\n            to: 720\n            duration: root.duration\n        }\n    }\n```\n\n<font style=\"color:rgb(51, 51, 51);\">我们已经完成了整个动画链表，然后我们需要给动画提供一个正确的缓冲曲线来描述一个移动的球。对于Y1动画我们使用Easing.OutQuad缓冲曲线，它看起来更像是一个圆周运动。Y2使用了Easing.InCubic缓冲曲线，因为在最后球会发生反弹。（试试使用Easing.InBounce，你会发现反弹将会立刻开始。）。X1和ROT1动画都使用线性曲线。</font>\n\n```python\n   Item {\n        id: root\n        width: 480\n        height: 300\n        property int duration: 3000\n        Rectangle {\n               id: sky\n               width: parent.width\n               height: 200\n               gradient: Gradient {\n                   GradientStop { position: 0.0; color: \"#0080FF\" }\n                   GradientStop { position: 1.0; color: \"#66CCFF\" }\n               }\n           }\n           Rectangle {\n               id: ground\n               anchors.top: sky.bottom\n               anchors.bottom: root.bottom\n               width: parent.width\n               gradient: Gradient {\n                   GradientStop { position: 0.0; color: \"#00FF00\" }\n                   GradientStop { position: 1.0; color: \"#00803F\" }\n               }\n           }\n           Image {\n                  id: ball\n                  x: 20; y: 240\n                  source: \"images/soccer_ball.png\"\n                  MouseArea {\n                      anchors.fill: parent\n                      onClicked: {\n                          ball.x = 20; ball.y = 240 ;ball.rotation = 0\n                          anim.restart()\n                      }\n                  }\n              }\n           ParallelAnimation{\n               id: anim\n               SequentialAnimation {\n\n                       NumberAnimation {\n                           target: ball\n                           properties: \"y\"\n                           to: 20\n                           duration: root.duration * 0.6\n                           easing.type:Easing.OutQuad\n                       }\n                       NumberAnimation {\n                           target: ball\n                           properties: \"y\"\n                           to: 240\n                           duration: root.duration * 0.4\n                           easing.type:Easing.InCubic\n                       }\n                   }\n               NumberAnimation { // X1 animation\n                          target: ball\n                          properties: \"x\"\n                          to: 400\n                          duration: root.duration\n                      }\n               RotationAnimation {\n                           target: ball\n                           properties: \"rotation\"\n                           to: 720\n                           duration: root.duration\n                       }\n           }\n    }\n\n```\n\n# <font style=\"color:rgb(51, 51, 51);\">状态与过渡（States and Transitions）</font>\n<font style=\"color:rgb(51, 51, 51);\">通常我们将用户界面描述为一种状态。一个状态定义了一组属性的改变，并且会在一定的条件下被触发。另外在这些状态转化的过程中可以有一个过渡，定义了这些属性的动画或者一些附加的动作。当进入一个新的状态时，动作也可以被执行。</font>\n\n## <font style=\"color:rgb(51, 51, 51);\">状态（States）</font>\n<font style=\"color:rgb(51, 51, 51);\">在QML中，使用State元素来定义状态，需要与基础元素对象（Item）的states序列属性连接。状态通过它的状态名来鉴别，由组成它的一系列简单的属性来改变元素。默认的状态在初始化元素属性时定义，并命名为“”（一个空的字符串）。</font>\n\n```python\n    Item {\n        id: root\n        states: [\n            State {\n                name: \"go\"\n                PropertyChanges { ... }\n            },\n            State {\n                name: \"stop\"\n                PropertyChanges { ... }\n            }\n        ]\n    }\n```\n\n<font style=\"color:rgb(51, 51, 51);\">状态的改变由分配一个元素新的状态属性名来完成。</font>\n\n**<font style=\"color:rgb(51, 51, 51);\">注意</font>**\n\n**<font style=\"color:rgb(51, 51, 51);\">另一种切换属性的方法是使用状态元素的when属性。when属性能够被设置为一个表达式的结果，当结果为true时，状态被使用</font>**<font style=\"color:rgb(51, 51, 51);\">。</font>\n\n```python\n Item {\n        id: root\n        states: [\n            ...\n        ]\n        Button {\n            id: goButton\n            ...\n            onClicked: root.state = \"go\"\n        }\n    }\n```\n\n![]()\n\n<font style=\"color:rgb(51, 51, 51);\">例如一个交通信号灯有两个信号灯。上面的一个信号灯使用红色，下面的信号灯使用绿色。在这个例子中，两个信号灯不会同时发光。让我们看看状态图。</font>\n\n![](https://cdn.nlark.com/yuque/0/2024/png/33668333/1709696409604-e3c522b7-fdc2-4fed-ac67-bb03633c0dcb.png)\n\n<font style=\"color:rgb(51, 51, 51);\">当系统启动时，它会自动切换到停止模式作为默认状态。停止状态改变了light1为红色并且light2为黑色（关闭）。一个外部的事件能够触发现在的状态变换为“go”状态。在go状态下，我们改变颜色属性，light1变为黑色（关闭），light2变为绿色。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">为了实现这个方案，我们给这两个灯绘制一个用户界面的草图，为了简单起见，我们使用两个包含园边的矩形框，设置园半径为宽度的一半（宽度与高度相同）。</font>\n\n```python\nRectangle {\n        id: light1\n        x: 25; y: 15\n        width: 100; height: width\n        radius: width/2\n        color: \"black\"\n    }\n    Rectangle {\n        id: light2\n        x: 25; y: 135\n        width: 100; height: width\n        radius: width/2\n        color: \"black\"\n    }\n```\n\n<font style=\"color:rgb(51, 51, 51);\">就像在状态图中定义的一样，我们有一个“go”状态和一个“stop”状态，它们将会分别将交通灯改变为红色和绿色。我们设置state属性到stop来确保初始化状态为stop状态。</font>\n\n```python\n    Item {\n        id: root1\n        width: 640\n        height: 480\n        //color: \"black\"\n        states: [\n            State {\n                name: \"stop\"\n                PropertyChanges {\n                    target: light1\n                    color: \"red\"\n                }\n                PropertyChanges {\n                    target: light2\n                    color: \"black\"\n                }\n            },\n            State {\n                name: \"go\"\n                PropertyChanges {\n                    target: light1\n                    color: \"black\"\n                }\n                PropertyChanges {\n                    target: light2\n                    color: \"green\"\n                }\n            }\n        ]\n        state: \"stop\"\n        Rectangle {\n            id: light1\n            x: 25\n            y: 15\n            width: 100\n            height: width\n            radius: width / 2\n            color: \"black\"\n        }\n        Rectangle {\n            id: light2\n            x: 25\n            y: 135\n            width: 100\n            height: width\n            radius: width / 2\n            color: \"black\"\n        }\n        Text {\n            x: 45\n            y: 255\n            color: \"white\"\n            text: \"红绿灯\"\n            font.pixelSize: 20\n        }\n\n        MouseArea {\n            anchors.fill: parent\n            onClicked: parent.state = (parent.state == \"stop\" ? \"go\" : \"stop\")\n        }\n    }\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/33668333/1709697650715-1ede14db-ef63-4508-aac0-dea1c1b4bb97.png)\n\n## <font style=\"color:rgb(51, 51, 51);\">过渡（Transitions）</font>\n<font style=\"color:rgb(51, 51, 51);\">一系列的过渡能够被加入任何元素，一个过渡由状态的改变触发执行。你可以使用属性的from:和to:来定义状态改变的指定过渡。这两个属性就像一个过滤器，当过滤器为true时，过渡生效。你也可以使用“</font>_<font style=\"color:rgb(51, 51, 51);\">”来表示任何状态。例如from:”</font>_<font style=\"color:rgb(51, 51, 51);\">“; to:”*”表示从任一状态到另一个任一状态的默认值，这意味着过渡用于每个状态的切换。</font>\n\n<font style=\"color:rgb(51, 51, 51);\">在这个例子中，我们期望从状态“go”到“stop”转换时实现一个颜色改变的动画。对于从“stop”到“go”状态的改变，我们期望保持颜色的直接改变，不使用过渡。我们使用from和to来限制过渡只在从“go”到“stop”时生效。在过渡中我们给每个灯添加两个颜色的动画，这个动画将按照状态的描述来改变属性。</font>\n\n```python\n transitions: [\n                Transition {\n                    from: \"stop\"; to: \"go\"\n                    ColorAnimation { target: light1; properties: \"color\"; duration: 500 }\n                    ColorAnimation { target: light2; properties: \"color\"; duration: 500 }\n                },\n                Transition {\n                    from: \"go\"; to: \"stop\"\n                    ColorAnimation { target: light1; properties: \"color\"; duration: 500 }\n                    ColorAnimation { target: light2; properties: \"color\"; duration: 500 }\n                }\n            ]\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/33668333/1709697640118-f659870b-4c97-43a0-8357-65fb884e4a31.png)\n\n<font style=\"color:rgb(51, 51, 51);\">接下来，你可以修改下这个例子，例如缩小未点亮的等来突出点亮的等。为此，你需要在状态中添加一个属性用来缩放，并且操作一个动画来播放缩放属性的过渡。另一个选择是可以添加一个“attention”状态，灯会出现黄色闪烁，为此你需要添加为这个过渡添加一个一秒连续的动画来显示黄色（使用“to”属性来实现，一秒后变为黑色）。也许你也可以改变缓冲曲线来使这个例子更加生动。</font>\n\n<font style=\"color:rgb(51, 51, 51);\"></font>\n\n","tags":["嵌入式","笔记","C++","Qt","QML"],"categories":["嵌入式"]},{"title":"恋爱倒计时","url":"/2023/09/15/longtimelove/","content":"\n{% raw %}\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>❤️ 恋爱时光 ❤️</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', 'Microsoft YaHei', sans-serif;\n        }\n        \n        /* 装饰元素 */\n        .heart, .snowflake, .star {\n            position: absolute;\n            font-size: 24px;\n            animation: float 8s infinite ease-in-out;\n            z-index: 0;\n        }\n        \n        .heart { color: rgba(255, 0, 0, 0.5); }\n        .snowflake { color: rgba(173, 216, 230, 0.7); }\n        .star { color: rgba(255, 255, 0, 0.7); }\n        \n        /* 动画 */\n        @keyframes float {\n            0% { transform: translateY(0) rotate(0deg); opacity: 0; }\n            10% { opacity: 1; }\n            90% { opacity: 1; }\n            100% { transform: translateY(-100vh) rotate(360deg); opacity: 0; }\n        }\n        \n        @keyframes twinkle {\n            0% { opacity: 0.3; transform: scale(0.8); }\n            100% { opacity: 1; transform: scale(1.2); }\n        }\n        \n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n            100% { transform: scale(1); }\n        }\n        \n        @keyframes slideIn {\n            from { transform: translateY(50px); opacity: 0; }\n            to { transform: translateY(0); opacity: 1; }\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n        \n        /* 密码保护容器 */\n        .password-container {\n            background: rgba(255, 255, 255, 0.95);\n            padding: 50px;\n            border-radius: 20px;\n            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);\n            text-align: center;\n            max-width: 500px;\n            width: 90%;\n            z-index: 10;\n            position: relative;\n            animation: slideIn 1s ease-out;\n            backdrop-filter: blur(10px);\n        }\n        \n        .password-container h1 {\n            color: #e84393;\n            margin-bottom: 25px;\n            font-size: 2.8rem;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n        }\n        \n        .password-container p {\n            color: #6c5ce7;\n            margin-bottom: 30px;\n            font-size: 1.2rem;\n            line-height: 1.6;\n        }\n        \n        .couple-names {\n            font-size: 1.8rem;\n            color: #ff6b6b;\n            font-weight: bold;\n            margin: 20px 0;\n            letter-spacing: 2px;\n        }\n        \n        .password-input {\n            position: relative;\n            margin: 30px 0;\n        }\n        \n        .password-input input {\n            width: 100%;\n            padding: 18px 20px;\n            border: 2px solid #e0e0e0;\n            border-radius: 15px;\n            font-size: 1.1rem;\n            outline: none;\n            transition: all 0.3s ease;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);\n        }\n        \n        .password-input input:focus {\n            border-color: #6c5ce7;\n            box-shadow: 0 5px 15px rgba(108, 92, 231, 0.2);\n        }\n        \n        .password-input i {\n            position: absolute;\n            right: 20px;\n            top: 50%;\n            transform: translateY(-50%);\n            color: #a29bfe;\n            cursor: pointer;\n        }\n        \n        .submit-btn {\n            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n            color: white;\n            border: none;\n            padding: 18px 40px;\n            border-radius: 15px;\n            font-size: 1.1rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n            width: 100%;\n            margin-top: 10px;\n        }\n        \n        .submit-btn:hover {\n            transform: translateY(-3px);\n            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);\n        }\n        \n        .hint {\n            margin-top: 25px;\n            color: #00b894;\n            font-size: 0.95rem;\n            font-style: italic;\n        }\n        \n        .error-message {\n            color: #ff7675;\n            margin-top: 15px;\n            font-weight: 500;\n            height: 20px;\n        }\n        \n        /* 主内容容器 */\n        .container {\n            max-width: 1200px;\n            margin: 40px auto;\n            padding: 20px;\n            background: rgba(255, 255, 255, 0.85);\n            border-radius: 20px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n            backdrop-filter: blur(10px);\n            position: relative;\n            overflow: hidden;\n            display: none;\n            animation: fadeIn 1s ease-out;\n        }\n        \n        .header {\n            text-align: center;\n            padding: 30px 20px;\n            margin-bottom: 30px;\n            position: relative;\n        }\n        \n        .header::after {\n            content: '';\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 80%;\n            height: 2px;\n            background: linear-gradient(90deg, transparent, #ff6b6b, transparent);\n        }\n        \n        .title {\n            font-size: 3.5rem;\n            margin-bottom: 15px;\n            color: #e84393;\n            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n        }\n        \n        .subtitle {\n            font-size: 1.2rem;\n            color: #6c5ce7;\n            font-weight: 500;\n        }\n        \n        .start-date {\n            font-size: 1.1rem;\n            color: #00b894;\n            margin-top: 10px;\n            font-weight: 500;\n        }\n        \n        .counter-container {\n            display: flex;\n            justify-content: center;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin: 40px 0;\n            animation: pulse 2s infinite;\n        }\n        \n        .counter-box {\n            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n            color: white;\n            border-radius: 15px;\n            padding: 20px 15px;\n            min-width: 130px;\n            text-align: center;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n        \n        .counter-box:hover {\n            transform: translateY(-10px);\n        }\n        \n        .counter-value {\n            font-size: 2.5rem;\n            font-weight: 700;\n            margin-bottom: 5px;\n            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);\n        }\n        \n        .counter-label {\n            font-size: 1rem;\n            opacity: 0.9;\n        }\n        \n        .events-section {\n            margin-top: 50px;\n            padding: 20px;\n        }\n        \n        .section-title {\n            text-align: center;\n            font-size: 2.2rem;\n            margin-bottom: 30px;\n            color: #e84393;\n            position: relative;\n            display: inline-block;\n            left: 50%;\n            transform: translateX(-50%);\n            padding: 0 20px;\n        }\n        \n        .section-title::after {\n            content: '';\n            position: absolute;\n            bottom: -10px;\n            left: 0;\n            width: 100%;\n            height: 3px;\n            background: linear-gradient(90deg, #fd79a8, #a29bfe, #55efc4);\n            border-radius: 3px;\n        }\n        \n        .lovetimeline {\n            position: relative;\n            max-width: 900px;\n            margin: 0 auto;\n            padding: 40px 0;\n        }\n        \n        .lovetimeline::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            width: 4px;\n            background: linear-gradient(to bottom, #fd79a8, #a29bfe, #55efc4);\n            left: 50%;\n            margin-left: -2px;\n            border-radius: 10px;\n        }\n        \n        .lovetimeline-item {\n            position: relative;\n            margin-bottom: 50px;\n            width: 50%;\n            animation: slideIn 0.8s ease-out;\n        }\n        \n        .lovetimeline-item:nth-child(odd) {\n            left: 0;\n            padding-right: 70px;\n            text-align: right;\n        }\n        \n        .lovetimeline-item:nth-child(even) {\n            left: 50%;\n            padding-left: 70px;\n        }\n        \n        .lovetimeline-content {\n            background: white;\n            padding: 25px;\n            border-radius: 15px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n            position: relative;\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n        \n        .lovetimeline-content:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n        }\n        \n        .lovetimeline-item:nth-child(odd) .lovetimeline-content::after {\n            content: '';\n            position: absolute;\n            top: 20px;\n            right: -15px;\n            border-style: solid;\n            border-width: 10px 0 10px 15px;\n            border-color: transparent transparent transparent white;\n        }\n        \n        .lovetimeline-item:nth-child(even) .lovetimeline-content::after {\n            content: '';\n            position: absolute;\n            top: 20px;\n            left: -15px;\n            border-style: solid;\n            border-width: 10px 15px 10px 0;\n            border-color: transparent white transparent transparent;\n        }\n        \n        .lovetimeline-date {\n            font-weight: 600;\n            color: #6c5ce7;\n            margin-bottom: 10px;\n            display: block;\n            font-size: 1.1rem;\n        }\n        \n        .lovetimeline-title {\n            font-size: 1.4rem;\n            margin-bottom: 10px;\n            color: #e84393;\n        }\n        \n        .days-after {\n            font-size: 0.95rem;\n            color: #00b894;\n            font-weight: 500;\n        }\n        \n        .icon2 {\n            position: absolute;\n            width: 50px;\n            height: 50px;\n            background: linear-gradient(135deg, #fd79a8, #a29bfe);\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 1.5rem;\n            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\n        }\n        \n        .lovetimeline-item:nth-child(odd) .icon2 {\n            right: -25px;\n            top: 0;\n        }\n        \n        .lovetimeline-item:nth-child(even) .icon2 {\n            left: -25px;\n            top: 0;\n        }\n        \n        .footer {\n            text-align: center;\n            padding: 30px;\n            margin-top: 30px;\n            color: #6c5ce7;\n            font-size: 1.1rem;\n            font-weight: 500;\n        }\n        \n        /* 响应式设计 */\n        @media (max-width: 768px) {\n            .password-container {\n                padding: 30px;\n            }\n            \n            .password-container h1 {\n                font-size: 2.2rem;\n            }\n            \n            .title {\n                font-size: 2.5rem;\n            }\n            \n            .counter-box {\n                min-width: 100px;\n                padding: 15px 10px;\n            }\n            \n            .counter-value {\n                font-size: 2rem;\n            }\n            \n            .lovetimeline::before {\n                left: 30px;\n            }\n            \n            .lovetimeline-item {\n                width: 100%;\n                padding-left: 80px !important;\n                padding-right: 20px !important;\n                left: 0 !important;\n                text-align: left !important;\n            }\n            \n            .lovetimeline-item:nth-child(even) .icon2,\n            .lovetimeline-item:nth-child(odd) .icon2 {\n                left: 5px;\n                right: auto;\n            }\n            \n            .lovetimeline-item:nth-child(even) .lovetimeline-content::after,\n            .lovetimeline-item:nth-child(odd) .lovetimeline-content::after {\n                left: -15px;\n                right: auto;\n                border-width: 10px 15px 10px 0;\n                border-color: transparent white transparent transparent;\n            }\n        }\n        \n        @media (max-width: 480px) {\n            .password-container {\n                padding: 20px;\n            }\n            \n            .password-container h1 {\n                font-size: 1.8rem;\n            }\n            \n            .couple-names {\n                font-size: 1.4rem;\n            }\n            \n            .title {\n                font-size: 2rem;\n            }\n            \n            .counter-box {\n                min-width: 80px;\n                padding: 12px 8px;\n            }\n            \n            .counter-value {\n                font-size: 1.6rem;\n            }\n            \n            .counter-label {\n                font-size: 0.85rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <!-- 密码保护界面 -->\n    <div class=\"password-container\" id=\"password-container\">\n        <h1>❤️ 恋爱时光 ❤️</h1>\n        <p>这是一份特别的恋爱记录，只属于我们两个人</p>\n        \n        <div class=\"couple-names\">\n            ❄️ 冯笑一 & 韩思宇 🌟\n        </div>\n        \n        <p>请输入密码查看我们的恋爱时光记录</p>\n        \n        <div class=\"password-input\">\n            <input type=\"password\" id=\"password\" placeholder=\"请输入我们的密码\" autocomplete=\"off\">\n            <i class=\"fas fa-lock\"></i>\n        </div>\n        \n        <button class=\"submit-btn\" onclick=\"checkPassword()\">\n            <i class=\"fas fa-heart\"></i> 进入恋爱时光\n        </button>\n        \n        <div class=\"error-message\" id=\"error-message\"></div>\n        \n        <div class=\"hint\">\n            提示：密码是(8位数字)\n        </div>\n    </div>\n    \n    <!-- 主内容容器 -->\n    <div class=\"container\" id=\"main-content\">\n        <div class=\"header\">\n            <h1 class=\"title\">❄️ 冯笑一 ❤️ 韩思宇 🌟</h1>\n            <p class=\"subtitle\">记录我们的美好时光</p>\n            <p class=\"start-date\">起始时间: 2023年9月15日</p>\n        </div>\n        \n        <div class=\"counter-container\">\n            <div class=\"counter-box\">\n                <div class=\"counter-value\" id=\"years\">0</div>\n                <div class=\"counter-label\">年</div>\n            </div>\n            <div class=\"counter-box\">\n                <div class=\"counter-value\" id=\"months\">0</div>\n                <div class=\"counter-label\">月</div>\n            </div>\n            <div class=\"counter-box\">\n                <div class=\"counter-value\" id=\"days\">0</div>\n                <div class=\"counter-label\">天</div>\n            </div>\n            <div class=\"counter-box\">\n                <div class=\"counter-value\" id=\"hours\">0</div>\n                <div class=\"counter-label\">小时</div>\n            </div>\n            <div class=\"counter-box\">\n                <div class=\"counter-value\" id=\"minutes\">0</div>\n                <div class=\"counter-label\">分钟</div>\n            </div>\n            <div class=\"counter-box\">\n                <div class=\"counter-value\" id=\"seconds\">0</div>\n                <div class=\"counter-label\">秒</div>\n            </div>\n        </div>\n        \n        <div class=\"events-section\">\n            <h2 class=\"section-title\">我们的美好回忆</h2>\n            \n            <div class=\"lovetimeline\" id=\"lovetimeline\">\n                <!-- 时间轴内容将通过JS动态生成 -->\n            </div>\n        </div>\n        \n        <div class=\"footer\">\n            ❤️ 每一天都比前一天更爱你 ❤️\n        </div>\n    </div>\n\n    <script>\n        // 创建装饰元素\n        function createDecorations() {\n            const body = document.querySelector('body');\n            const types = ['heart', 'snowflake', 'star'];\n            const emojis = {\n                heart: ['❤️', '💖', '💗', '💘', '💝'],\n                snowflake: ['❄️', '🌨️', '🌬️'],\n                star: ['🌟', '⭐', '✨', '💫']\n            };\n            \n            for (let i = 0; i < 30; i++) {\n                const type = types[Math.floor(Math.random() * types.length)];\n                const deco = document.createElement('div');\n                deco.className = type;\n                \n                const emojiSet = emojis[type];\n                deco.textContent = emojiSet[Math.floor(Math.random() * emojiSet.length)];\n                \n                deco.style.left = `${Math.random() * 100}vw`;\n                deco.style.top = `${Math.random() * 100}vh`;\n                deco.style.animationDelay = `${Math.random() * 5}s`;\n                deco.style.fontSize = `${Math.random() * 20 + 15}px`;\n                \n                body.appendChild(deco);\n            }\n        }\n        \n        // 更新恋爱计时器\n        function updateTimer() {\n            const startDate = new Date('2023-09-15T00:00:00');\n            const now = new Date();\n            \n            const diff = now - startDate;\n            \n            const years = Math.floor(diff / (1000 * 60 * 60 * 24 * 365));\n            const months = Math.floor(diff / (1000 * 60 * 60 * 24 * 30.44)) % 12;\n            const days = Math.floor(diff / (1000 * 60 * 60 * 24)) % 30;\n            const hours = Math.floor(diff / (1000 * 60 * 60)) % 24;\n            const minutes = Math.floor(diff / (1000 * 60)) % 60;\n            const seconds = Math.floor(diff / 1000) % 60;\n            \n            document.getElementById('years').textContent = years;\n            document.getElementById('months').textContent = months;\n            document.getElementById('days').textContent = days;\n            document.getElementById('hours').textContent = hours.toString().padStart(2, '0');\n            document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');\n            document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');\n        }\n        \n        // 渲染时间轴事件\n        function renderlovetimeline() {\n            const events = [\n                { title: '第1次表白👩‍❤️‍👨', start: '2023-09-15' },\n                { title: '第1次牵手🤝&拥抱💏', start: '2023-10-01' },\n                { title: '第1次约会🎉', start: '2023-10-01' },\n                { title: '第1次去海边🏖', start: '2023-10-02' },\n                { title: '第1次一起睡觉💤', start: '2023-10-28' },\n                { title: '一起逛街🛒', start: '2023-12-03' },\n                { title: '第1次一起过生日🎂', start: '2023-12-31' },\n                { title: '一起跨年💏', start: '2024-01-01' },\n                { title: '一起看电影🎞🎞', start: '2024-12-30' }\n            ];\n            \n            const lovetimeline = document.getElementById('lovetimeline');\n            const startDate = new Date('2023-09-15');\n            \n            // 按日期排序\n            events.sort((a, b) => new Date(a.start) - new Date(b.start));\n            \n            events.forEach((event, index) => {\n                const eventDate = new Date(event.start);\n                const diffTime = eventDate - startDate;\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                \n                const lovetimelineItem = document.createElement('div');\n                lovetimelineItem.className = 'lovetimeline-item';\n                \n                const icon = document.createElement('div');\n                icon.className = 'icon2';\n                icon.innerHTML = getEventIcon(event.title);\n                \n                const content = document.createElement('div');\n                content.className = 'lovetimeline-content';\n                \n                const date = document.createElement('span');\n                date.className = 'lovetimeline-date';\n                date.textContent = formatDate(eventDate);\n                \n                const title = document.createElement('h3');\n                title.className = 'lovetimeline-title';\n                title.textContent = event.title;\n                \n                const daysAfter = document.createElement('p');\n                daysAfter.className = 'days-after';\n                daysAfter.textContent = `恋爱第 ${diffDays} 天`;\n                \n                content.appendChild(date);\n                content.appendChild(title);\n                content.appendChild(daysAfter);\n                \n                lovetimelineItem.appendChild(icon);\n                lovetimelineItem.appendChild(content);\n                \n                lovetimeline.appendChild(lovetimelineItem);\n            });\n        }\n        \n        // 根据事件标题获取图标\n        function getEventIcon(title) {\n            if (title.includes('表白')) return '💘';\n            if (title.includes('牵手') || title.includes('拥抱')) return '💑';\n            if (title.includes('约会')) return '💞';\n            if (title.includes('海边')) return '🌊';\n            if (title.includes('睡觉')) return '🛌';\n            if (title.includes('逛街')) return '👫';\n            if (title.includes('电影')) return '🎬';\n            if (title.includes('生日')) return '🎂';\n            if (title.includes('跨年')) return '🎆';\n            return '❤️';\n        }\n        \n        // 格式化日期\n        function formatDate(date) {\n            const year = date.getFullYear();\n            const month = date.getMonth() + 1;\n            const day = date.getDate();\n            return `${year}年${month}月${day}日`;\n        }\n        \n        // 检查密码\n        function checkPassword() {\n            const password = document.getElementById('password').value;\n            const errorMessage = document.getElementById('error-message');\n            \n            // 正确密码是恋爱纪念日 20230915\n            if (password === '20230915') {\n                // 隐藏密码容器\n                document.getElementById('password-container').style.display = 'none';\n                // 显示主内容\n                document.getElementById('main-content').style.display = 'block';\n                // 渲染时间轴\n                renderlovetimeline();\n                // 创建装饰元素\n                createDecorations();\n                // 开始计时器\n                setInterval(updateTimer, 1000);\n            } else {\n                errorMessage.textContent = '密码错误，请再试一次！';\n                // 添加抖动效果\n                document.getElementById('password').classList.add('shake');\n                setTimeout(() => {\n                    document.getElementById('password').classList.remove('shake');\n                }, 500);\n            }\n        }\n        \n        // 初始化\n        document.addEventListener('DOMContentLoaded', () => {\n            // 添加输入框的回车事件\n            document.getElementById('password').addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    checkPassword();\n                }\n            });\n            \n            \n            \n            // 添加抖动动画\n            const style = document.createElement('style');\n            style.textContent = `\n                .shake {\n                    animation: shake 0.5s;\n                    border-color: #ff7675 !important;\n                }\n                \n                @keyframes shake {\n                    0% { transform: translateX(0); }\n                    25% { transform: translateX(-10px); }\n                    50% { transform: translateX(10px); }\n                    75% { transform: translateX(-10px); }\n                    100% { transform: translateX(0); }\n                }\n            `;\n            document.head.appendChild(style);\n        });\n    </script>\n</body>\n</html>\n{% endraw %}"},{"title":"STM32单片机外设初始化例程","url":"/2023/01/18/STM32单片机外设初始化例程/","content":"\n# STM32单片机外设初始化例程\n\n## 一、起因\n\n由于自己学习STM32单片机是零零散散的学习的，没有系统的进行学习，学习的东西非常的混乱，没有做过什么整体的框架整理，所以在此将STM32的外设的初始化进行系统的打包成一个文档，把程序的过程进行整理。\n\n## 二、基本流程\n\n### 1、基本STM32硬件知识点\n\nSTM32的单片机的开发程序发展的流程基本都是从寄存器阶段到标准库阶段到现在的HAL库、RTOS。所以第一步我们需要清楚单片机的整体工作流程。\n\n![](/images/posts/STM32单片机外设初始化例程/1.webp)\n\n通过图上可以看出，STM32单片机有一个Cortex-M3的内核CPU控制，分出三条数据总线控制各个外设：\n\n- **指令存储区总线（两条）**：I-Code总线和D-Code总线\n- **系统总线（System）**：用于访问内存和外设\n- **私有外设总线**：负责一部分私有外设的访问，主要就是访问调试组件\n\nI-Code用于取指，D-Code用于查表等操作，它们按最佳执行速度进行优化。\n\n系统总线（System）用于访问内存和外设，覆盖的区域包括SRAM，片上外设，片外RAM，片外扩展设备，以及系统级存储区的部分空间。\n\n私有外设总线负责一部分私有外设的访问，主要就是访问调试组件。它们也在系统级存储区。\n\n还有一个DMA总线，从字面上看，DMA是data memory access的意思，是一种连接内核和外设的桥梁，它可以访问外设、内存，传输不受CPU的控制，并且是双向通信。简而言之，这个家伙就是一个速度很快的且不受老大控制的数据搬运工。\n\n从结构框图上看，STM32的外设有串口、定时器、IO口、FSMC、SDIO、SPI、I2C等，这些外设按照速度的不同，分别挂载到AHB、APB2、APB1这三条总线上。\n\n其中寄存器其实可以理解为内存的地址，cpu通过地址访问对应的空间的内存数据，这个内存数据用来控制各个外设的开关。\n\n`stm32`的函数一切库的封装始于寄存器的映射操作。\n![](/images/posts/STM32单片机外设初始化例程/2.webp)\n![](/images/posts/STM32单片机外设初始化例程/4.webp)\n\n如果进行寄存器开发，就需要怼地址以及对寄存器进行字节赋值，不仅效率低而且容易出错。\n\n因此我们开始使用库函数进行编程。\n![](/images/posts/STM32单片机外设初始化例程/3.webp)\n\n### 内核库文件分析\n\n#### `cor_cm3.h`\n这个头文件实现了：  \n1. 内核结构体寄存器定义  \n2. 内核寄存器内存映射  \n3. 内存寄存器位定义  \n\n> 跟处理器相关的头文件`stm32f10x.h`实现的功能一样，一个是针对内核的寄存器，一个是针对内核之外，即处理器的寄存器。\n\n#### `misc.h`\n内核应用函数库头文件，对应`stm32f10x_xxx.h`。\n\n#### `misc.c`\n内核应用函数库文件，对应`stm32f10x_xxx.c`。\n\n在CM3这个内核里面还有一些功能组件，如：\n- `NVIC`\n- `SCB` \n- `ITM`\n- `MPU`\n- `CoreDebug`\n\n> CM3带有非常丰富的功能组件，但是芯片厂商在设计MCU的时候有一些并不是非要不可的，是可裁剪的，比如`MPU`、`ITM`等在STM32里面就没有。  \n> 其中`NVIC`在每一个CM3内核的单片机中都会有，但都会被裁剪，只能是CM3 NVIC的一个子集。在`NVIC`里面还有一个`SysTick`，是一个系统定时器，可以提供时基，一般为操作系统定时器所用。\n\n`misc.h`和`mics.c`这两个文件提供了操作这些组件的函数，并可以在CM3内核单片机直接移植。\n\n---\n\n### 处理器外设库文件分析\n\n#### `startup_stm32f10x_hd.s`\n这个是由汇编编写的启动文件，是STM32上电启动的第一个程序，启动文件主要实现了：\n\n- 初始化堆栈指针 `SP`\n- 设置 `PC` 指针`=Reset_Handler`\n- 设置向量表的地址，并初始化向量表（向量表里面放的是 STM32 所有中断函数的入口地址）\n- 调用库函数 `SystemInit`（把系统时钟配置成 72M，`SystemInit` 在库文件 `stytem_stm32f10x.c` 中定义）\n- 跳转到标号`_main`，最终去到 C 的世界\n\n#### `system_stm32f10x.c`\n这个文件的作用是里面实现了各种常用的系统时钟设置函数，有：\n- 72M\n- 56M \n- 48M\n- 36M\n- 24M\n- 8M\n\n> 我们使用的是把系统时钟设置成72M。\n\n#### `Stm32f10x.h`\n这个头文件非常重要，实现了：\n\n1. 处理器外设寄存器的结构体定义\n2. 处理器外设的内存映射\n3. 处理器外设寄存器的位定义\n\n> 关于1和2我们在用寄存器点亮LED的时候有讲解。\n\n**关于第3点说明：**  \n处理器外设寄存器的位定义就是把外设的每个寄存器的每一个位写1的16进制数定义成一个宏，宏名即用该位的名称表示。\n\n**示例：**\n```c\n// 一般的操作方法\nADC->CR2 = 0x00000001;\n\n// 使用位定义后的操作\nADC->CR2 = ADC_CR2_ADON;\n```\n\n#### `stm32f10x_xxx.h`\n外设xxx应用函数库头文件，这里面主要定义了实现外设某一功能的结构体。\n\n> 比如通用定时器有很多功能：定时功能、输出比较功能、输入捕捉功能。这个头文件就为我们打包好了要实现某一个功能的寄存器（以结构体的形式定义）。\n\n#### `stm32f10x_xxx.c`\n外设xxx应用函数库，这里面写好了操作xxx外设的所有常用的函数。\n\n> 我们使用库编程的时候，使用的最多的就是这里的函数。\n\n---\n\n### SystemInit 相关问题\n\n在工程中新建`main.c`后直接编译会报错：\n```\nUndefined symbol SystemInit (referred from startup_stm32f10x_hd.o).\n```\n\n**原因分析：**  \n从启动文件`startup_stm32f10x_hd.s`中我们知道：\n```assembly\n;Reset handler\nReset_Handler PROC\n    EXPORT Reset_Handler [WEAK]\n    IMPORT __main\n    ;IMPORT SystemInit\n    ;LDR R0, =SystemInit\n    BLX R0\n    LDR R0, =__main\n    BX R0\nENDP\n```\n> 汇编中`;`分号是注释的意思  \n> `Reset_Handler`调用了`SystemInit`函数（用来初始化系统时钟），该函数是在库文件`system_stm32f10x.c`中实现的。\n\n**解决方案：**  \n在main文件里面定义一个`SystemInit`空函数，为的是骗过编译器，把这个错误去掉。\n\n> 关于配置系统时钟之后会出文章RCC时钟树详细介绍，主要配置：\n> - 时钟控制寄存器(RCC_CR)\n> - 时钟配置寄存器(RCC_CFGR)  \n> \n> 但最好是直接使用CubeMX直接生成，因为它的配置过程有些冗长。  \n> 如果使用库，库函数`SystemInit`会帮我们把系统时钟设置成72M。\n\n\n## <font style=\"color:rgb(18, 18, 18);\">2、基本stm32外设配置流程</font>\n**程序模板**\n\n#### 第一步：申明结构体；\n```c\nxxx_InitTypeDef xxx_InitStructure;\n```\n\n#### 第二步：开启时钟；\n（第一步和第二步顺序不能调换：标准c要求所有变量/结构体,都必须在代码段之前声明）\n\n```c\nRCC_xPeriphClockCmd(RCC_AxBxPeriph_xxx, ENABLE)\n```\n\n> *2.5：引脚复用（如果有）并且开启复用的时钟\n>\n\n```c\nGPIO_PinAFConfig(GPIOx,GPIO_PinSourcex,GPIO_AF_x)\n```\n\n#### 第三步：初始化结构体；\n```c\nxxx_Init(xxx,&xxx_InitStructure)\n```\n\n### *若有设置中断\n> 中断名在startup_stm32f40_41xx.s中定义。\n>\n\n#### 第一步：使能外设某特定中断（定时器，串口，ADC）\n```c\nxxx_ITConfig(xxx, xxx, ENABLE);\n```\n\n#### 第二步：初始化 NVIC\n```c\nNVIC_Init(&NVIC_InitStructure);\n```\n\n#### 第三步：设置系统中断优先级分组(通常在主函数中配置）\n```c\nNVIC_PriorityGroupConfig(NVIC_PriorityGroup_x);\n```\n\n中断服务函数(典型）\n\n```c\nvoid xxx_IRQHandler(void)\n{\n    if(xxx_GetITStatus(xxx)!=RESET)//判断某个线上的中断是否发生 \n  { …中断逻辑…\n      xxx_ClearITPendingBit(xxx); //清除 LINE 上的中断标志位 \n  }\n}\n```\n\n其它中断相关\n\n```c\nxxx_GetITStatus(xxx)//获取中断状态，查看中断是否发生 \n//\nxxx_ClearITPendingBit(xxx)；//清除\nelse\nxxx_ClearFlag(xxx);//清除\n//前者会先判断这种中断是否使能，使能了才去判断中断标志位，\n//而后者直接用来判断状态标志位。\n```\n\n### END.定时器/串口/ADC使能\n```c\nxxx_Cmd(xxx, ENABLE);\n```\n\n## 3、结构体变量配置具体形式\n#### 初始化结构体初始化 GPIO 的常用格式\n```c\nGPIO_InitTypeDef GPIO_InitStructure;\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_x | GPIO_Pin_x;\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_xxx;\nGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\nGPIO_InitStructure.GPIO_OType = GPIO_OType_PP;\nGPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;\nGPIO_Init(GPIOx,&GPIO_InitStructure);\n```\n\n#### 初始化结构体初始化 USART 的常用格式\n```c\nUSART_InitTypeDef USART_InitStructure;\nUSART_InitStructure.USART_BaudRate = bound;//一般设置为 9600;\nUSART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为 8 位数据格式\nUSART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位\nUSART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位\nUSART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;\nUSART_InitStructure.USART_Mode = USART_Mode_Rx |USART_Mode_Tx;//收发模式\nUSART_Init(USARTX, &USART_InitStructure); //初始化串口\n```\n\n#### 初始化结构体初始化 NVIC 的常用格式\n```c\nNVIC_InitTypeDef NVIC_InitStructure;\nNVIC_InitStructure.NVIC_IRQChannel = xxx_IRQn;//设置中断名\nNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级 3\nNVIC_InitStructure.NVIC_IRQChannelSubPriority =3; //响应优先级 3\nNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ 通道使能\nNVIC_Init(&NVIC_InitStructure); //根据指定的参数初始化 VIC 寄存器、\n```\n\n#### 初始化结构体初始化外部中断的常用格式\n```c\n EXTI_InitTypeDef EXTI_InitStructure;\n EXTI_InitStructure.EXTI_Line=EXTI_Linex;\n EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;\n EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_xxx;//上升，下降沿或任意电平\n EXTI_InitStructure.EXTI_LineCmd = ENABLE;\n EXTI_Init(&EXTI_InitStructure); //初始化外设 EXTI 寄存器\n```\n\n#### 初始化结构体初始化定时器中断的常用格式\n```c\nTIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;\nTIM_TimeBaseStructure.TIM_Period = xxx;\nTIM_TimeBaseStructure.TIM_Prescaler =xxx; \nTIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIVx; \nTIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_x;\nTIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);\n```\n\n#### 初始化结构体初始化输出比较的常用格式\n```c\nTIM_OCInitTypeDef TIM_OCInitStructure;\nTIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWMx; //选择模式 PWM\nTIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能\nTIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_xxx; //输出极性\nTIM_OCxInit(TIMx, &TIM_OCInitStructure); //根据T指定的参数初始化外设\n```\n\n\n\n#### 设置 ADC 的通用控制寄存器 CCR( common control register)\n```c\nADC_CommonInitTypeDef ADC_CommonInitStructure;\nADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;//独立模式\nADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_xCycles;//两个采样阶段之间的延迟周期数，5~20\nADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;\nADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;//需保证 ADC1 的时钟频率不超过 36MHz。\nADC_CommonInit(&ADC_CommonInitStructure);//初始化\n```\n\n#### 初始化结构体初始化ADC的常用格式\n```c\nADC_InitTypeDef ADC_InitStructure;\nADC_InitStructure.ADC_Resolution = ADC_Resolution_xb;//6,8,10,12\nADC_InitStructure.ADC_ScanConvMode = DISABLE;//非扫描模式\nADC_InitStructure.ADC_ContinuousConvMode = DISABLE;//关闭连续模式\nADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;\n//禁止触发检测，使用软件触发\nADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;//右对齐\nADC_InitStructure.ADC_NbrOfConversion = 1;//1 个转换在规则序列中\nADC_Init(ADC1, &ADC_InitStructure);//ADC 初始化\n```\n\n# 三、GPIO配置\n### 1、常用函数\n\n> **GPIO_Init** 初始化GPIO，设置GPIO的模式，速度，引脚数 \n**GPIO_ReadInputDataBit**读取一位GPIO的输入数据\t\n**GPIO_ReadInputData**\t读取GPIOx的输入数据\t\n**GPIO_ReadOutputDataBit**\t读取一位GPIO的输出数据\t\n**GPIO_ReadOutputDat**a\t读取GPIOx的输出数据\t\n**GPIO_SetBits**\t使GPIO设置为高电平，可一起设置多，也可以设置一个\t\n**GPIO_ResetBits**\t使GPIO设置为高电平，课一起设置多，也可以设置一个\t\n**GPIO_WriteBit**\t设置GPIO的一个管脚\t\n**GPIO_Write**\t设置GPIOx全部管脚\t\n**GPIO_ToggleBits** 翻转指定的GPIO口\n**GPIO_PinAFConfig** 改变指定管脚的映射关系，即配置指定管脚的复用功能\n\n### <font style=\"color:rgb(77, 77, 77);\">设计框图</font>\n![](/images/posts/4.png)\n\n### <font style=\"color:rgb(77, 77, 77);\">例程代码</font>\n#### 示例一:<font style=\"color:rgb(77, 77, 77);\">LED灯初始化GPIO口例程</font>\n```c\nvoid LED_GPIO_Config(void)\n{\t\t\n\t\t/*定义一个GPIO_InitTypeDef类型的结构体*/\n\t\tGPIO_InitTypeDef GPIO_InitStructure;\n\t\t/*开启LED相关的GPIO外设时钟*/\n\t\tRCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOB,ENABLE);\n\t\t/*选择要控制的GPIO引脚*/\n\t\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;\n\t\t/*设置引脚模式为通用推挽输出*/\n\t\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   \n\t\t/*设置引脚速率为50MHz */   \n\t\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; \n\t\t/*调用库函数，初始化GPIO*/\n\t\tGPIO_Init(GPIOC, &GPIO_InitStructure);\t\n\t\t/*选择要控制的GPIO引脚*/\n\t\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;\n\t\t/*调用库函数，初始化GPIO*/\n\t\tGPIO_Init(GPIOB, &GPIO_InitStructure);\n\t\t/*选择要控制的GPIO引脚*/\n\t\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;\n\t\t/*调用库函数，初始化GPIO*/\n\t\tGPIO_Init(GPIOC, &GPIO_InitStructure);\n}\n```\n\n参数：**GPIO_InitStruct**，GPIO的初始化相关结构体。该结构体里的成员变量决定了我们具体的初始化参数。以下进行说明：\n\n              GPIO_Pin：指定具体的io脚，如GPIO_Pin_0，GPIO_Pin_1这样的宏定义。\n\n              GPIO_Mode：指定GPIO的模式，\n\n**输入模式**\n\n\t\t+ 输入浮空： GPIO_Mode_IN_FLOATING\n\t\t+  输入上拉： GPIO_Mode_IPU\n\t\t+  输入下拉 ：GPIO_Mode_IPD\n\t\t+  模拟输入 ：GPIO_Mode_AIN\n\n**输出模式**\n\n            +  开漏输出 GPIO_Mode_Out_OD\n            + 推挽输出 GPIO_Mode_Out_PP\n            + 复用功能推挽 GPIO_Mode_AF_PP\n            +  复用功能开漏 GPIO_Mode_AF_OD\n\nGPIO_Speed：指定IO最快翻转速度，也就是当使用IO产生频率（如PWM）的最大速度：\n\n            + GPIO_Speed_10MHz,\n            + GPIO_Speed_2MHz, \n            + GPIO_Speed_50MHz等\n\n#### 示例二:把GPIO配置成输入\n> 常规方式按键使用中断触发，本案例很少被使用在按键中。\n>\n\n```c\nvoid KEY_Init(void)\n{\nGPIO_InitTypeDef GPIO_InitStructure;\n//结构体定义\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC,ENABLE);\n//使能 PORTA,PORTC 时钟\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;\n//PA15\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; \n//设置成上拉输入\nGPIO_Init(GPIOA, &GPIO_InitStructure);\n//初始化 GPIOA15\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;\n//PC5\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; \n//设置成上拉输入\nGPIO_Init(GPIOC, &GPIO_InitStructure);\n//初始化 GPIOC5\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;\n//PA0\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; \n//PA0 设置成输入，默认下拉 \nGPIO_Init(GPIOA, &GPIO_InitStructure);\n//初始化 GPIOA.0\n}\n```\n\n#### <font style=\"color:rgb(51, 51, 51);\">示例三:配置复用功能 PA9 PA10 配置成串口1的收发接口</font>\n```c\n    GPIO_InitTypeDef GPIO_InitStructure;\n    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);//使能GPIOA时钟\n    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟\n    //串口1对应引脚复用映射\n    GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);//GPIOA9复用为USART1\n    GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);//GPIOA10复用为USART1\n    //USART1端口配置\n    GPIO_InitStructure.GPIO_Pin= GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10\n    GPIO_InitStructure.GPIO_Mode= GPIO_Mode_AF;//复用功能\n    GPIO_InitStructure.GPIO_Speed= GPIO_Speed_50MHz;      //速度50MHz\n    GPIO_InitStructure.GPIO_OType= GPIO_OType_PP; //推挽复用输出\n    GPIO_InitStructure.GPIO_PuPd= GPIO_PuPd_UP; //上拉\n    GPIO_Init(GPIOA,&GPIO_InitStructure);//初始化PA9，PA10\n```\n\n# 四、外部中断\n### 1、常用函数\n>void EXTI_DeInit(void); 重设为缺省值\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct); 根据EXTI_InitStruct结构体的配置进行初始化\nvoid EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);把结构体变量的每一个变量按照缺省值填入。\nvoid EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);产生一个中断\nFlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);获取指定的EXTI线路挂起的标志位\nvoid EXTI_ClearFlag(uint32_t EXTI_Line);清楚EXTI的挂起标志位\nITStatus EXTI_GetITStatus(uint32_t EXTI_Line);检查指定的EXTI线路触发请求发送与否\nvoid EXTI_ClearITPendingBit(uint32_t EXTI_Line);清楚EXTI线路挂起位\n\n---\n\nvoidNVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)<font style=\"color:rgb(77, 77, 77);\">中断优先级分组</font>\n\n| **<font style=\"color:rgb(79, 79, 79);\">分组号</font>** | **<font style=\"color:rgb(79, 79, 79);\">4 bit 分配情况</font>** | **<font style=\"color:rgb(79, 79, 79);\">说明</font>** |\n| :---: | :---: | :---: |\n| <font style=\"color:rgb(79, 79, 79);\">第0组</font> | <font style=\"color:rgb(79, 79, 79);\">0 : 4</font> | <font style=\"color:rgb(79, 79, 79);\">无抢占式优先级，16 个子优先级</font> |\n| <font style=\"color:rgb(79, 79, 79);\">第1组</font> | <font style=\"color:rgb(79, 79, 79);\">1 : 3</font> | <font style=\"color:rgb(79, 79, 79);\">2 个抢占式优先级，8 个子优先级</font> |\n| <font style=\"color:rgb(79, 79, 79);\">第2组</font> | <font style=\"color:rgb(79, 79, 79);\">2 : 2</font> | <font style=\"color:rgb(79, 79, 79);\">4 个抢占式优先级，4 个子优先级</font> |\n| <font style=\"color:rgb(79, 79, 79);\">第3组</font> | <font style=\"color:rgb(79, 79, 79);\">3 : 1</font> | <font style=\"color:rgb(79, 79, 79);\">8 个抢占式优先级，2 个子优先级</font> |\n| <font style=\"color:rgb(79, 79, 79);\">第4组</font> | <font style=\"color:rgb(79, 79, 79);\">4 : 0</font> | <font style=\"color:rgb(79, 79, 79);\">16 个抢占式优先级，无子优先级</font> |\n\n\n> 如果用户没有设置优先级分组，即用户没有调用\">NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)则优先级分组默认设置为分组 0，即无抢占式优先级、16个子优先级。\n> NVIC_Init(&NVIC_InitStruct); 根据NVIC_InitStruct结构体的配置进行初始化\n\n### 设计框图\n![](/images/posts/STM32单片机外设初始化例程/5.png)\n\n![](/images/posts/STM32单片机外设初始化例程/6.png)\n\n### 例程代码\n**<font style=\"color:rgb(77, 77, 77);\">相关配置代码的介绍</font>**\n\n```c\n//0、初始化GPIO\nGPIO_InitTypeDef GPIO_InitStructure;\nGPIO_StructInit(&GPIO_InitStructure);\nGPIO_InitStructure.GPIO_Pin = Z_GPIO_PIN;\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //浮空输入\nGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\nGPIO_Init(Z_GPIO_PORT, &GPIO_InitStructure);\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);\t//使能复用功能时钟\nRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);\n//1.配置中断线\nEXTI_InitTypeDef EXTI_InitStruct;//创建结构体来初始化中断线\nEXTI_ClearITPendingBit(EXTI_Line9);     //清除中断标志位\nGPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource5);\nEXTI_InitStructure.EXTI_Line = EXTI_Line13;//选择EXTI的信号源\nEXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;/* EXTI为中断模式 */\nEXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;/* 下降沿中断 */\nEXTI_InitStructure.EXTI_LineCmd = ENABLE;/* 使能中断 */\t\nEXTI_Init(&EXTI_InitStructure);\n//2.配置NVIC中断优先级\nNVIC_InitTypeDef NVIC_InitStructure;//创建结构体来初始化中断优先级\nNVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//配置分组号\nNVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;\n//使能按键所在的外部中断通道\nNVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;\nNVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x02;//设置抢占优先级\nNVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;//设置子优先级\nNVIC_Init(&NVIC_InitStruct);\n//3.实现中断服务函数（注意配置完之后清除函数的挂起）\nvoid EXTI0_IRQHandler(void)\n{\n\tdelay_ms(10); //消抖?\n\tif (WK_UP == 1)\n\t{\n\t\tLED0 = 1;//led函数宏\n\t\tLED1 = 1;\n\t}\n\tEXTI_ClearITPendingBit(EXTI_Line0); //清除 EXTI0 线路挂起，清除位\n}\n\n```\n\n> NVIC_InitTypeDef 结构体中间有四个成员变量，这四个成员变量的作用是：\n>\n> + NVIC_IRQChannel：定义初始化的是哪个中断，这个我们可以在 stm32f10x.h 中找到每个中断对应的名字。\n> + NVIC_IRQChannelPreemptionPriority：定义这个中断的抢占优先级别。\n> + NVIC_IRQChannelSubPriority：定义这个中断的子优先级别。\n> + NVIC_IRQChannelCmd：使能or失能NVIC\n>\n\n> <font >EXTI的配置，EXTI_Trigger这里支持三种模式；</font>\n>\n> + <font >EXTI_Trigger_Rising 上升沿触发；</font>\n> + <font >EXTI_Trigger_Falling 下降沿触发；</font>\n> + <font >EXTI_Trigger_Rising_Falling 上升沿和下降沿都可以触发；</font>\n>\n\n**中断服务函数在stm32f10x_it.c中编写，在汇编文件中查询**\n\n#### 完整代码\n```c\nvoid CountSensor_Init(void)\n{\n\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);\n\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);\n\t\n\tGPIO_InitTypeDef GPIO_InitStructure;\n\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;\n\tGPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;\n\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOB, &GPIO_InitStructure);\n\t\n\tGPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);\n\t\n\tEXTI_InitTypeDef EXTI_InitStructure;\n\tEXTI_InitStructure.EXTI_Line = EXTI_Line14;\n\tEXTI_InitStructure.EXTI_LineCmd = ENABLE;\n\tEXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;\n\tEXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;\n\tEXTI_Init(&EXTI_InitStructure);\n\t\n\tNVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n\t\n\tNVIC_InitTypeDef NVIC_InitStructure;\n\tNVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;\n\tNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;\n\tNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;\n\tNVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;\n\tNVIC_Init(&NVIC_InitStructure);\n}\nvoid EXTI15_10_IRQHandler(void)\n{\n\tif (EXTI_GetITStatus(EXTI_Line14) == SET)\n\t{\n\t\tif (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_14) == 0)\n\t\t{\n\t\t\tCountSensor_Count ++;\n\t\t}\n\t\tEXTI_ClearITPendingBit(EXTI_Line14);\n\t}\n}\n```\n\n# 五、定时器\n### 1、常用函数\n>void TIM_DeInit\nvoid TIM_TimeBaseInit\nvoid TIM_OC1Init\nvoid TIM_OC2Init\nvoid TIM_OC3Init\nvoid TIM_OC4Init\nvoid TIM_ICInit\nvoid TIM_PWMIConfig\nvoid TIM_BDTRConfig\nvoid TIM_TimeBaseStructInit\nvoid TIM_OCStructInit\nvoid TIM_ICStructInit\nvoid TIM_BDTRStructInit\nvoid TIM_Cmd\nvoid TIM_CtrlPWMOutputs\nvoid TIM_ITConfig\nvoid TIM_GenerateEvent\nvoid TIM_DMAConfig\nvoid TIM_DMACmd\nvoid TIM_InternalClockConfig\nvoid TIM_ITRxExternalClockConfig\nvoid TIM_TIxExternalClockConfig\nvoid TIM_ETRClockMode1Config\nvoid TIM_ETRClockMode2Config\nvoid TIM_ETRConfig\nvoid TIM_PrescalerConfig\nvoid TIM_CounterModeConfig\nvoid TIM_SelectInputTrigger\nvoid TIM_EncoderInterfaceConfig\nvoid TIM_ForcedOC1Config\nvoid TIM_ForcedOC2Config\nvoid TIM_ForcedOC3Config\nvoid TIM_ForcedOC4Config\nvoid TIM_ARRPreloadConfig\nvoid TIM_SelectCOM\nvoid TIM_SelectCCDMA\nvoid TIM_CCPreloadControl\nvoid TIM_OC1PreloadConfig\nvoid TIM_OC2PreloadConfig\nvoid TIM_OC3PreloadConfig\nvoid TIM_OC4PreloadConfig\nvoid TIM_OC1FastConfig\nvoid TIM_OC2FastConfig\nvoid TIM_OC3FastConfig\nvoid TIM_OC4FastConfig\nvoid TIM_ClearOC1Ref\nvoid TIM_ClearOC2Ref\nvoid TIM_ClearOC3Ref\nvoid TIM_ClearOC4Ref\nvoid TIM_OC1PolarityConfig\nvoid TIM_OC1NPolarityConfig\nvoid TIM_OC2PolarityConfig\nvoid TIM_OC2NPolarityConfig\nvoid TIM_OC3PolarityConfig\nvoid TIM_OC3NPolarityConfig\nvoid TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);\nvoid TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);\nvoid TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);\nvoid TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);\nvoid TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState);\nvoid TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource);\nvoid TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState);\nvoid TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode);\nvoid TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource);\nvoid TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);\nvoid TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);\nvoid TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter);\nvoid TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload);\nvoid TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);\nvoid TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);\nvoid TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);\nvoid TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);\nvoid TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);\nvoid TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);\nvoid TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);\nvoid TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);\nvoid TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD);\nuint16_t TIM_GetCapture1(TIM_TypeDef* TIMx);\nuint16_t TIM_GetCapture2(TIM_TypeDef* TIMx);\nuint16_t TIM_GetCapture3(TIM_TypeDef* TIMx);\nuint16_t TIM_GetCapture4(TIM_TypeDef* TIMx);\nuint16_t TIM_GetCounter(TIM_TypeDef* TIMx);\nuint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);\nFlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);\nvoid TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);\nITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);\nvoid TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);\n\n### 设计框图\n \n\n| 类型 | 编号 | 总线 | 功能 |\n| :---: | :---: | :---: | :---: |\n| <font style=\"color:black;\">高级定时器</font> | <font style=\"color:black;\">TIM1</font><font style=\"color:black;\">、</font><font style=\"color:black;\">TIM8</font> | <font style=\"color:black;\">APB2</font> | <font style=\"color:black;\">拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</font> |\n| <font style=\"color:black;\">通用定时器</font> | <font style=\"color:black;\">TIM2</font><font style=\"color:black;\">、</font><font style=\"color:black;\">TIM3</font><font style=\"color:black;\">、</font><font style=\"color:black;\">TIM4</font><font style=\"color:black;\">、</font><font style=\"color:black;\">TIM5</font> | <font style=\"color:black;\">APB1</font> | <font style=\"color:black;\">拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能</font> |\n| <font style=\"color:black;\">基本定时器</font> | <font style=\"color:black;\">TIM6</font><font style=\"color:black;\">、</font><font style=\"color:black;\">TIM7</font> | <font style=\"color:black;\">APB1</font> | <font style=\"color:black;\">拥有定时中断、主模式触发</font><font style=\"color:black;\">DAC</font><font style=\"color:black;\">的功能</font> |\n\n![](/images/posts/STM32单片机外设初始化例程/7.png)\n![](/images/posts/STM32单片机外设初始化例程/8.png)\n![](/images/posts/STM32单片机外设初始化例程/9.png)\n\n\n### 例程代码\n定时器中断实现步骤\n\n① 能定时器时钟。\n\n       RCC_APB1PeriphClockCmd();\n\n②  初始化定时器，配置ARR,PSC。\n\n      TIM_TimeBaseInit();\n\n③开启定时器中断，配置NVIC。\n\n      void TIM_ITConfig();\n\n      NVIC_Init();\n\n④  使能定时器。\n\n      TIM_Cmd();\n\n⑥  编写中断服务函数。\n\n      TIMx_IRQHandler();\n\n```c\nvoid TIM3_Int_Init(u16 arr,u16 psc)\n{\n    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;\n\tNVIC_InitTypeDef NVIC_InitStructure;\n \n\tRCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //时钟使能\n\tTIM_InternalClockConfig(TIM3);\n\t//定时器TIM3初始化\n\tTIM_TimeBaseInitStructure.TIM_Period = 10000 - 1; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值\t\n\tTIM_TimeBaseInitStructure.TIM_Prescaler = 7200 - 1; //设置用来作为TIMx时钟频率除数的预分频值\n\tTIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim\n\tTIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式\n\tTIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx的时间基数单位\n\n    TIM_ClearFlag(TIM3, TIM_FLAG_Update);//清除标志位\n\tTIM_ITConfig(TIM3,TIM_IT_Update,ENABLE ); //使能指定的TIM3中断,允许更新中断\n \n\t//中断优先级NVIC设置\n    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//选择分组\n\tNVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断\n\tNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级\n\tNVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级\n\tNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能\n\tNVIC_Init(&NVIC_InitStructure);  //初始化NVIC寄存器\n \n \n\tTIM_Cmd(TIM3, ENABLE);  //使能TIMx\t\t\t\t\t \n}\n//定时器3中断服务程序\nvoid TIM3_IRQHandler(void)   //TIM3中断\n{\n\tif (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  //检查TIM3更新中断发生与否\n\t\t{\n\t\tTIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx更新中断标志 \n\t\tLED1=!LED1;\n\t\t}\n}\n```\n\n","tags":["嵌入式","C语言","技术","单片机"],"categories":["嵌入式"]},{"title":"C语言函数指针作为结构体成员实现成员操作","url":"/2022/11/16/C语言函数指针作为结构体成员实现成员操作/","content":"# C语言函数指针与结构体函数指针在嵌入式中的应用\n\n## 一、起因\n\n在嵌入式操作系统开发时，发现非常多的功能实现是基于结构体函数指针实现的。函数指针在嵌入式中的应用非常广泛，常常把函数指针作为结构体的成员、作为函数的参数等。为了填补C语言的基础知识，特此记录学习过程。\n\n在C语言程序中，数据结构和算法是两个基本元素。C语言的基本数据类型、结构体、数组和联合体是数据结构的代表；C语言中的函数则是算法的代表。只有将数据结构和算法有机结合才能构成具有一定功能的程序。\n\n## 二、C语言函数指针基础\n\n### 1. 函数指针定义\n\n函数指针的定义形式为：\n```c\nreturnType (*pointerName)(param list);\n```\n\n- `returnType` 为函数返回值类型\n- `pointerName` 为指针名称\n- `param list` 为函数参数列表\n\n注意：`()`的优先级高于`*`，第一个括号不能省略。\n\n### 2. 基本示例\n\n```c\n#include <stdio.h>\n\n// 返回两个数中较大的一个\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint main() {\n    int x, y, maxval;\n    // 定义函数指针\n    int (*pmax)(int, int) = max;  // 也可以写作int (*pmax)(int a, int b)\n    \n    printf(\"Input two numbers:\");\n    scanf(\"%d %d\", &x, &y);\n    maxval = (*pmax)(x, y);\n    printf(\"Max value: %d\\n\", maxval);\n    \n    return 0;\n}\n```\n\n### 3. 函数指针定义示例\n\n```c\nint add2(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    int (*func)(int, int);\n    func = &add2;  // 指针赋值,或者func=add2; add2与&add2意义相同\n    printf(\"func(3,4)=%d\\n\", func(3, 4));\n    \n    return 0;\n}\n```\n\n### 4. 使用typedef定义函数指针类型\n\n```c\ntypedef int (*FUN)(int, int);\nFUN func = &add2;\nfunc();\n```\n\n## 三、结构体中定义函数指针\n\n### 1. 结构体指针变量的定义形式\n\n#### 形式1：先定义结构体类型，再定义变量\n```c\nstruct 结构体标识符 {\n    成员变量列表;\n};\nstruct 结构体标识符 *指针变量名;\n```\n\n#### 形式2：在定义类型的同时定义变量\n```c\nstruct 结构体标识符 {\n    成员变量列表;\n} *指针变量名;\n```\n\n#### 形式3：直接定义变量\n```c\nstruct {\n    成员变量列表;\n} *指针变量名;\n```\n\n### 2. 结构体中指向函数的指针示例\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct student {\n    int id;\n    char name[50];\n    void (*initial)();\n    void (*process)(int id, char *name);\n    void (*destroy)();\n} stu;\n\nvoid initial() {\n    printf(\"initialization...\\n\");\n}\n\nvoid process(int id, char *name) {\n    printf(\"process...\\n%d\\t%s\\n\", id, name);\n}\n\nvoid destroy() {\n    printf(\"destroy...\\n\");\n}\n\nint main() {\n    stu *stu1;\n    stu1 = (stu *)malloc(sizeof(stu));\n    \n    stu1->id = 1000;\n    strcpy(stu1->name, \"C++\");\n    stu1->initial = initial;\n    stu1->process = process;\n    stu1->destroy = destroy;\n    \n    printf(\"%d\\t%s\\n\", stu1->id, stu1->name);\n    stu1->initial();\n    stu1->process(stu1->id, stu1->name);\n    stu1->destroy();\n    \n    free(stu1);\n    return 0;\n}\n```\n\n### 3. 回调函数示例\n\n```c\n#include <stdio.h>\n\ntypedef struct {\n    int a;\n    void (*pshow)(int);\n} TMP;\n\nvoid func(TMP *tmp) {\n    if(tmp->a > 10) { // 如果a>10,则执行回调函数\n        (tmp->pshow)(tmp->a);\n    }\n}\n\nvoid show(int a) {\n    printf(\"a的值是%d\\n\", a);\n}\n\nvoid main() {\n    TMP test;\n    test.a = 11;\n    test.pshow = show;\n    func(&test);\n}\n```\n\n## 四、函数指针的两个主要用途\n\n### 1. 将函数作为参数传递给函数\n\n```c\n#include <stdio.h>\n\n// Calculate用于计算积分\ndouble Calculate(double(*func)(double x), double a, double b) {\n    double dx = 0.0001; // 细分的区间长度\n    double sum = 0;\n    \n    for(double xi = a+dx; xi <= b; xi += dx) {\n        double area = func(xi) * dx;\n        sum += area;\n    }\n    return sum;\n}\n\ndouble func_1(double x) {\n    return x * x;\n}\n\ndouble func_2(double x) {\n    return x * x * x;\n}\n\nvoid main() {\n    printf(\"%lf\\n\", Calculate(func_1, 0, 1));\n    printf(\"%lf\\n\", Calculate(func_2, 0, 1));\n}\n```\n\n### 2. 引用不在代码段中的函数\n\n在嵌入式系统中，常用于调用固化在ROM中的系统函数。例如编写bootload的跳转函数\n```c\n#define INFLASH_ADDR_BOOTLOAD   ((uint32_t)0x08000000)  // bootload的起始地址\n\n/* 初始化堆栈指针 */\nvoid MSR_MSP(uint32_t addr) \n{\n  __ASM(\"msr msp, r0\");  // set Main Stack value 将主堆栈地址保存到MSP寄存器(R13)中\n  __ASM(\"bx lr\");        // 跳转到lr中存放的地址处。bx是强制跳转指令 lr是连接寄存器，是STM32单片机的R14\n}\n\ntypedef void (*IapFun)(void); // 声明一个函数指针，用于跳转到绝对地址执行程序\nIapFun JumpToBootload; \n\n/*!\n *  功  能: 跳转到应用程序 \n *  param1: 用户代码起始地址\n *  retval: 无返回值\n */\nvoid IapLoadBootload(void)\n{\n\n    if( ((*(uint32_t*)INFLASH_ADDR_BOOTLOAD) & 0x2FFE0000) == 0x20000000 )// 检查栈顶地址是否合法\n    { \n    BoardDisableIrq();   // 禁止中断\n        JumpToBootload = (IapFun)*(uint32_t*)(INFLASH_ADDR_BOOTLOAD+4);  // 用户代码区第二个字为程序开始地址(新程序复位地址)\t\t\n        MSR_MSP(*(uint32_t*)INFLASH_ADDR_BOOTLOAD);\t\t                // 初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址)\n                                        \n    JumpToBootload();\t                                    // 设置PC指针为bootload复位中断函数的地址，往下执行\n    }\n}\n```\n\n## 五、嵌入式系统中结构体函数指针的应用\n\n### 1. 函数指针作为结构体成员\n\n![](/images/posts/C语言函数指针作为结构体成员实现成员操作/1.png)\n\n### 2. 函数指针作为函数的参数\n\n![](/images/posts/C语言函数指针作为结构体成员实现成员操作/2.png)\n\n## 六、使用结构体指针编写回调函数示例\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n/****************************************\n * 函数指针结构体\n ***************************************/\ntypedef struct _OP {\n    float (*p_add)(float, float); \n    float (*p_sub)(float, float); \n    float (*p_mul)(float, float); \n    float (*p_div)(float, float); \n} OP; \n\n/****************************************\n * 加减乘除函数\n ***************************************/\nfloat ADD(float a, float b) {\n    return a + b;\n}\n\nfloat SUB(float a, float b) {\n    return a - b;\n}\n\nfloat MUL(float a, float b) {\n    return a * b;\n}\n\nfloat DIV(float a, float b) {\n    return a / b;\n}\n\n/****************************************\n * 初始化函数指针\n ***************************************/\nvoid init_op(OP *op) {\n    op->p_add = ADD;\n    op->p_sub = SUB;\n    op->p_mul = &MUL;\n    op->p_div = &DIV;\n}\n\n/****************************************\n * 库函数\n ***************************************/\nfloat add_sub_mul_div(float a, float b, float (*op_func)(float, float)) {\n    return (*op_func)(a, b);\n}\n\nint main(int argc, char *argv[]) {\n    OP *op = (OP *)malloc(sizeof(OP)); \n    init_op(op);\n    \n    /* 直接使用函数指针调用函数 */ \n    printf(\"ADD = %f, SUB = %f, MUL = %f, DIV = %f\\n\", \n           (op->p_add)(1.3, 2.2), \n           (*op->p_sub)(1.3, 2.2), \n           (op->p_mul)(1.3, 2.2), \n           (*op->p_div)(1.3, 2.2));\n     \n    /* 调用回调函数 */ \n    printf(\"ADD = %f, SUB = %f, MUL = %f, DIV = %f\\n\", \n           add_sub_mul_div(1.3, 2.2, ADD), \n           add_sub_mul_div(1.3, 2.2, SUB), \n           add_sub_mul_div(1.3, 2.2, MUL), \n           add_sub_mul_div(1.3, 2.2, DIV));\n\n    return 0; \n}\n```\n\n{% tagRoulette \"早餐,能量开启,营养均衡,元气满满,唤醒味蕾\" \"🍳\" %}","tags":["嵌入式","C语言","技术"],"categories":["嵌入式"]},{"title":"Hello World","url":"/2013/12/24/hello-world/","content":"\nWelcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.\n\n\n\n---\n![心海元素爆发](https://upload-bbs.miyoushe.com/upload/2023/07/14/79695828/e4ea64c7a7ed5674a1521e5a7379189f_8744269808192540895.png)\n\n{% pullquote  left %}\n珊瑚宫心海作为海祇岛的\"现人神巫女\"，不仅是反抗军的领袖，更是一位精通兵法与治愈之术的智者\n{% endpullquote %}\n珊瑚宫心海曾言：\"战争不是目的，而是手段。真正的胜利不在于击败敌人，而在于守护人民的笑容。\"这份理念让她在领导反抗军时始终保持清醒的头脑。在《原神》的故事中，珊瑚宫心海展现了非凡的领导才能。\n{% pullquote right %}\n她以\"深海舌鲆鱼\"为代号制定的作战计划精妙绝伦，连天领奉行的将领都为之惊叹。\n{% endpullquote %}\n这种将军事才能与人文关怀结合的特质，使她成为稻妻最受尊敬的人物之一。\n**心海的元素爆发\"海人化羽\"** 不仅能治愈全队，还能召唤 *化海月* 持续恢复生命，体现了她<mark>既是军师也是医者</mark>的双重身份。珊瑚宫心海的神之眼是水系，这象征着她如水般柔韧而不可摧的特质——既能以智慧化解冲突，又能以坚韧抵御压迫心海的命之座\"眠龙座\"暗示着她体内沉睡的龙族血脉，这也是她能同时掌控治愈与破坏两种力量的原因\n{% pullquote left %}\n\"兵无常势，水无常形\"——这是珊瑚宫心海最常引用的兵法精髓，也是她应对眼狩令危机的核心策略\n> 在稻妻内战期间，珊瑚宫心海面临巨大压力：\n既要抵御幕府军的进攻，又要防止愚人众的渗透，同时还要维持海祇岛民众的生计\n> 这种复杂局面下，她展现了超越年龄的政治智慧和战略眼光\n![珊瑚宫心海](/images/taichi.svg)\n\"真正的领袖不在于力量强弱，而在于能否在黑暗中为子民点亮希望的灯火\"\n{% endpullquote %}\n\n{% pullquote right %}\n珊瑚宫心海的战术风格：\n```python\ndef kokomi_strategy(situation):\n    if situation.threat_level > 7:\n        return \"退守+治疗\"\n    elif resources_adequate(situation):\n        return \"水母部署+游击战\"\n    else:\n        return \"祈雨+谈判\"\n```\n{% endpullquote %}\n\n分析元素战技「海月之誓」：\n召唤化海月持续治疗领域内角色  \n治疗量基于心海的生命值上限，每2秒恢复一次，持续12秒——这稳定的治疗节奏正如 Pull Quote 在长文中提供的视觉呼吸点探讨「现人神巫女」的宗教含义：海祇大御神奥罗巴斯陨落后，心海作为人神沟通的桥梁，其服饰上的「逆鳞」纹样象征牺牲精神，这与 Pull Quote 自我聚焦以服务全文的定位异曲同工\n\n# H1 珊瑚宫心海\n### H3 珊瑚宫心海\n#### H4 珊瑚宫心海\n##### H5 珊瑚宫心海\n###### H6 珊瑚宫心海\n> \n>       \n>    \n> \n>\n> \n\n**加粗文本** 和 *斜体文本*  \n~~删除线~~ 和 ++下划线++  \n`行内代码` 和 [链接](https://hexo.io)\n\n---\n\n\n## 列表类型\n### 无序列表\n- Item 1\n- Item 2\n  - 子项目 2.1\n  - 子项目 2.2\n\n### 有序列表\n1. 第一项\n2. 第二项\n   1. 嵌套项 2.1\n   2. 嵌套项 2.2\n\n### 定义列表\nHTML\n: 超文本标记语言\n\nCSS\n: 层叠样式表\n\n---\n## 流程图 \n\n```mermaid\ngraph TD\n    subgraph 海祇岛作战指挥系统\n        style 珊瑚宫心海 fill:#ffc6e2,stroke:#c38fff,stroke-width:3px,color:#8a2f8f\n        style 前线将士 fill:#e6d1ff,stroke:#b56dff\n        style 军情回报 fill:#ffd6f0,stroke:#ff7bac\n        style 海祇岛作战指挥系统 fill:#ffc6e2,stroke:#c38fff,stroke-width:3px,color:#8a2f8f\n\n        珊瑚宫心海[\"🐚 珊瑚宫心海\"] -->|\"💧 作战指令\"| 战区部署[\"🎌 战区部署\"]\n        战区部署 --> 战区循环[\"🔁 战区循环\"]\n        \n        subgraph 战区循环\n            style 战区循环 fill:#f5e6ff,stroke:#d9a0ff\n            指令传达[\"✉️ 指令传达\"] --> 情报传递[\"✨ 情报传递\"]\n            subgraph 情报传递[128次加密]\n                style 情报传递 fill:#f0d9ff,stroke:#c97bff\n                情报加密[\"📜 情报加密\"] --> 信鸽传送[\"🕊️ 信鸽传送\"]\n            end\n            战况查询[\"🔍 战况查询\"] --> 军情回报[\"📋 军情回报\"]\n        end\n        \n        军情回报 -->|\"🌸 战果回报\"| 珊瑚宫心海\n    end\n    \n    珊瑚宫心海 --> 作战总结[\"🌊 战术总结\"]\n    \n    classDef coral fill:#ffc6e2,stroke:#c38fff;\n    classDef pink fill:#ffd6f0,stroke:#ff7bac;\n    classDef lavender fill:#e6d1ff,stroke:#b56dff;\n    classDef command fill:#f0e6ff,stroke:#d9a0ff;\n    \n    class 珊瑚宫心海,作战总结 coral;\n    class 军情回报 pink;\n    class 前线将士 lavender;\n    class 战区部署,指令传达,情报传递,战况查询 command;\n    \n    linkStyle 0 stroke:#c38fff,stroke-width:2px;\n    linkStyle 1 stroke:#d9a0ff,stroke-width:2px;\n    linkStyle 2 stroke:#ff7bac,stroke-width:2px;\n```\n\n\n---\n\n## 表格示例\n\n| 心海特质          | Pull Quote 原则         | 实现效果                     |\n|-------------------|------------------------|----------------------------|\n| 水系柔韧💧         | 响应式布局             | 自动适应移动端与桌面端       |\n| 兵法典籍📚         | 结构化提取             | 精准定位核心内容             |\n| 龙族血脉🐉         | CSS 深度定制           | 支持主题化样式扩展           |\n\n\n\n> **测试结论**：该插件完美实现了：\n> - 复杂内容的优雅呈现\n> - 多场景的样式适配\n> - 深度定制的扩展能力\n> - 情感共鸣的视觉强化\n\n---\n\n## 其他元素\n- 缩写：<abbr title=\"HyperText Markup Language\">HTML</abbr>\n- 下标：H<sub>2</sub>O\n- 上标：E = mc<sup>2</sup>\n- 键盘输入：<kbd>Ctrl</kbd>+<kbd>C</kbd>\n\n---\n\n## 美图\n![Hexo Logo](/images/banner.webp)\n\n### 分隔线\n***\n<div style=\"float: right; margin-left: 20px; margin-bottom: 20px; width: 300px; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 15px rgba(201, 123, 255, 0.3);\">\n    <img src=\"https://myxiaoyi.github.io/images/reimu.png\" alt=\"珊瑚宫心海\" style=\"width: 100%;\">\n    <p style=\"text-align: center; padding: 10px; background: linear-gradient(to right, #fce6f2, #e6d1ff); color: #7a1f7f; font-weight: bold; margin: 0;\">海祇岛军师 - 珊瑚宫心海</p>\n</div>\n\n这里是左侧的文本内容。珊瑚宫心海作为海祇岛的\"现人神巫女\"，不仅是反抗军的领袖，更是一位精通兵法与治愈之术的智者。她以\"深海舌鲆鱼\"为代号制定的作战计划精妙绝伦，连天领奉行的将领都为之惊叹。\n\n她的元素爆发\"海人化羽\"不仅能治愈全队，还能召唤化海月持续恢复生命，体现了她既是军师也是医者的双重身份。心海的神之眼是水系，这象征着她如水般柔韧而不可摧的特质——既能以智慧化解冲突，又能以坚韧抵御压迫。\n\n在稻妻内战期间，珊瑚宫心海面临巨大压力：既要抵御幕府军的进攻，又要防止愚人众的渗透，同时还要维持海祇岛民众的生计。这种复杂局面下，她展现了超越年龄的政治智慧和战略眼光。\n\n<div style=\"clear: both;\"></div> <!-- 清除浮动 -->\n\n---\n\n## 代码块\n```js\n// JavaScript 代码示例\nconst hexo = require('hexo');\nconsole.log(`Hexo version: ${hexo.version}`);\n```\n\n```python\n# Python 代码示例\ndef hello_hexo():\n    print(\"Hello Hexo!\")\n```\n\n---\n\n## 引用块\n> 这是一个引用块  \n> 第二行引用内容  \n> — *引用来源*\n\n---\n\n## 数学公式 \n$$\nf(x) = \\int_{-\\infty}^\\infty \\hat f(\\xi)\\,e^{2 \\pi i \\xi x} \\,d\\xi\n$$\n\n行内公式：$E = mc^2$\n\n---\n\n::: info\nThis is an info box.\n:::\n\n::: tip\nThis is a tip.\n:::\n\n::: warning\nThis is a warning.\n:::\n\n::: danger\nThis is a dangerous warning.\n:::\n\n::: danger STOP\nDanger zone, do not proceed\n:::\n\n::: details\nThis is a details block.\n:::\n---\n\n\n## 标签插件\n\n> \"真正的排版艺术如同心海的兵法——看似云淡风轻，实则每一步都经过精密推演\"\n\n\n---\n\n{% post_link \"hello-world\" auto %}\n\n{% heatMapCard %}\n\n{% asset_img avatar.webp 个人头像 %}\n\n"}]